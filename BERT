{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyMFnHkxxVFXyWBWKqLz1kFl"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":[],"metadata":{"id":"53GCqU1OoITI"}},{"cell_type":"code","source":["from matplotlib_inline import backend_inline\n","from matplotlib import pyplot as plt\n","from IPython import get_ipython\n","from IPython import display\n","import torch\n","import random\n","import re\n","import collections\n","import inspect\n","import os\n","import hashlib # Added missing import\n","import zipfile # Added missing import\n","import tarfile # Added missing import\n","import requests # Import the requests library\n","from torch import nn\n","from torch.nn import functional as F"],"metadata":{"id":"MPIRm_Oi8ljo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","def use_svg_display():\n","    \"\"\"Use the svg format to display a plot in Jupyter.\n","\n","    Defined in :numref:`sec_calculus`\"\"\"\n","    backend_inline.set_matplotlib_formats('svg')\n","def set_figsize(figsize=(3.5,2.5)):\n","    use_svg_display()\n","    plt.rcParams['figure.figsize']=figsize\n","def set_axes(axes,xlabel,ylabel,xlim,ylim,xscale,yscale,legend):\n","    axes.set_xlabel(xlabel), axes.set_ylabel(ylabel)\n","    axes.set_xscale(xscale), axes.set_yscale(yscale)\n","    axes.set_xlim(xlim), axes.set_ylim(ylim)\n","    if legend:\n","        axes.legend(legend)\n","    axes.grid()\n","def plot(X,Y=None,xlabel=None, ylabel=None, legend=[],xlim=None, ylim=None, xscale='linear',yscale='linear',fmts=('-','m--','g-.','r:'),figsize=(3.5,2.5),axes=None):\n","    def has_one_axis(X):\n","        return(hasattr(X,'ndim') and X.ndim == 1 or isinstance(X,list) and not hasattr(X[0],\"__len__\"))\n","    if has_one_axis(X): X=[X]\n","    if Y is None:\n","        X,Y=[[]]*len(X),X\n","    elif has_one_axis(Y):\n","        Y=[Y]\n","    if len(X) != len(Y):\n","        X=X*len(Y)\n","    set_figsize(figsize)\n","    if axes is None:\n","        axes=plt.gca()\n","    axes.cla()\n","    for x,y,fmt in zip (X,Y,fmts):\n","        axes.plot(x,y,fmt) if len(x) else axes.plot(y,fmt)\n","    set_axes(axes,xlabel,ylabel,xlim,ylim,xscale,yscale,legend)\n","\n","class HyperParameters:\n","    \"\"\"The base class of hyperparameters.\"\"\"\n","    def save_hyperparameters(self, ignore=[]):\n","        \"\"\"Defined in :numref:`sec_oo-design`\"\"\"\n","        raise NotImplemented\n","\n","    def save_hyperparameters(self, ignore=[]):\n","        \"\"\"Save function arguments into class attributes.\n","\n","        Defined in :numref:`sec_utils`\"\"\"\n","        frame = inspect.currentframe().f_back\n","        _, _, _, local_vars = inspect.getargvalues(frame)\n","        self.hparams = {k:v for k, v in local_vars.items()\n","                        if k not in set(ignore+['self']) and not k.startswith('_')}\n","        for k, v in self.hparams.items():\n","            setattr(self, k, v)\n","\n","class ProgressBoard(HyperParameters):\n","    \"\"\"The board that plots data points in animation.\n","\n","    Defined in :numref:`sec_oo-design`\"\"\"\n","    def __init__(self, xlabel=None, ylabel=None, xlim=None,\n","                 ylim=None, xscale='linear', yscale='linear',\n","                 ls=['-', '--', '-.', ':'], colors=['C0', 'C1', 'C2', 'C3'],\n","                 fig=None, axes=None, figsize=(3.5, 2.5), display=True):\n","        self.save_hyperparameters()\n","\n","    def draw(self, x, y, label, every_n=1):\n","        raise NotImplemented\n","\n","    def draw(self, x, y, label, every_n=1):\n","        \"\"\"Defined in :numref:`sec_utils`\"\"\"\n","        Point = collections.namedtuple('Point', ['x', 'y'])\n","        if not hasattr(self, 'raw_points'):\n","            self.raw_points = collections.OrderedDict()\n","            self.data = collections.OrderedDict()\n","        if label not in self.raw_points:\n","            self.raw_points[label] = []\n","            self.data[label] = []\n","        points = self.raw_points[label]\n","        line = self.data[label]\n","        points.append(Point(x, y))\n","        if len(points) != every_n:\n","            return\n","        mean = lambda x: sum(x) / len(x)\n","        line.append(Point(mean([p.x for p in points]),\n","                          mean([p.y for p in points])))\n","        points.clear()\n","        if not self.display:\n","            return\n","        use_svg_display()\n","        if self.fig is None:\n","            self.fig = plt.figure(figsize=self.figsize)\n","        plt_lines, labels = [], []\n","        for (k, v), ls, color in zip(self.data.items(), self.ls, self.colors):\n","            plt_lines.append(plt.plot([p.x for p in v], [p.y for p in v],\n","                                          linestyle=ls, color=color)[0])\n","            labels.append(k)\n","        axes = self.axes if self.axes else plt.gca()\n","        if self.xlim: axes.set_xlim(self.xlim)\n","        if self.ylim: axes.set_ylim(self.ylim)\n","        if not self.xlabel: self.xlabel = self.x\n","        axes.set_xlabel(self.xlabel)\n","        axes.set_ylabel(self.ylabel)\n","        axes.set_xscale(self.xscale)\n","        axes.set_yscale(self.yscale)\n","        axes.legend(plt_lines, labels)\n","        display.display(self.fig)\n","        display.clear_output(wait=True)\n"],"metadata":{"id":"8GmBXFpg9P5O"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Module(nn.Module, HyperParameters):\n","    def __init__(self,plot_train_per_epoch=2, plot_valid_per_epoch=1):\n","        super().__init__()\n","        self.save_hyperparameters()\n","        self.board= ProgressBoard()\n","    def squared_loss(self,y_hat,y):\n","        return(y_hat-y.reshape(y_hat.shape))**2/2\n","    def forward(self, X):\n","        assert hasattr(self, 'net'), 'Neural Network is defined'\n","        return self.net(X)\n","    def plot(self, key, value, train):\n","        assert hasattr(self,'trainer'), 'Trainer is not inited'\n","        self.board.xlabel='epoch'\n","        if train:\n","            x= self.trainer.train_batch_idx / \\\n","                self.trainer.num_train_batches\n","            n=self.trainer.num_train_batches / \\\n","                self.plot_train_per_epoch\n","        else:\n","            x=self.trainer.epoch+1\n","            n=self.trainer.num_val_batches / \\\n","                self.plot_valid_per_epoch\n","        if isinstance(value, int):\n","            value=torch.tensor(value)\n","        self.board.draw(x,value.to('cpu').detach().numpy(), ('train_' if train else 'val_')+key, every_n=int(n))\n","\n","    def training_step(self, batch):\n","        l=self.loss(self(*batch[:-1]), batch[-1])\n","        self.plot('loss', l, train=True)\n","        return l\n","    def validation_step(self,batch):\n","        l=self.loss(self(*batch[:-1]), batch[-1])\n","        self.plot('loss', l, train=False)\n","    def configure_optimizers(self):\n","        return torch.optim.SGD(self.parameters(),lr=self.lr)\n","    def  apply_init(self, inputs, init=None):\n","        self.forward(inputs)\n","        if init is not None:\n","            self.net.apply(init)"],"metadata":{"id":"FiKOFkVk9JfV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class DataModule(HyperParameters):\n","    def __init__(self, root='./data', num_workers=4):\n","        self.save_hyperparameters()\n","    def get_dataloader(self,train):\n","        i=slice(0,self.num_train) if train else slice(self.num_train, None)\n","        return self.get_tensorloader((self.X, self.y), train, i)\n","    def train_dataloader(self):\n","        return self.get_dataloader(train=True)\n","    def val_dataloader(self):\n","        return self.get_dataloader(train=False)\n","    def get_tensorloader(self, tensors, train, indices=slice(0, None)):\n","        tensors = tuple(a[indices] for a in tensors)\n","        dataset = torch.utils.data.TensorDataset(*tensors)\n","        return torch.utils.data.DataLoader(dataset, self.batch_size, shuffle=train)\n"],"metadata":{"id":"mYec5ZP09pgm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def gpu(i=0):\n","    return torch.device(f'cuda:{i}')\n","def num_gpus():\n","    return torch.cuda.device_count()\n","class Trainer(HyperParameters):\n","    def __init__(self, max_epochs, num_gpus_arg=0, gradient_clip_val=0):\n","        self.save_hyperparameters()\n","        self.gpus=[gpu(i) for i in range(min(num_gpus_arg, num_gpus()))]\n","    def prepare_data(self,data):\n","        self.train_dataloader=data.train_dataloader()\n","        self.val_dataloader=data.val_dataloader()\n","        self.num_train_batches=len(self.train_dataloader)\n","        self.num_val_batches=(len(self.val_dataloader) if self.val_dataloader is not None else 0)\n","    def prepare_model(self,model):\n","        model.trainer=self\n","        model.board.xlim=[0,self.max_epochs]\n","        if self.gpus:\n","            model.to(self.gpus[0])\n","        self.model=model\n","    def fit(self,model,data):\n","        self.prepare_data(data)\n","        self.prepare_model(model)\n","        self.optim=model.configure_optimizers()\n","        self.epoch=0\n","        self.train_batch_idx=0\n","        self.val_batch_idx=0\n","        for self.epoch in range(self.max_epochs):\n","            self.fit_epoch()\n","    def fit_epoch(self):\n","        self.model.train()\n","        for batch in self.train_dataloader:\n","            loss = self.model.training_step(self.prepare_batch(batch))\n","            self.optim.zero_grad()\n","            with torch.no_grad():\n","                loss.backward()\n","                if self.gradient_clip_val > 0: # To be discussed later\n","                    self.clip_gradients(self.gradient_clip_val, self.model)\n","                self.optim.step()\n","            self.train_batch_idx += 1\n","        if self.val_dataloader is None:\n","            return\n","        self.model.eval()\n","        for batch in self.val_dataloader:\n","            with torch.no_grad():\n","                self.model.validation_step(self.prepare_batch(batch))\n","            self.val_batch_idx += 1\n","    def prepare_batch(self,batch):\n","        if self.gpus:\n","            batch=[a.to(self.gpus[0]) for a in batch]\n","        return batch\n","    def clip_gradients(self, grad_clip_val, model):\n","        params = [p for p in model.parameters() if p.requires_grad]\n","        norm = torch.sqrt(sum(torch.sum((p.grad ** 2)) for p in params))\n","        if norm > grad_clip_val:\n","            for param in params:\n","                param.grad[:] *= grad_clip_val / norm\n","\n"],"metadata":{"id":"phu0SHYu9z9g"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Classifier(Module):\n","    def validation_step(self, batch):\n","        Y_hat = self(*batch[:-1])\n","        self.plot('loss', self.loss(Y_hat, batch[-1]), train=False)\n","        self.plot('acc', self.accuracy(Y_hat, batch[-1]), train=False)\n","    def accuracy(Self, Y_hat, Y, averaged=True):\n","        Y_hat= Y_hat.reshape((-1, Y_hat.shape[-1]))\n","        preds=Y_hat.argmax(axis=1).type(Y.dtype)\n","        compare=(preds==Y.reshape(-1)).type(torch.float32)\n","        return compare.mean() if averaged else compare\n","    def layer_summary(self,X_shape):\n","        X=torch.randn(*X_shape)\n","        for layer in self.net:\n","            X=layer(X)\n","            print(layer.__class__.__name__, 'output shape: \\t', X.shape)"],"metadata":{"id":"LDekJ1vM-Tic"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n"],"metadata":{"id":"UMve41Wt9UF5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1753354874027,"user_tz":-420,"elapsed":1486,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}},"outputId":"b0803a1d-1f0a-404c-ec52-c995def4673b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","import os, zipfile, tarfile, random\n","import torch\n","from torch.utils.data import DataLoader\n","\n","# 1) Mount Drive (chạy 1 lần ở đầu notebook)\n","drive.mount('/content/drive')\n","\n","# 2) Đường dẫn tới file ZIP trên Drive của bạn\n","DRIVE_ZIP_PATH = '/content/drive/MyDrive/wikitext2.zip'\n","\n","def extract(zip_path, target_folder):\n","    \"\"\"Giải nén zip vào target_folder.\"\"\"\n","    os.makedirs(target_folder, exist_ok=True)\n","    with zipfile.ZipFile(zip_path, 'r') as zf:\n","        zf.extractall(target_folder)\n","\n","def download_extract(name, folder=None):\n","    \"\"\"\n","    Giả lập download_extract cho 'wikitext-2':\n","    - extract DRIVE_ZIP_PATH vào <base_dir>/<folder>\n","    - phát hiện xem trong đó có 1 subfolder duy nhất không\n","    - trả về đúng đường dẫn chứa wiki.train.tokens\n","    \"\"\"\n","    if name != 'wikitext-2':\n","        raise ValueError(f\"Unknown dataset: {name}\")\n","    base_dir = os.path.dirname(DRIVE_ZIP_PATH)\n","    # Nếu chỉ định folder, extract vào base_dir/folder, ngược lại base_dir\n","    extract_root = os.path.join(base_dir, folder) if folder else base_dir\n","    extract(DRIVE_ZIP_PATH, extract_root)\n","    # Kiểm tra xem có đúng 1 thư mục con không\n","    entries = os.listdir(extract_root)\n","    if len(entries) == 1 and os.path.isdir(os.path.join(extract_root, entries[0])):\n","        # ZIP có cấu trúc root-subfolder, dùng subfolder đó\n","        data_dir = os.path.join(extract_root, entries[0])\n","    else:\n","        # ZIP bung thẳng files vào extract_root\n","        data_dir = extract_root\n","    return data_dir"],"metadata":{"id":"9Jx-RXNgk9Zr","executionInfo":{"status":"ok","timestamp":1753354875514,"user_tz":-420,"elapsed":1492,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"e4e1a2ac-719b-4369-cc34-92cc6d9549fa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["def tokenize(lines, token='word'):\n","    \"\"\"Split text lines into word or character tokens.\"\"\"\n","    assert token in ('word', 'char'), 'Unknown token type: ' + token\n","    return [line.split() if token == 'word' else list(line) for line in lines]"],"metadata":{"id":"YCavajN0B9ph"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Nhận vào 1 tập token (có thể là list các câu).\n","# Đếm tần suất, giữ lại token theo min_freq + reserved_tokens + '<unk>'.\n","# khai báo một lớp Vocab để quản lý ánh xạ giữa token (từ, ký tự,..) và chỉ số (index)\n","# tokens: danh sách token\n","# min_freq: tần suất tối thiểu để một token được giữ lại trong từ điển\n","# reserved_tokens: danh sách token đặt trước như pad, bos, eos\n","class Vocab:\n","  def __init__(self, tokens=[], min_freq=0, reserved_tokens=[]):\n","    if tokens and isinstance(tokens[0],list):            # nếu token không rỗng và phần tử đầu vào là một list\n","      tokens=[token for line in tokens for token in line]  # lấy từng token trong line (một list token trong tokens) rồi gom lại thành một list phẳng\n","    counter=collections.Counter(tokens)                    # đếm tần suất xuất hiện của từng token, kết quả là một counter mapping token -> số lần xuất hiện\n","    self.token_freqs=sorted(counter.items(), key=lambda x:x[1], reverse=True)  # chuyển các cặp (token, freq) thành một list theo tần suất giảm dần, key là tiêu chí so sánh, ở đây mỗi phần tử x tiêu chí là freq nên x[1], thông thường sorted sắp tăng dần nên phải reversed\n","    # xây danh sách từ chỉ số -> token , unk luôn đầu tiên để gán cho token lạ + reversed_tokens + token thật sự có tần suất >= min_freq\n","    # dùng set để loại bỏ trùng, sorted để chắc chắn thứ tự cố định (theo mã unicode của chuỗi)\n","    self.idx_to_token=list(sorted(set(['<unk>']+reserved_tokens+[token for token, freq in self.token_freqs if freq>=min_freq])))\n","    self.token_to_idx={token:idx for idx, token in enumerate(self.idx_to_token)}  # tạo ngược lại một dict token_to_idx bằng các đánh số 0,1,2,.. trên idx_to_token\n","  def __len__(self):\n","    return len(self.idx_to_token)             # trả về số token trong từ điển\n","  def __getitem__(self,tokens):               # lấy index\n","    if not isinstance(tokens,(list,tuple)):\n","      return self.token_to_idx.get(tokens,self.unk)\n","    return [self.__getitem__(token) for token in tokens]\n","  def to_tokens(self, indices):               # lấy token của index\n","    if hasattr(indices,'__len__') and len(indices)>1:\n","      return [self.idx_to_token[int(index)] for index in indices]\n","    return self.idx_to_token[indices]\n","  @property\n","  def unk(self):\n","    return self.token_to_idx['<unk>']"],"metadata":{"id":"KpFscInsxJZC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Encoder(nn.Module):     # nhận về một chuỗi nguồn source, xử lý chuỗi để sinh ra một biểu diễn ẩn lưu thông tin ngữ nghĩa, ngữ cảnh, thứ tự từ,..\n","    def __init__(self):\n","      super().__init__()\n","    def forward(self, X, *args):\n","      raise NotImplemented\n","class Decoder(nn.Module):      # Dựa vào biểu diễn ẩn của encoder cùng với đầu vào lần lượt sinh ra từng token đích target, cập nhật trạng thái nội bộ sau mỗi bước\n","    def __init__(self):\n","      super().__init__()\n","    def init_state(self, enc_outputs, *args):\n","      raise NotImplemented\n","    def forward(self, X, state):\n","      raise NotImplemented\n","class EncoderDecoder(Classifier):\n","  def __init__(self, encoder, decoder):\n","    super().__init__()\n","    self.encoder=encoder\n","    self.decoder=decoder\n","  def forward(self, enc_X, dec_X, *args):  # enc_X: input cho encoder, dec_X: input cho decoder, *args: các tham số phụ trợ\n","    enc_all_outputs=self.encoder(enc_X, *args)      # chạy encoder, thu về outputs\n","    dec_state = self.decoder.init_state(enc_all_outputs, *args)  # dùng init_state của decoder để khởi tạo dec_state, dựa trên output của encode và các tham số bổ sung\n","    return self.decoder(dec_X, dec_state)[0]      # chạy decoder trên toàn bộ input decoder, trả về một tuple (outputs, state), lấy phần outputs\n","  def predict_step(self, batch, device, num_steps, save_attention_weights=False):\n","    batch=[a.to(device) for a in batch]\n","    src, tgt, src_valid_len, _= batch   # giải nén source, terget, độ dài thực không tính padding\n","    self.encoder.to(device)\n","    self.decoder.to(device)\n","    enc_all_outputs=self.encoder(src, src_valid_len)   # chạy encoder với source và độ dài thực\n","    dec_state=self.decoder.init_state(enc_all_outputs, src_valid_len)     # khởi tạo state cho decoder\n","    outputs, attention_weights = [tgt[:, (0)].unsqueeze(1)], []     # tạo danh sách output ban đầu tằng token bos, attention_weights rỗng\n","    for _ in range(num_steps):\n","      Y, dec_state = self.decoder(outputs[-1], dec_state)   # lấy token cuối cùng trong outputs chạy qua decoder cùng dec_state, Y shape (batch, 1, vocab_size), dec_state: state cập nhật\n","      outputs.append(Y.argmax(dim=2))    # lấy chỉ số token có xác suất cao nhất rồi append vào output\n","      if save_attention_weights:\n","        attention_weights.append(self.decoder.attention_weights)   # nếu cần lưu attention weight thì append vào\n","    return torch.cat(outputs[1:], dim=1), attention_weights    # output trả về k có <bos>"],"metadata":{"id":"hYerWL4PoMFN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class RNN(Module):\n","  def __init__(self, num_inputs, num_hiddens):\n","    super().__init__()\n","    self.save_hyperparameters()\n","    self.rnn=nn.RNN(num_inputs, num_hiddens)\n","  def forward(self, inputs, H=None):\n","    return self.rnn(inputs, H)\n","class GRU(RNN):\n","  def __init__(self, num_inputs, num_hiddens, num_layers, dropout=0):\n","    Module.__init__(self)\n","    self.save_hyperparameters()\n","    self.rnn = nn.GRU(num_inputs, num_hiddens, num_layers,\n","    dropout=dropout)\n"],"metadata":{"id":"3UsY-u0SLZfu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def masked_softmax(X, valid_lens):\n","    def _sequence_mask(X, valid_len, value=0):\n","        maxlen = X.size(1)\n","        mask = torch.arange((maxlen), dtype=torch.float32,\n","                            device=X.device)[None, :] < valid_len[:, None]\n","        X[~mask] = value\n","        return X\n","    if valid_lens is None:\n","        return nn.functional.softmax(X, dim=-1)\n","    else:\n","        shape = X.shape\n","        if valid_lens.dim() == 1:\n","            valid_lens = torch.repeat_interleave(valid_lens, shape[1])\n","        else:\n","            valid_lens = valid_lens.reshape(-1)\n","        X = _sequence_mask(X.reshape(-1, shape[-1]), valid_lens, value=-1e6)\n","        return nn.functional.softmax(X.reshape(shape), dim=-1)"],"metadata":{"id":"uPgqQXf5XLTI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def show_heatmaps(matrices, xlabel, ylabel, titles=None, figsize=(2.5, 2.5), cmap='Reds'):\n","    use_svg_display()\n","    num_rows, num_cols, _, _ =matrices.shape\n","    fig, axes = plt.subplots(num_rows, num_cols, figsize=figsize,\n","                             sharex=True, sharey=True, squeeze=False)\n","    for i, (row_axes, row_matrices) in enumerate(zip(axes, matrices)):\n","        for j, (ax, matrix) in enumerate(zip(row_axes, row_matrices)):\n","            pcm = ax.imshow(matrix.detach().numpy(), cmap=cmap)\n","            if i == num_rows - 1:\n","                ax.set_xlabel(xlabel)\n","            if j == 0:\n","                ax.set_ylabel(ylabel)\n","            if titles:\n","                ax.set_title(titles[j])\n","    fig.colorbar(pcm, ax=axes, shrink=0.6);"],"metadata":{"id":"AWrkXT0Qi9cf"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Query** là câu hỏi mà decoder hoặc bất cứ thành phần nào cần attention đặt ra khi muốn thu thập thông tin, ví dụ trong seq2seq decoder dùng embedding của token vừa sinh ra để làm quẻy, hỏi xem trong toàn bộ đầu ra của encoder chỗ nào quan trọng nhất cho bước này.  (hidden states của decoder)\\\n","\\\n","**Key** là từ khóa đại diện cho từng vị trí trong dãy nguồn (encoder outputs), mỗi key mô tả nội dung của một vị trí encoder ở không gian mà ta có thể so sánh với query. (hidden states của encoder) \\\n","\\\n","**Value** là giá trị tương ứng của mỗi key, chính là thông tin mà ta muốn lấy ra cuối cùng, khi attention quyết định vị trí nào quan trọng (qua scores giữa Q và K) nó sẽ dùng V tương ứng để tạo ra context vector. (encoder outputs)\n"],"metadata":{"id":"Q-ImEHzJgeFb"}},{"cell_type":"code","source":["# score giữa mỗi cặp Q-K được tính bằng cộng tuyến tính và tanh\n","class AdditiveAttention(nn.Module):\n","    def __init__(self, num_hiddens, dropout, **kwargs):\n","        super(AdditiveAttention, self).__init__(**kwargs)\n","        self.W_k = nn.LazyLinear(num_hiddens, bias=False)\n","        self.W_q = nn.LazyLinear(num_hiddens, bias=False)\n","        self.w_v = nn.LazyLinear(1, bias=False)\n","        self.dropout = nn.Dropout(dropout)\n","    def forward(self, queries, keys, values, valid_lens):\n","        queries, keys = self.W_q(queries), self.W_k(keys)      # áp 2 tầng linear để chiếu quẻies và keys về cùng chiều ẩn\n","        features = queries.unsqueeze(2) + keys.unsqueeze(1)\n","        features = torch.tanh(features)          # vector features\n","        scores = self.w_v(features).squeeze(-1)    # chiếu xuống scalar score bằng w_v\n","        self.attention_weights = masked_softmax(scores, valid_lens)   # phân phối xác suất attention\n","        return torch.bmm(self.dropout(self.attention_weights), values)   # kết hợp values theo phân phối attention qua batch matrix multiplication -> output context vectors\n"],"metadata":{"id":"u33rhNz9UJlM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class DotProductAttention(nn.Module):\n","    def __init__(self, dropout):\n","        super().__init__()\n","        self.dropout = nn.Dropout(dropout)\n","    def forward(self, queries, keys, values, valid_lens=None):\n","        d = queries.shape[-1]\n","        scores = torch.bmm(queries, keys.transpose(1,2)) / math.sqrt(d)\n","        self.attention_weights = masked_softmax(scores, valid_lens)\n","        return torch.bmm(self.dropout(self.attention_weights), values)"],"metadata":{"id":"wB6wvnEW0Dho"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class MultiHeadAttention(nn.Module):\n","    def __init__(self, num_hiddens, num_heads, dropout, bias=False, **kwargs):\n","        super().__init__()\n","        self.num_heads = num_heads\n","        self.attention = DotProductAttention(dropout)\n","        self.W_q = nn.LazyLinear(num_hiddens, bias=bias)\n","        self.W_k = nn.LazyLinear(num_hiddens, bias=bias)\n","        self.W_v = nn.LazyLinear(num_hiddens, bias=bias)\n","        self.W_o = nn.LazyLinear(num_hiddens, bias=bias)\n","    def forward(self, queries, keys, values, valid_lens):\n","        queries = self.transpose_qkv(self.W_q(queries))\n","        keys = self.transpose_qkv(self.W_k(keys))\n","        values = self.transpose_qkv(self.W_v(values))\n","        if valid_lens is not None:\n","            valid_lens = torch.repeat_interleave(\n","                valid_lens, repeats=self.num_heads, dim=0)\n","        output = self.attention(queries, keys, values, valid_lens)\n","        output_concat = self.transpose_output(output)\n","        return self.W_o(output_concat)\n","    def transpose_qkv(self, X):\n","        X = X.reshape(X.shape[0], X.shape[1], self.num_heads, -1)\n","        X = X.permute(0, 2, 1, 3)\n","        return X.reshape(-1, X.shape[2], X.shape[3])\n","    def transpose_output(self, X):\n","        X = X.reshape(-1, self.num_heads, X.shape[1], X.shape[2])\n","        X = X.permute(0, 2, 1, 3)\n","        return X.reshape(X.shape[0], X.shape[1], -1)\n"],"metadata":{"id":"k-ro4D0WT1xt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import math"],"metadata":{"id":"g0mx5GniClS4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def cpu():\n","  \"\"\"Get the CPU device.\"\"\"\n","  return torch.device('cpu')\n","def try_gpu(i=0):\n","  if num_gpus() >= i + 1:\n","    return gpu(i)\n","  return cpu()\n","def try_all_gpus():\n","    return [gpu(i) for i in range(num_gpus())]"],"metadata":{"id":"A0rlJZjJDSsD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class PositionalEncoding(nn.Module):\n","    def __init__(self, num_hiddens, dropout, max_len=1000):\n","        super().__init__()\n","        self.dropout = nn.Dropout(dropout)\n","        self.P = torch.zeros((1, max_len, num_hiddens))\n","        X = torch.arange(max_len, dtype=torch.float32).reshape(\n","            -1, 1) / torch.pow(10000, torch.arange(\n","                0, num_hiddens, 2, dtype=torch.float32)/num_hiddens)\n","        self.P[:, :, 0 ::2]=torch.sin(X)\n","        self.P[:, :, 1 ::2]=torch.cos(X)\n","    def forward(self, X):\n","        X = X + self.P[:, :X.shape[1], :].to(X.device)\n","        return self.dropout(X)"],"metadata":{"id":"fDuvpUjHilET"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class PositionwiseFFN(nn.Module):\n","  def __init__(self, ffn_num_hiddens,ffn_num_outputs):\n","    super().__init__()\n","    self.dense1=nn.LazyLinear(ffn_num_hiddens)\n","    self.relu=nn.ReLU()\n","    self.dense2=nn.LazyLinear(ffn_num_outputs)\n","  def forward(self, X):\n","    return self.dense2(self.relu(self.dense1(X)))"],"metadata":{"id":"RGV2U4t1I8Qa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class AddNorm(nn.Module):\n","  def __init__(self, norm_shape, dropout):\n","    super().__init__()\n","    self.dropout=nn.Dropout(dropout)\n","    self.ln=nn.LayerNorm(norm_shape)\n","  def forward(self, X, Y):\n","    return self.ln(self.dropout(Y)+X)"],"metadata":{"id":"r3mHVpTyJkOb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class TransformerEncoderBlock(nn.Module):\n","  def __init__(self, num_hiddens, ffn_num_hiddens, num_heads, dropout, use_bias=False):\n","    super().__init__()\n","    self.attention=MultiHeadAttention(num_hiddens, num_heads, dropout, use_bias)\n","    self.addnorm1=AddNorm(num_hiddens, dropout)\n","    self.ffn=PositionwiseFFN(ffn_num_hiddens, num_hiddens)\n","    self.addnorm2=AddNorm(num_hiddens, dropout)\n","  def forward(self, X, valid_lens):\n","    Y=self.addnorm1(X, self.attention(X, X, X, valid_lens))\n","    return self.addnorm2(Y, self.ffn(Y))\n"],"metadata":{"id":"HqiAxAJhyAkD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from pickle import decode_long\n","class TransformerDecoderBlock(nn.Module):\n","    def __init__(self, num_hiddens, ffn_num_hiddens, num_heads, dropout, i):\n","        super().__init__()\n","        self.i=i\n","        self.attention1=MultiHeadAttention(num_hiddens, num_heads, dropout)\n","        self.addnorm1=AddNorm(num_hiddens, dropout)\n","        self.attention2=MultiHeadAttention(num_hiddens, num_heads, dropout)\n","        self.addnorm2=AddNorm(num_hiddens, dropout)\n","        self.ffn=PositionwiseFFN(ffn_num_hiddens, num_hiddens)\n","        self.addnorm3=AddNorm(num_hiddens, dropout)\n","    def forward(self, X, state):\n","        enc_outputs, enc_valid_lens = state[0], state[1]\n","        if state[2][self.i] is None:\n","          key_values=X\n","        else:\n","          key_values=torch.cat((state[2][self.i], X), dim=1)\n","        state[2][self.i] = key_values\n","        if self.training:\n","          batch_size, num_steps, _ =X.shape\n","          dec_valid_lens=torch.arange(1, num_steps+1, device=X.device).repeat(batch_size, 1)\n","        else:\n","          dec_valid_lens=None\n","        X2=self.attention1(X, key_values, key_values, dec_valid_lens)\n","        Y=self.addnorm1(X, X2)\n","        Y2=self.attention2(Y, enc_outputs, enc_outputs, enc_valid_lens)\n","        Z=self.addnorm2(Y, Y2)\n","        return self.addnorm3(Z, self.ffn(Z)), state"],"metadata":{"id":"3jh4yF4OoZCg"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Pretraining Tasks"],"metadata":{"id":"Pw2FUh-ET4bS"}},{"cell_type":"code","source":["class TokenEmbedding:  # tải embedding từ file, truy xuất idx to token và ngược lại\n","    def __init__(self, embedding_name):\n","      self.idx_to_token, self.idx_to_vec = self._load_embedding(embedding_name)\n","      self.unknown_idx = 0\n","      self.token_to_idx = {token: idx for idx, token in enumerate(self.idx_to_token)}\n","    def _load_embedding(self, embedding_name):\n","      idx_to_token, idx_to_vec = ['<unk>'], []\n","      data_dir = download_extract(embedding_name)\n","      with open(os.path.join(data_dir, 'vec.txt'), 'r') as f:\n","          for line in f:\n","              elems = line.rstrip().split(' ')\n","              token, elems = elems[0], [float(elem) for elem in elems[1:]]\n","              if len(elems) > 1:\n","                  idx_to_token.append(token)\n","                  idx_to_vec.append(elems)\n","      idx_to_vec = [[0]*len(idx_to_vec[0])] + idx_to_vec\n","      return idx_to_token, torch.tensor(idx_to_vec)\n","    def __getitem__(self, tokens):\n","      indices = [self.token_to_idx.get(token, self.unknown_idx) for token in tokens]\n","      vecs = self.idx_to_vec[torch.tensor(indices)]\n","      return vecs\n","    def __len__(self):\n","      return len(self.idx_to_token)"],"metadata":{"id":"W_3kIC-0olJC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_tokens_and_segments(tokens_a, tokens_b=None):   # chuẩn bị đầu vào với định dạng gồm các token và các segment IDs\n","    tokens = ['<cls>']+ tokens_a +['<sep>']             # định dạng nếu 1 sequence\n","    segments = [0]* (len(tokens_a)+2)                   # eA\n","    if tokens_b is not None:\n","        tokens += tokens_b + ['<sep>']                  # định dạng nếu 2 sequences\n","        segments += [1] * (len(tokens_b)+1)             # eB\n","    return tokens, segments"],"metadata":{"id":"jXa0n_IJor-7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class BERTEncoder(nn.Module):\n","    def __init__(self, vocab_size, num_hiddens, ffn_num_hiddens, num_heads, num_blks, dropout, max_len = 1000, **kwargs):\n","        super(BERTEncoder, self).__init__(**kwargs)\n","        self.token_embedding = nn.Embedding(vocab_size, num_hiddens)     # Embedding cho từ\n","        self.segment_embedding = nn.Embedding(2, num_hiddens)            # EMbedding cho segment ID (0 hoặc 1)\n","        self.blks = nn.Sequential()\n","        for i in range(num_blks):\n","            self.blks.add_module(f\"{i}\", TransformerEncoderBlock(num_hiddens, ffn_num_hiddens, num_heads, dropout, True))\n","        self.pos_embedding = nn.Parameter(torch.rand(1, max_len, num_hiddens))    # learnable positional embedding\n","    def forward(self, tokens, segments, valid_lens):\n","        X = self.token_embedding(tokens) + self.segment_embedding(segments)       # tính embedding tổng hợp từ từ và segment\n","        X = X + self.pos_embedding[:, :X.shape[1], :]                             # thêm postional embedding theo độ dài thực tế của chuỗi\n","        for blk in self.blks:                                                     # áp dụng các encoder block\n","            X = blk(X, valid_lens)\n","        return X                                                                  # kết quả cuối cùng của encoder: [batch_size, seq_len, num_hiddens]"],"metadata":{"id":"tbkPxhtkouMr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class MaskLM(nn.Module):\n","    def __init__(self, vocab_size, num_hiddens, **kwargs):\n","        super(MaskLM, self).__init__(**kwargs)\n","        self.mlp = nn.Sequential(nn.LazyLinear(num_hiddens),\n","                                 nn.ReLU(),\n","                                 nn.LayerNorm(num_hiddens),\n","                                 nn.LazyLinear(vocab_size))\n","    def forward(self, X, pred_positions):          # X là input, pred_positions là vị trí bị mask\n","        num_pred_positions = pred_positions.shape[1]   # số lượng vị trí cần mask\n","        pred_positions = pred_positions.reshape(-1)    # chuyển về vector 1 chiều để dễ index\n","        batch_size = X.shape[0]                        # lưu lại kích thước batch\n","        batch_idx = torch.arange(0, batch_size)        # tạo tensor đại diện cho index của từng mẫu trong batch\n","        batch_idx = torch.repeat_interleave(batch_idx, num_pred_positions)    # lặp lại mỗi chỉ số num_pred_positions lần để phù hợp với chiều dài pred_positions\n","        masked_X = X[batch_idx, pred_positions]            # trích xuất embedding các token bị che tại những vị trí chỉ định\n","        masked_X = masked_X.reshape((batch_size, num_pred_positions, -1))   # reshape rồi đưa qua mlp\n","        mlm_Y_hat = self.mlp(masked_X)\n","        return mlm_Y_hat                                                    # logits chưa qua softmax"],"metadata":{"id":"sM4vz-NtovLl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class NextSentencePred(nn.Module):\n","    \"\"\"The next sentence prediction task of BERT.\"\"\"\n","    def __init__(self, **kwargs):\n","        super(NextSentencePred, self).__init__(**kwargs)\n","        self.output = nn.LazyLinear(2)\n","    def forward(self, X):\n","        # `X` shape: (batch size, `num_hiddens`)\n","        return self.output(X)\n"],"metadata":{"id":"OkFZPBn1EZND"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class BERTModel(nn.Module):\n","    \"\"\"The BERT model.\"\"\"\n","    def __init__(self, vocab_size, num_hiddens, ffn_num_hiddens, num_heads, num_blks, dropout, max_len=1000):\n","        super(BERTModel, self).__init__()\n","        self.encoder = BERTEncoder(vocab_size, num_hiddens, ffn_num_hiddens, num_heads, num_blks, dropout, max_len=max_len)\n","        self.hidden = nn.Sequential(nn.LazyLinear(num_hiddens), nn.Tanh())\n","        self.mlm = MaskLM(vocab_size, num_hiddens)\n","        self.nsp = NextSentencePred()\n","    def forward(self, tokens, segments, valid_lens=None, pred_positions=None):\n","        encoded_X = self.encoder(tokens, segments, valid_lens)\n","        if pred_positions is not None:\n","            mlm_Y_hat = self.mlm(encoded_X, pred_positions)\n","        else:\n","            mlm_Y_hat = None\n","        # The hidden layer of the MLP classifier for next sentence prediction.\n","        # 0 is the index of the '<cls>' token\n","        nsp_Y_hat = self.nsp(self.hidden(encoded_X[:, 0, :]))\n","        return encoded_X, mlm_Y_hat, nsp_Y_hat"],"metadata":{"id":"6EpjbcwWEL9T"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Dataset for Pretraining BERT"],"metadata":{"id":"O3Dg2feJUN2B"}},{"cell_type":"code","source":["def _read_wiki(data_dir):\n","    file_name = os.path.join(data_dir, 'wiki.train.tokens')\n","    with open(file_name, 'r') as f:\n","        lines = f.readlines()\n","    # Uppercase letters are converted to lowercase ones\n","    paragraphs = [line.strip().lower().split(' . ') for line in lines if len(line.split(' . ')) >= 2]\n","    random.shuffle(paragraphs)\n","    return paragraphs"],"metadata":{"id":"XGadsl5ypUp7"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Generate training examples for binary classification task"],"metadata":{"id":"GazZxa7AUX5j"}},{"cell_type":"code","source":["def _get_next_sentence(sentence, next_sentence, paragraphs):\n","    if random.random() < 0.5:\n","        is_next = True\n","    else:\n","        # `paragraphs` is a list of lists of lists\n","        next_sentence = random.choice(random.choice(paragraphs))\n","        is_next = False\n","    return sentence, next_sentence, is_next"],"metadata":{"id":"lKGnb11BpdWM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def _get_nsp_data_from_paragraph(paragraph, paragraphs, vocab, max_len):\n","    nsp_data_from_paragraph = []\n","    for i in range(len(paragraph) - 1):\n","        tokens_a, tokens_b, is_next = _get_next_sentence(paragraph[i], paragraph[i + 1], paragraphs)\n","        # Consider 1 '<cls>' token and 2 '<sep>' tokens\n","        if len(tokens_a) + len(tokens_b) + 3 > max_len:\n","            continue\n","        tokens, segments = get_tokens_and_segments(tokens_a, tokens_b)\n","        nsp_data_from_paragraph.append((tokens, segments, is_next))\n","    return nsp_data_from_paragraph"],"metadata":{"id":"0Cu_i225ph69"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Generate training examples for masked language modeling task"],"metadata":{"id":"Jio15blCUneH"}},{"cell_type":"code","source":["def _replace_mlm_tokens(tokens, candidate_pred_positions, num_mlm_preds,\n","vocab):\n","    # For the input of a masked language model, make a new copy of tokens and\n","    # replace some of them by '<mask>' or random tokens\n","    mlm_input_tokens = [token for token in tokens]\n","    pred_positions_and_labels = []\n","    # Shuffle for getting 15% random tokens for prediction in the masked\n","    # language modeling task\n","    random.shuffle(candidate_pred_positions)\n","    for mlm_pred_position in candidate_pred_positions:\n","        if len(pred_positions_and_labels) >= num_mlm_preds:\n","            break\n","        masked_token = None\n","        # 80% of the time: replace the word with the '<mask>' token\n","        if random.random() < 0.8:\n","            masked_token = '<mask>'\n","        else:\n","            # 10% of the time: keep the word unchanged\n","            if random.random() < 0.5:\n","                masked_token = tokens[mlm_pred_position]\n","            # 10% of the time: replace the word with a random word\n","            else:\n","                masked_token = random.choice(vocab.idx_to_token)\n","        mlm_input_tokens[mlm_pred_position] = masked_token\n","        pred_positions_and_labels.append((mlm_pred_position, tokens[mlm_pred_position]))\n","    return mlm_input_tokens, pred_positions_and_labels\n"],"metadata":{"id":"8JfNkP_dpvsh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def _get_mlm_data_from_tokens(tokens, vocab):\n","    candidate_pred_positions = []\n","    # `tokens` is a list of strings\n","    for i, token in enumerate(tokens):\n","        if token in ['<cls>', '<sep>']:\n","            continue\n","        candidate_pred_positions.append(i)\n","    # 15% of random tokens are predicted in the masked language modeling task\n","    num_mlm_preds = max(1, round(len(tokens) * 0.15))\n","    mlm_input_tokens, pred_positions_and_labels = _replace_mlm_tokens(tokens, candidate_pred_positions, num_mlm_preds, vocab)\n","    pred_positions_and_labels = sorted(pred_positions_and_labels, key=lambda x: x[0])\n","    pred_positions = [v[0] for v in pred_positions_and_labels]   # chỉ số vị trí trong câu\n","    mlm_pred_labels = [v[1] for v in pred_positions_and_labels]  # token gốc\n","    return vocab[mlm_input_tokens], pred_positions, vocab[mlm_pred_labels]\n"],"metadata":{"id":"mwtphdIXqDCC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Transforming Text into the Pretraining Dataset"],"metadata":{"id":"sxOEto4bUygV"}},{"cell_type":"code","source":["def _pad_bert_inputs(examples, max_len, vocab):    # chuẩn hóa đầu vào, fixed length\n","    max_num_mlm_preds = round(max_len * 0.15)      # số vị trí dự đoán mlm tối đa\n","    all_token_ids, all_segments, valid_lens, = [], [], []\n","    all_pred_positions, all_mlm_weights, all_mlm_labels = [], [], []\n","    nsp_labels = []\n","    for (token_ids, pred_positions, mlm_pred_label_ids, segments, is_next) in examples:\n","        all_token_ids.append(torch.tensor(token_ids + [vocab['<pad>']] * (max_len - len(token_ids)), dtype=torch.long)) # padding 0 cho id\n","        all_segments.append(torch.tensor(segments + [0] * (max_len - len(segments)), dtype=torch.long))                 # padding cho segment\n","        # `valid_lens` excludes count of '<pad>' tokens\n","        valid_lens.append(torch.tensor(len(token_ids), dtype=torch.float32))       # lưu lại dộ dài thực\n","        all_pred_positions.append(torch.tensor(pred_positions + [0] * (max_num_mlm_preds - len(pred_positions)), dtype=torch.long))  # padding cho vị trí dự đoán\n","        # Predictions of padded tokens will be filtered out in the loss via\n","        # multiplication of 0 weights\n","        all_mlm_weights.append(torch.tensor([1.0] * len(mlm_pred_label_ids) + [0.0] * (max_num_mlm_preds - len(pred_positions)), dtype=torch.float32))\n","        all_mlm_labels.append(torch.tensor(mlm_pred_label_ids + [0] * (max_num_mlm_preds - len(mlm_pred_label_ids)), dtype=torch.long))\n","        nsp_labels.append(torch.tensor(is_next, dtype=torch.long))\n","    return (all_token_ids, all_segments, valid_lens, all_pred_positions, all_mlm_weights, all_mlm_labels, nsp_labels)"],"metadata":{"id":"e-h7Dmm-oxFM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class _WikiTextDataset(torch.utils.data.Dataset):\n","    def __init__(self, paragraphs, max_len):\n","        # Input `paragraphs[i]` is a list of sentence strings representing a\n","        # paragraph; while output `paragraphs[i]` is a list of sentences\n","        # representing a paragraph, where each sentence is a list of tokens\n","        paragraphs = [tokenize(paragraph, token='word') for paragraph in paragraphs]\n","        sentences = [sentence for paragraph in paragraphs for sentence in paragraph]\n","        self.vocab = Vocab(sentences, min_freq=5, reserved_tokens=['<pad>', '<mask>', '<cls>', '<sep>'])\n","        # Get data for the next sentence prediction task\n","        examples = []\n","        for paragraph in paragraphs:\n","            examples.extend(_get_nsp_data_from_paragraph(paragraph, paragraphs, self.vocab, max_len))\n","        # Get data for the masked language model task\n","        examples = [(_get_mlm_data_from_tokens(tokens, self.vocab) + (segments, is_next)) for tokens, segments, is_next in examples]\n","        # Pad inputs\n","        (self.all_token_ids, self.all_segments, self.valid_lens,\n","        self.all_pred_positions, self.all_mlm_weights,\n","        self.all_mlm_labels, self.nsp_labels) = _pad_bert_inputs(examples, max_len, self.vocab)\n","    def __getitem__(self, idx):\n","        return (self.all_token_ids[idx], self.all_segments[idx],\n","                self.valid_lens[idx], self.all_pred_positions[idx],\n","                self.all_mlm_weights[idx], self.all_mlm_labels[idx],\n","                self.nsp_labels[idx])\n","    def __len__(self):\n","        return len(self.all_token_ids)\n"],"metadata":{"id":"rs-wdH6fo00m"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_dataloader_workers():\n","    \"\"\"Use 4 processes to read the data.\"\"\"\n","    return 4\n"],"metadata":{"id":"mSHoTLa9qmIn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def load_data_wiki(batch_size, max_len):\n","    \"\"\"Load the WikiText-2 dataset.\"\"\"\n","    num_workers = get_dataloader_workers()\n","    data_dir = download_extract('wikitext-2', 'wikitext-2')\n","    paragraphs = _read_wiki(data_dir)\n","    train_set = _WikiTextDataset(paragraphs, max_len)\n","    train_iter = torch.utils.data.DataLoader(train_set, batch_size, shuffle=True, num_workers=num_workers)\n","    return train_iter, train_set.vocab"],"metadata":{"id":"5-PB9j41o21Y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["batch_size, max_len = 512, 64\n","train_iter, vocab = load_data_wiki(batch_size, max_len)\n","for (tokens_X, segments_X, valid_lens_x, pred_positions_X, mlm_weights_X, mlm_Y, nsp_y) in train_iter:\n","    print(tokens_X.shape, segments_X.shape, valid_lens_x.shape, pred_positions_X.shape, mlm_weights_X.shape, mlm_Y.shape, nsp_y.shape)\n","    break\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VpTNAZKFo40p","executionInfo":{"status":"ok","timestamp":1753354884975,"user_tz":-420,"elapsed":9141,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}},"outputId":"1d4b4518-8800-4a8d-e6fa-2f3b01f732db"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([512, 64]) torch.Size([512, 64]) torch.Size([512]) torch.Size([512, 10]) torch.Size([512, 10]) torch.Size([512, 10]) torch.Size([512])\n"]}]},{"cell_type":"code","source":["len(vocab)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gpnJg0qNCFdO","executionInfo":{"status":"ok","timestamp":1753354884976,"user_tz":-420,"elapsed":53,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}},"outputId":"fda56a47-6f5c-44ab-b6d2-5555a4204d56"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["20256"]},"metadata":{},"execution_count":175}]},{"cell_type":"markdown","source":["Utilities"],"metadata":{"id":"NmNlRZBeWKaY"}},{"cell_type":"code","source":["import time\n","class Timer:\n","    def __init__(self):\n","        self.times = []\n","        self.start()                                     # bắt đầu tính thời gian từ khi khởi tạo\n","    def start(self):\n","        self.tik = time.time()                           # lưu lại thời điểm hiện tại\n","    def stop(self):\n","        self.times.append(time.time() - self.tik)        # lấy thời điểm hiện tại trừ thời điểm bắt đầu, lưu vào list times\n","        return self.times[-1]                            # trả về giá trị vừa đo được\n","    def avg(self):\n","        return sum(self.times) / len(self.times)         # tính thời gian trung bình\n","    def sum(self):\n","        return sum(self.times)                           # tính tổng thời gian\n","    def cumsum(self):\n","        return np.array(self.times).cumsum().tolist()    # chuyển thành dạng numpy rồi tính tổng tích lũy rồi trả về kết quả dưới dạng list Python"],"metadata":{"id":"X-UBTVaaF3rI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Animator:                   # Lớp ni để vẽ đồ thị động\n","    def __init__(self, xlabel=None, ylabel=None, legend=None, xlim=None, ylim=None, xscale='linear', yscale='linear', fmts=('-', 'm--', 'g-.', 'r:'), nrows=1, ncols=1, figsize=(3.5, 2.5)):\n","        if legend is None:\n","            legend = []\n","        use_svg_display()\n","        self.fig, self.axes = plt.subplots(nrows, ncols, figsize=figsize)     # tạo 1 biểu đồ bằng subplots sau đó lấy fig và axes\n","        if nrows * ncols == 1:\n","            self.axes = [self.axes, ]          # nếu chỉ có 1 biểu đồ (nrows*ncols==1) thì biến self.axes thành 1 list chứa trục\n","        self.config_axes = lambda: set_axes(self.axes[0], xlabel, ylabel, xlim, ylim, xscale, yscale, legend)   # cấu hình trục mỗi khi cập nhật đồ thị\n","        self.X, self.Y, self.fmts = None, None, fmts             #khởi tạo dữ liệu để lưu các điểm vẽ thời gian\n","    def add(self, x, y):                       # thêm điểm dữ liệu mới\n","        if not hasattr(y, \"__len__\"):                          # Chuẩn hóa x và y thành list\n","            y = [y]\n","        n = len(y)\n","        if not hasattr(x, \"__len__\"):\n","            x = [x] * n\n","        if not self.X:                                        # nếu chưa có dữ liệu thì khởi tạo\n","            self.X = [[] for _ in range(n)]\n","        if not self.Y:\n","            self.Y = [[] for _ in range(n)]\n","        for i, (a, b) in enumerate(zip(x, y)):                       #thêm dữ liệu vào danh sách\n","            if a is not None and b is not None:\n","                self.X[i].append(a)\n","                self.Y[i].append(b)\n","        self.axes[0].cla()                                           # xóa dữ liệu cũ\n","        for x, y, fmt in zip(self.X, self.Y, self.fmts):            # vẽ dữ liệu mới\n","            self.axes[0].plot(x, y, fmt)\n","        self.config_axes()                                          # cấu hình trục\n","        display.display(self.fig)                                   # hiển thị\n","        display.clear_output(wait=True)                               # xóa hình cũ để vẽ hình mới"],"metadata":{"id":"2i7ZN-NiF5LP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Accumulator:                                           # lớp này để tích lũy giá trị số học qua nhiều bước\n","    def __init__(self, n):\n","        self.data = [0.0] * n                                #tạo list n phần tử 0.0\n","    def add(self, *args):\n","        self.data = [a + float(b) for a, b in zip(self.data, args)]   # kết hợp phần tử trong self.data cộng với các phần tử trong args rồi cập nhật lại vào self.data\n","    def reset(self):\n","        self.data = [0.0] * len(self.data)            # reset về 0.0\n","    def __getitem__(self, idx):\n","        return self.data[idx]                               # lấy giá trị tại vị trí idx"],"metadata":{"id":"9-ouiQ0SF8Qb"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Pretraining BERT"],"metadata":{"id":"Ui-sgjOuC3R8"}},{"cell_type":"code","source":["net = BERTModel(len(vocab), num_hiddens=128, ffn_num_hiddens=256, num_heads=2, num_blks=2, dropout=0.2)\n","devices = try_all_gpus()\n","loss = nn.CrossEntropyLoss()"],"metadata":{"id":"AwLkRaH4C762"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def _get_batch_loss_bert(net, loss, vocab_size, tokens_X, segments_X, valid_lens_x, pred_positions_X, mlm_weights_X, mlm_Y, nsp_y):\n","    # Forward pass\n","    _, mlm_Y_hat, nsp_Y_hat = net(tokens_X, segments_X, valid_lens_x.reshape(-1), pred_positions_X)\n","    # Compute masked language model loss\n","    mlm_l = loss(mlm_Y_hat.reshape(-1, vocab_size), mlm_Y.reshape(-1)) *\\\n","    mlm_weights_X.reshape(-1, 1)\n","    mlm_l = mlm_l.sum() / (mlm_weights_X.sum() + 1e-8)\n","    # Compute next sentence prediction loss\n","    nsp_l = loss(nsp_Y_hat, nsp_y)\n","    l = mlm_l + nsp_l\n","    return mlm_l, nsp_l, l"],"metadata":{"id":"OjQOti-1EzKp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def train_bert(train_iter, net, loss, vocab_size, devices, num_steps):\n","    net(*next(iter(train_iter))[:4])\n","    net = nn.DataParallel(net, device_ids=devices).to(devices[0])\n","    trainer = torch.optim.Adam(net.parameters(), lr=0.01)\n","    step, timer = 0, Timer()\n","    animator = Animator(xlabel='step', ylabel='loss', xlim=[1, num_steps], legend=['mlm', 'nsp'])\n","    # Sum of masked language modeling losses, sum of next sentence prediction\n","    # losses, no. of sentence pairs, count\n","    metric = Accumulator(4)\n","    num_steps_reached = False\n","    while step < num_steps and not num_steps_reached:\n","        for tokens_X, segments_X, valid_lens_x, pred_positions_X,mlm_weights_X, mlm_Y, nsp_y in train_iter:\n","            tokens_X = tokens_X.to(devices[0])\n","            segments_X = segments_X.to(devices[0])\n","            valid_lens_x = valid_lens_x.to(devices[0])\n","            pred_positions_X = pred_positions_X.to(devices[0])\n","            mlm_weights_X = mlm_weights_X.to(devices[0])\n","            mlm_Y, nsp_y = mlm_Y.to(devices[0]), nsp_y.to(devices[0])\n","            trainer.zero_grad()\n","            timer.start()\n","            mlm_l, nsp_l, l = _get_batch_loss_bert(net, loss, vocab_size, tokens_X, segments_X, valid_lens_x, pred_positions_X, mlm_weights_X, mlm_Y, nsp_y)\n","            l.backward()\n","            trainer.step()\n","            metric.add(mlm_l, nsp_l, tokens_X.shape[0], 1)\n","            timer.stop()\n","            animator.add(step + 1,(metric[0] / metric[3], metric[1] / metric[3]))\n","            step += 1\n","            if step == num_steps:\n","                num_steps_reached = True\n","                break\n","    print(f'MLM loss {metric[0] / metric[3]:.3f}, 'f'NSP loss {metric[1] / metric[3]:.3f}')\n","    print(f'{metric[2] / timer.sum():.1f} sentence pairs/sec on 'f'{str(devices)}')\n"],"metadata":{"id":"k7kN8B13FDZ0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_bert(train_iter, net, loss, len(vocab), devices, 50)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":301},"id":"ao15XDphF_Nd","executionInfo":{"status":"ok","timestamp":1753354904734,"user_tz":-420,"elapsed":19645,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}},"outputId":"37e4acc5-13a4-49e5-cf5e-c3af90591114"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["MLM loss 5.761, NSP loss 0.768\n","5198.8 sentence pairs/sec on [device(type='cuda', index=0)]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 350x250 with 1 Axes>"],"image/svg+xml":"<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"249.465625pt\" height=\"183.35625pt\" viewBox=\"0 0 249.465625 183.35625\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n <metadata>\n  <rdf:RDF xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n   <cc:Work>\n    <dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\"/>\n    <dc:date>2025-07-24T11:01:45.485402</dc:date>\n    <dc:format>image/svg+xml</dc:format>\n    <dc:creator>\n     <cc:Agent>\n      <dc:title>Matplotlib v3.10.0, https://matplotlib.org/</dc:title>\n     </cc:Agent>\n    </dc:creator>\n   </cc:Work>\n  </rdf:RDF>\n </metadata>\n <defs>\n  <style type=\"text/css\">*{stroke-linejoin: round; stroke-linecap: butt}</style>\n </defs>\n <g id=\"figure_1\">\n  <g id=\"patch_1\">\n   <path d=\"M 0 183.35625 \nL 249.465625 183.35625 \nL 249.465625 0 \nL 0 0 \nz\n\" style=\"fill: #ffffff\"/>\n  </g>\n  <g id=\"axes_1\">\n   <g id=\"patch_2\">\n    <path d=\"M 40.603125 145.8 \nL 235.903125 145.8 \nL 235.903125 7.2 \nL 40.603125 7.2 \nz\n\" style=\"fill: #ffffff\"/>\n   </g>\n   <g id=\"matplotlib.axis_1\">\n    <g id=\"xtick_1\">\n     <g id=\"line2d_1\">\n      <path d=\"M 76.474554 145.8 \nL 76.474554 7.2 \n\" clip-path=\"url(#p517e3e2de3)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_2\">\n      <defs>\n       <path id=\"m783745b7bc\" d=\"M 0 0 \nL 0 3.5 \n\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </defs>\n      <g>\n       <use xlink:href=\"#m783745b7bc\" x=\"76.474554\" y=\"145.8\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_1\">\n      <!-- 10 -->\n      <g transform=\"translate(70.112054 160.398438) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-31\" d=\"M 794 531 \nL 1825 531 \nL 1825 4091 \nL 703 3866 \nL 703 4441 \nL 1819 4666 \nL 2450 4666 \nL 2450 531 \nL 3481 531 \nL 3481 0 \nL 794 0 \nL 794 531 \nz\n\" transform=\"scale(0.015625)\"/>\n        <path id=\"DejaVuSans-30\" d=\"M 2034 4250 \nQ 1547 4250 1301 3770 \nQ 1056 3291 1056 2328 \nQ 1056 1369 1301 889 \nQ 1547 409 2034 409 \nQ 2525 409 2770 889 \nQ 3016 1369 3016 2328 \nQ 3016 3291 2770 3770 \nQ 2525 4250 2034 4250 \nz\nM 2034 4750 \nQ 2819 4750 3233 4129 \nQ 3647 3509 3647 2328 \nQ 3647 1150 3233 529 \nQ 2819 -91 2034 -91 \nQ 1250 -91 836 529 \nQ 422 1150 422 2328 \nQ 422 3509 836 4129 \nQ 1250 4750 2034 4750 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-31\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(63.623047 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_2\">\n     <g id=\"line2d_3\">\n      <path d=\"M 116.331696 145.8 \nL 116.331696 7.2 \n\" clip-path=\"url(#p517e3e2de3)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_4\">\n      <g>\n       <use xlink:href=\"#m783745b7bc\" x=\"116.331696\" y=\"145.8\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_2\">\n      <!-- 20 -->\n      <g transform=\"translate(109.969196 160.398438) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-32\" d=\"M 1228 531 \nL 3431 531 \nL 3431 0 \nL 469 0 \nL 469 531 \nQ 828 903 1448 1529 \nQ 2069 2156 2228 2338 \nQ 2531 2678 2651 2914 \nQ 2772 3150 2772 3378 \nQ 2772 3750 2511 3984 \nQ 2250 4219 1831 4219 \nQ 1534 4219 1204 4116 \nQ 875 4013 500 3803 \nL 500 4441 \nQ 881 4594 1212 4672 \nQ 1544 4750 1819 4750 \nQ 2544 4750 2975 4387 \nQ 3406 4025 3406 3419 \nQ 3406 3131 3298 2873 \nQ 3191 2616 2906 2266 \nQ 2828 2175 2409 1742 \nQ 1991 1309 1228 531 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-32\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(63.623047 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_3\">\n     <g id=\"line2d_5\">\n      <path d=\"M 156.188839 145.8 \nL 156.188839 7.2 \n\" clip-path=\"url(#p517e3e2de3)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_6\">\n      <g>\n       <use xlink:href=\"#m783745b7bc\" x=\"156.188839\" y=\"145.8\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_3\">\n      <!-- 30 -->\n      <g transform=\"translate(149.826339 160.398438) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-33\" d=\"M 2597 2516 \nQ 3050 2419 3304 2112 \nQ 3559 1806 3559 1356 \nQ 3559 666 3084 287 \nQ 2609 -91 1734 -91 \nQ 1441 -91 1130 -33 \nQ 819 25 488 141 \nL 488 750 \nQ 750 597 1062 519 \nQ 1375 441 1716 441 \nQ 2309 441 2620 675 \nQ 2931 909 2931 1356 \nQ 2931 1769 2642 2001 \nQ 2353 2234 1838 2234 \nL 1294 2234 \nL 1294 2753 \nL 1863 2753 \nQ 2328 2753 2575 2939 \nQ 2822 3125 2822 3475 \nQ 2822 3834 2567 4026 \nQ 2313 4219 1838 4219 \nQ 1578 4219 1281 4162 \nQ 984 4106 628 3988 \nL 628 4550 \nQ 988 4650 1302 4700 \nQ 1616 4750 1894 4750 \nQ 2613 4750 3031 4423 \nQ 3450 4097 3450 3541 \nQ 3450 3153 3228 2886 \nQ 3006 2619 2597 2516 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-33\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(63.623047 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_4\">\n     <g id=\"line2d_7\">\n      <path d=\"M 196.045982 145.8 \nL 196.045982 7.2 \n\" clip-path=\"url(#p517e3e2de3)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_8\">\n      <g>\n       <use xlink:href=\"#m783745b7bc\" x=\"196.045982\" y=\"145.8\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_4\">\n      <!-- 40 -->\n      <g transform=\"translate(189.683482 160.398438) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-34\" d=\"M 2419 4116 \nL 825 1625 \nL 2419 1625 \nL 2419 4116 \nz\nM 2253 4666 \nL 3047 4666 \nL 3047 1625 \nL 3713 1625 \nL 3713 1100 \nL 3047 1100 \nL 3047 0 \nL 2419 0 \nL 2419 1100 \nL 313 1100 \nL 313 1709 \nL 2253 4666 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-34\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(63.623047 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_5\">\n     <g id=\"line2d_9\">\n      <path d=\"M 235.903125 145.8 \nL 235.903125 7.2 \n\" clip-path=\"url(#p517e3e2de3)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_10\">\n      <g>\n       <use xlink:href=\"#m783745b7bc\" x=\"235.903125\" y=\"145.8\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_5\">\n      <!-- 50 -->\n      <g transform=\"translate(229.540625 160.398438) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-35\" d=\"M 691 4666 \nL 3169 4666 \nL 3169 4134 \nL 1269 4134 \nL 1269 2991 \nQ 1406 3038 1543 3061 \nQ 1681 3084 1819 3084 \nQ 2600 3084 3056 2656 \nQ 3513 2228 3513 1497 \nQ 3513 744 3044 326 \nQ 2575 -91 1722 -91 \nQ 1428 -91 1123 -41 \nQ 819 9 494 109 \nL 494 744 \nQ 775 591 1075 516 \nQ 1375 441 1709 441 \nQ 2250 441 2565 725 \nQ 2881 1009 2881 1497 \nQ 2881 1984 2565 2268 \nQ 2250 2553 1709 2553 \nQ 1456 2553 1204 2497 \nQ 953 2441 691 2322 \nL 691 4666 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-35\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(63.623047 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"text_6\">\n     <!-- step -->\n     <g transform=\"translate(127.4375 174.076563) scale(0.1 -0.1)\">\n      <defs>\n       <path id=\"DejaVuSans-73\" d=\"M 2834 3397 \nL 2834 2853 \nQ 2591 2978 2328 3040 \nQ 2066 3103 1784 3103 \nQ 1356 3103 1142 2972 \nQ 928 2841 928 2578 \nQ 928 2378 1081 2264 \nQ 1234 2150 1697 2047 \nL 1894 2003 \nQ 2506 1872 2764 1633 \nQ 3022 1394 3022 966 \nQ 3022 478 2636 193 \nQ 2250 -91 1575 -91 \nQ 1294 -91 989 -36 \nQ 684 19 347 128 \nL 347 722 \nQ 666 556 975 473 \nQ 1284 391 1588 391 \nQ 1994 391 2212 530 \nQ 2431 669 2431 922 \nQ 2431 1156 2273 1281 \nQ 2116 1406 1581 1522 \nL 1381 1569 \nQ 847 1681 609 1914 \nQ 372 2147 372 2553 \nQ 372 3047 722 3315 \nQ 1072 3584 1716 3584 \nQ 2034 3584 2315 3537 \nQ 2597 3491 2834 3397 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-74\" d=\"M 1172 4494 \nL 1172 3500 \nL 2356 3500 \nL 2356 3053 \nL 1172 3053 \nL 1172 1153 \nQ 1172 725 1289 603 \nQ 1406 481 1766 481 \nL 2356 481 \nL 2356 0 \nL 1766 0 \nQ 1100 0 847 248 \nQ 594 497 594 1153 \nL 594 3053 \nL 172 3053 \nL 172 3500 \nL 594 3500 \nL 594 4494 \nL 1172 4494 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-65\" d=\"M 3597 1894 \nL 3597 1613 \nL 953 1613 \nQ 991 1019 1311 708 \nQ 1631 397 2203 397 \nQ 2534 397 2845 478 \nQ 3156 559 3463 722 \nL 3463 178 \nQ 3153 47 2828 -22 \nQ 2503 -91 2169 -91 \nQ 1331 -91 842 396 \nQ 353 884 353 1716 \nQ 353 2575 817 3079 \nQ 1281 3584 2069 3584 \nQ 2775 3584 3186 3129 \nQ 3597 2675 3597 1894 \nz\nM 3022 2063 \nQ 3016 2534 2758 2815 \nQ 2500 3097 2075 3097 \nQ 1594 3097 1305 2825 \nQ 1016 2553 972 2059 \nL 3022 2063 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-70\" d=\"M 1159 525 \nL 1159 -1331 \nL 581 -1331 \nL 581 3500 \nL 1159 3500 \nL 1159 2969 \nQ 1341 3281 1617 3432 \nQ 1894 3584 2278 3584 \nQ 2916 3584 3314 3078 \nQ 3713 2572 3713 1747 \nQ 3713 922 3314 415 \nQ 2916 -91 2278 -91 \nQ 1894 -91 1617 61 \nQ 1341 213 1159 525 \nz\nM 3116 1747 \nQ 3116 2381 2855 2742 \nQ 2594 3103 2138 3103 \nQ 1681 3103 1420 2742 \nQ 1159 2381 1159 1747 \nQ 1159 1113 1420 752 \nQ 1681 391 2138 391 \nQ 2594 391 2855 752 \nQ 3116 1113 3116 1747 \nz\n\" transform=\"scale(0.015625)\"/>\n      </defs>\n      <use xlink:href=\"#DejaVuSans-73\"/>\n      <use xlink:href=\"#DejaVuSans-74\" transform=\"translate(52.099609 0)\"/>\n      <use xlink:href=\"#DejaVuSans-65\" transform=\"translate(91.308594 0)\"/>\n      <use xlink:href=\"#DejaVuSans-70\" transform=\"translate(152.832031 0)\"/>\n     </g>\n    </g>\n   </g>\n   <g id=\"matplotlib.axis_2\">\n    <g id=\"ytick_1\">\n     <g id=\"line2d_11\">\n      <path d=\"M 40.603125 122.471342 \nL 235.903125 122.471342 \n\" clip-path=\"url(#p517e3e2de3)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_12\">\n      <defs>\n       <path id=\"mf81455bd1f\" d=\"M 0 0 \nL -3.5 0 \n\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </defs>\n      <g>\n       <use xlink:href=\"#mf81455bd1f\" x=\"40.603125\" y=\"122.471342\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_7\">\n      <!-- 2 -->\n      <g transform=\"translate(27.240625 126.270561) scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-32\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_2\">\n     <g id=\"line2d_13\">\n      <path d=\"M 40.603125 95.949182 \nL 235.903125 95.949182 \n\" clip-path=\"url(#p517e3e2de3)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_14\">\n      <g>\n       <use xlink:href=\"#mf81455bd1f\" x=\"40.603125\" y=\"95.949182\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_8\">\n      <!-- 4 -->\n      <g transform=\"translate(27.240625 99.7484) scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-34\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_3\">\n     <g id=\"line2d_15\">\n      <path d=\"M 40.603125 69.427021 \nL 235.903125 69.427021 \n\" clip-path=\"url(#p517e3e2de3)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_16\">\n      <g>\n       <use xlink:href=\"#mf81455bd1f\" x=\"40.603125\" y=\"69.427021\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_9\">\n      <!-- 6 -->\n      <g transform=\"translate(27.240625 73.22624) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-36\" d=\"M 2113 2584 \nQ 1688 2584 1439 2293 \nQ 1191 2003 1191 1497 \nQ 1191 994 1439 701 \nQ 1688 409 2113 409 \nQ 2538 409 2786 701 \nQ 3034 994 3034 1497 \nQ 3034 2003 2786 2293 \nQ 2538 2584 2113 2584 \nz\nM 3366 4563 \nL 3366 3988 \nQ 3128 4100 2886 4159 \nQ 2644 4219 2406 4219 \nQ 1781 4219 1451 3797 \nQ 1122 3375 1075 2522 \nQ 1259 2794 1537 2939 \nQ 1816 3084 2150 3084 \nQ 2853 3084 3261 2657 \nQ 3669 2231 3669 1497 \nQ 3669 778 3244 343 \nQ 2819 -91 2113 -91 \nQ 1303 -91 875 529 \nQ 447 1150 447 2328 \nQ 447 3434 972 4092 \nQ 1497 4750 2381 4750 \nQ 2619 4750 2861 4703 \nQ 3103 4656 3366 4563 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-36\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_4\">\n     <g id=\"line2d_17\">\n      <path d=\"M 40.603125 42.904861 \nL 235.903125 42.904861 \n\" clip-path=\"url(#p517e3e2de3)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_18\">\n      <g>\n       <use xlink:href=\"#mf81455bd1f\" x=\"40.603125\" y=\"42.904861\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_10\">\n      <!-- 8 -->\n      <g transform=\"translate(27.240625 46.70408) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-38\" d=\"M 2034 2216 \nQ 1584 2216 1326 1975 \nQ 1069 1734 1069 1313 \nQ 1069 891 1326 650 \nQ 1584 409 2034 409 \nQ 2484 409 2743 651 \nQ 3003 894 3003 1313 \nQ 3003 1734 2745 1975 \nQ 2488 2216 2034 2216 \nz\nM 1403 2484 \nQ 997 2584 770 2862 \nQ 544 3141 544 3541 \nQ 544 4100 942 4425 \nQ 1341 4750 2034 4750 \nQ 2731 4750 3128 4425 \nQ 3525 4100 3525 3541 \nQ 3525 3141 3298 2862 \nQ 3072 2584 2669 2484 \nQ 3125 2378 3379 2068 \nQ 3634 1759 3634 1313 \nQ 3634 634 3220 271 \nQ 2806 -91 2034 -91 \nQ 1263 -91 848 271 \nQ 434 634 434 1313 \nQ 434 1759 690 2068 \nQ 947 2378 1403 2484 \nz\nM 1172 3481 \nQ 1172 3119 1398 2916 \nQ 1625 2713 2034 2713 \nQ 2441 2713 2670 2916 \nQ 2900 3119 2900 3481 \nQ 2900 3844 2670 4047 \nQ 2441 4250 2034 4250 \nQ 1625 4250 1398 4047 \nQ 1172 3844 1172 3481 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-38\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_5\">\n     <g id=\"line2d_19\">\n      <path d=\"M 40.603125 16.382701 \nL 235.903125 16.382701 \n\" clip-path=\"url(#p517e3e2de3)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_20\">\n      <g>\n       <use xlink:href=\"#mf81455bd1f\" x=\"40.603125\" y=\"16.382701\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_11\">\n      <!-- 10 -->\n      <g transform=\"translate(20.878125 20.181919) scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-31\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(63.623047 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"text_12\">\n     <!-- loss -->\n     <g transform=\"translate(14.798437 86.157813) rotate(-90) scale(0.1 -0.1)\">\n      <defs>\n       <path id=\"DejaVuSans-6c\" d=\"M 603 4863 \nL 1178 4863 \nL 1178 0 \nL 603 0 \nL 603 4863 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-6f\" d=\"M 1959 3097 \nQ 1497 3097 1228 2736 \nQ 959 2375 959 1747 \nQ 959 1119 1226 758 \nQ 1494 397 1959 397 \nQ 2419 397 2687 759 \nQ 2956 1122 2956 1747 \nQ 2956 2369 2687 2733 \nQ 2419 3097 1959 3097 \nz\nM 1959 3584 \nQ 2709 3584 3137 3096 \nQ 3566 2609 3566 1747 \nQ 3566 888 3137 398 \nQ 2709 -91 1959 -91 \nQ 1206 -91 779 398 \nQ 353 888 353 1747 \nQ 353 2609 779 3096 \nQ 1206 3584 1959 3584 \nz\n\" transform=\"scale(0.015625)\"/>\n      </defs>\n      <use xlink:href=\"#DejaVuSans-6c\"/>\n      <use xlink:href=\"#DejaVuSans-6f\" transform=\"translate(27.783203 0)\"/>\n      <use xlink:href=\"#DejaVuSans-73\" transform=\"translate(88.964844 0)\"/>\n      <use xlink:href=\"#DejaVuSans-73\" transform=\"translate(141.064453 0)\"/>\n     </g>\n    </g>\n   </g>\n   <g id=\"line2d_21\">\n    <path d=\"M 40.603125 13.5 \nL 44.588839 25.171333 \nL 48.574554 27.892269 \nL 52.560268 35.279063 \nL 56.545982 41.516127 \nL 60.531696 46.276818 \nL 64.517411 49.776086 \nL 68.503125 52.647853 \nL 72.488839 54.708378 \nL 76.474554 56.37608 \nL 80.460268 57.398424 \nL 84.445982 58.657683 \nL 88.431696 59.606669 \nL 92.417411 60.627657 \nL 96.403125 61.382309 \nL 100.388839 61.981421 \nL 104.374554 62.565861 \nL 108.360268 63.093244 \nL 112.345982 63.672844 \nL 116.331696 64.144622 \nL 120.317411 64.703803 \nL 124.303125 65.133045 \nL 128.288839 65.569326 \nL 132.274554 65.939022 \nL 136.260268 66.26501 \nL 140.245982 66.587229 \nL 144.231696 66.846892 \nL 148.217411 67.107883 \nL 152.203125 67.45581 \nL 156.188839 67.751439 \nL 160.174554 68.038583 \nL 164.160268 68.358256 \nL 168.145982 68.672045 \nL 172.131696 68.998994 \nL 176.117411 69.260662 \nL 180.103125 69.506504 \nL 184.088839 69.734215 \nL 188.074554 70.02926 \nL 192.060268 70.289445 \nL 196.045982 70.52938 \nL 200.031696 70.754003 \nL 204.017411 71.048806 \nL 208.003125 71.317942 \nL 211.988839 71.55349 \nL 215.974554 71.73846 \nL 219.960268 71.965641 \nL 223.945982 72.168527 \nL 227.931696 72.330393 \nL 231.917411 72.475308 \nL 235.903125 72.60122 \n\" clip-path=\"url(#p517e3e2de3)\" style=\"fill: none; stroke: #1f77b4; stroke-width: 1.5; stroke-linecap: square\"/>\n   </g>\n   <g id=\"line2d_22\">\n    <path d=\"M 40.603125 139.5 \nL 44.588839 135.150035 \nL 48.574554 129.805192 \nL 52.560268 129.953887 \nL 56.545982 131.831079 \nL 60.531696 132.937997 \nL 64.517411 133.696006 \nL 68.503125 134.457016 \nL 72.488839 134.989832 \nL 76.474554 135.388806 \nL 80.460268 135.749459 \nL 84.445982 136.078795 \nL 88.431696 136.313552 \nL 92.417411 136.50916 \nL 96.403125 136.728566 \nL 100.388839 136.900802 \nL 104.374554 137.052367 \nL 108.360268 137.18903 \nL 112.345982 137.324476 \nL 116.331696 137.441501 \nL 120.317411 137.539131 \nL 124.303125 137.629004 \nL 128.288839 137.724956 \nL 132.274554 137.810445 \nL 136.260268 137.884593 \nL 140.245982 137.950333 \nL 144.231696 138.014707 \nL 148.217411 138.076162 \nL 152.203125 138.124642 \nL 156.188839 138.179569 \nL 160.174554 138.231196 \nL 164.160268 138.280287 \nL 168.145982 138.324629 \nL 172.131696 138.366182 \nL 176.117411 138.406807 \nL 180.103125 138.444733 \nL 184.088839 138.480103 \nL 188.074554 138.514592 \nL 192.060268 138.54643 \nL 196.045982 138.575801 \nL 200.031696 138.600783 \nL 204.017411 138.628974 \nL 208.003125 138.652484 \nL 211.988839 138.676977 \nL 215.974554 138.700788 \nL 219.960268 138.72251 \nL 223.945982 138.744443 \nL 227.931696 138.76542 \nL 231.917411 138.785315 \nL 235.903125 138.805449 \n\" clip-path=\"url(#p517e3e2de3)\" style=\"fill: none; stroke-dasharray: 5.55,2.4; stroke-dashoffset: 0; stroke: #bf00bf; stroke-width: 1.5\"/>\n   </g>\n   <g id=\"patch_3\">\n    <path d=\"M 40.603125 145.8 \nL 40.603125 7.2 \n\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n   </g>\n   <g id=\"patch_4\">\n    <path d=\"M 235.903125 145.8 \nL 235.903125 7.2 \n\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n   </g>\n   <g id=\"patch_5\">\n    <path d=\"M 40.603125 145.8 \nL 235.903125 145.8 \n\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n   </g>\n   <g id=\"patch_6\">\n    <path d=\"M 40.603125 7.2 \nL 235.903125 7.2 \n\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n   </g>\n   <g id=\"legend_1\">\n    <g id=\"patch_7\">\n     <path d=\"M 174.64375 44.55625 \nL 228.903125 44.55625 \nQ 230.903125 44.55625 230.903125 42.55625 \nL 230.903125 14.2 \nQ 230.903125 12.2 228.903125 12.2 \nL 174.64375 12.2 \nQ 172.64375 12.2 172.64375 14.2 \nL 172.64375 42.55625 \nQ 172.64375 44.55625 174.64375 44.55625 \nz\n\" style=\"fill: #ffffff; opacity: 0.8; stroke: #cccccc; stroke-linejoin: miter\"/>\n    </g>\n    <g id=\"line2d_23\">\n     <path d=\"M 176.64375 20.298438 \nL 186.64375 20.298438 \nL 196.64375 20.298438 \n\" style=\"fill: none; stroke: #1f77b4; stroke-width: 1.5; stroke-linecap: square\"/>\n    </g>\n    <g id=\"text_13\">\n     <!-- mlm -->\n     <g transform=\"translate(204.64375 23.798438) scale(0.1 -0.1)\">\n      <defs>\n       <path id=\"DejaVuSans-6d\" d=\"M 3328 2828 \nQ 3544 3216 3844 3400 \nQ 4144 3584 4550 3584 \nQ 5097 3584 5394 3201 \nQ 5691 2819 5691 2113 \nL 5691 0 \nL 5113 0 \nL 5113 2094 \nQ 5113 2597 4934 2840 \nQ 4756 3084 4391 3084 \nQ 3944 3084 3684 2787 \nQ 3425 2491 3425 1978 \nL 3425 0 \nL 2847 0 \nL 2847 2094 \nQ 2847 2600 2669 2842 \nQ 2491 3084 2119 3084 \nQ 1678 3084 1418 2786 \nQ 1159 2488 1159 1978 \nL 1159 0 \nL 581 0 \nL 581 3500 \nL 1159 3500 \nL 1159 2956 \nQ 1356 3278 1631 3431 \nQ 1906 3584 2284 3584 \nQ 2666 3584 2933 3390 \nQ 3200 3197 3328 2828 \nz\n\" transform=\"scale(0.015625)\"/>\n      </defs>\n      <use xlink:href=\"#DejaVuSans-6d\"/>\n      <use xlink:href=\"#DejaVuSans-6c\" transform=\"translate(97.412109 0)\"/>\n      <use xlink:href=\"#DejaVuSans-6d\" transform=\"translate(125.195312 0)\"/>\n     </g>\n    </g>\n    <g id=\"line2d_24\">\n     <path d=\"M 176.64375 34.976562 \nL 186.64375 34.976562 \nL 196.64375 34.976562 \n\" style=\"fill: none; stroke-dasharray: 5.55,2.4; stroke-dashoffset: 0; stroke: #bf00bf; stroke-width: 1.5\"/>\n    </g>\n    <g id=\"text_14\">\n     <!-- nsp -->\n     <g transform=\"translate(204.64375 38.476562) scale(0.1 -0.1)\">\n      <defs>\n       <path id=\"DejaVuSans-6e\" d=\"M 3513 2113 \nL 3513 0 \nL 2938 0 \nL 2938 2094 \nQ 2938 2591 2744 2837 \nQ 2550 3084 2163 3084 \nQ 1697 3084 1428 2787 \nQ 1159 2491 1159 1978 \nL 1159 0 \nL 581 0 \nL 581 3500 \nL 1159 3500 \nL 1159 2956 \nQ 1366 3272 1645 3428 \nQ 1925 3584 2291 3584 \nQ 2894 3584 3203 3211 \nQ 3513 2838 3513 2113 \nz\n\" transform=\"scale(0.015625)\"/>\n      </defs>\n      <use xlink:href=\"#DejaVuSans-6e\"/>\n      <use xlink:href=\"#DejaVuSans-73\" transform=\"translate(63.378906 0)\"/>\n      <use xlink:href=\"#DejaVuSans-70\" transform=\"translate(115.478516 0)\"/>\n     </g>\n    </g>\n   </g>\n  </g>\n </g>\n <defs>\n  <clipPath id=\"p517e3e2de3\">\n   <rect x=\"40.603125\" y=\"7.2\" width=\"195.3\" height=\"138.6\"/>\n  </clipPath>\n </defs>\n</svg>\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Represent Text with BERT"],"metadata":{"id":"z741oYVWWXmH"}},{"cell_type":"code","source":["def get_bert_encoding(net, tokens_a, tokens_b=None):\n","    tokens, segments = get_tokens_and_segments(tokens_a, tokens_b)\n","    token_ids = torch.tensor(vocab[tokens], device=devices[0]).unsqueeze(0)\n","    segments = torch.tensor(segments, device=devices[0]).unsqueeze(0)\n","    valid_len = torch.tensor(len(tokens), device=devices[0]).unsqueeze(0)\n","    encoded_X, _, _ = net(token_ids, segments, valid_len)\n","    return encoded_X"],"metadata":{"id":"LhS0N1T5GEjT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["tokens_a = ['a', 'crane', 'is', 'flying']\n","encoded_text = get_bert_encoding(net, tokens_a)\n","# Tokens: '<cls>', 'a', 'crane', 'is', 'flying', '<sep>'\n","encoded_text_cls = encoded_text[:, 0, :]\n","encoded_text_crane = encoded_text[:, 2, :]\n","encoded_text.shape, encoded_text_cls.shape, encoded_text_crane[0][:3]\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dpiVi5GdGMOu","executionInfo":{"status":"ok","timestamp":1753354942828,"user_tz":-420,"elapsed":287,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}},"outputId":"0693d2e7-b4a8-4c3b-ca9f-7eb979a225ec"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(torch.Size([1, 6, 128]),\n"," torch.Size([1, 128]),\n"," tensor([0.6612, 0.7047, 0.6614], device='cuda:0', grad_fn=<SliceBackward0>))"]},"metadata":{},"execution_count":186}]},{"cell_type":"code","source":["tokens_a, tokens_b = ['a', 'crane', 'driver', 'came'], ['he', 'just', 'left']\n","encoded_pair = get_bert_encoding(net, tokens_a, tokens_b)\n","# Tokens: '<cls>', 'a', 'crane', 'driver', 'came', '<sep>', 'he', 'just',\n","# 'left', '<sep>'\n","encoded_pair_cls = encoded_pair[:, 0, :]\n","encoded_pair_crane = encoded_pair[:, 2, :]\n","encoded_pair.shape, encoded_pair_cls.shape, encoded_pair_crane[0][:3]\n"],"metadata":{"id":"p6A9CXThGPXR","executionInfo":{"status":"ok","timestamp":1753354944998,"user_tz":-420,"elapsed":29,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}},"outputId":"f5eedd77-9439-4950-d190-fcfd689529ca","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(torch.Size([1, 10, 128]),\n"," torch.Size([1, 128]),\n"," tensor([-0.0383,  0.1651, -0.2465], device='cuda:0', grad_fn=<SliceBackward0>))"]},"metadata":{},"execution_count":187}]}]}