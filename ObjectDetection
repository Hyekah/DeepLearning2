{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyPbLLvgDltTED49f3DQ/Nm0"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["from matplotlib_inline import backend_inline\n","from matplotlib import pyplot as plt\n","from IPython import get_ipython\n","from IPython import display\n","import torch\n","import random\n","import re\n","import collections\n","import inspect\n","import os\n","import hashlib # Added missing import\n","import zipfile # Added missing import\n","import tarfile # Added missing import\n","import requests # Import the requests library\n","from torch import nn\n","from torch.nn import functional as F\n","import numpy as np"],"metadata":{"id":"MPIRm_Oi8ljo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"7toaPqFy33Ku"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","def use_svg_display():\n","    \"\"\"Use the svg format to display a plot in Jupyter.\n","\n","    Defined in :numref:`sec_calculus`\"\"\"\n","    backend_inline.set_matplotlib_formats('svg')\n","def set_figsize(figsize=(3.5,2.5)):\n","    use_svg_display()\n","    plt.rcParams['figure.figsize']=figsize\n","def set_axes(axes,xlabel,ylabel,xlim,ylim,xscale,yscale,legend):\n","    axes.set_xlabel(xlabel), axes.set_ylabel(ylabel)\n","    axes.set_xscale(xscale), axes.set_yscale(yscale)\n","    axes.set_xlim(xlim), axes.set_ylim(ylim)\n","    if legend:\n","        axes.legend(legend)\n","    axes.grid()\n","def plot(X,Y=None,xlabel=None, ylabel=None, legend=[],xlim=None, ylim=None, xscale='linear',yscale='linear',fmts=('-','m--','g-.','r:'),figsize=(3.5,2.5),axes=None):\n","    def has_one_axis(X):\n","        return(hasattr(X,'ndim') and X.ndim == 1 or isinstance(X,list) and not hasattr(X[0],\"__len__\"))\n","    if has_one_axis(X): X=[X]\n","    if Y is None:\n","        X,Y=[[]]*len(X),X\n","    elif has_one_axis(Y):\n","        Y=[Y]\n","    if len(X) != len(Y):\n","        X=X*len(Y)\n","    set_figsize(figsize)\n","    if axes is None:\n","        axes=plt.gca()\n","    axes.cla()\n","    for x,y,fmt in zip (X,Y,fmts):\n","        axes.plot(x,y,fmt) if len(x) else axes.plot(y,fmt)\n","    set_axes(axes,xlabel,ylabel,xlim,ylim,xscale,yscale,legend)\n","\n","class HyperParameters:\n","    \"\"\"The base class of hyperparameters.\"\"\"\n","    def save_hyperparameters(self, ignore=[]):\n","        \"\"\"Defined in :numref:`sec_oo-design`\"\"\"\n","        raise NotImplemented\n","\n","    def save_hyperparameters(self, ignore=[]):\n","        \"\"\"Save function arguments into class attributes.\n","\n","        Defined in :numref:`sec_utils`\"\"\"\n","        frame = inspect.currentframe().f_back\n","        _, _, _, local_vars = inspect.getargvalues(frame)\n","        self.hparams = {k:v for k, v in local_vars.items()\n","                        if k not in set(ignore+['self']) and not k.startswith('_')}\n","        for k, v in self.hparams.items():\n","            setattr(self, k, v)\n","\n","class ProgressBoard(HyperParameters):\n","    \"\"\"The board that plots data points in animation.\n","\n","    Defined in :numref:`sec_oo-design`\"\"\"\n","    def __init__(self, xlabel=None, ylabel=None, xlim=None,\n","                 ylim=None, xscale='linear', yscale='linear',\n","                 ls=['-', '--', '-.', ':'], colors=['C0', 'C1', 'C2', 'C3'],\n","                 fig=None, axes=None, figsize=(3.5, 2.5), display=True):\n","        self.save_hyperparameters()\n","\n","    def draw(self, x, y, label, every_n=1):\n","        raise NotImplemented\n","\n","    def draw(self, x, y, label, every_n=1):\n","        \"\"\"Defined in :numref:`sec_utils`\"\"\"\n","        Point = collections.namedtuple('Point', ['x', 'y'])\n","        if not hasattr(self, 'raw_points'):\n","            self.raw_points = collections.OrderedDict()\n","            self.data = collections.OrderedDict()\n","        if label not in self.raw_points:\n","            self.raw_points[label] = []\n","            self.data[label] = []\n","        points = self.raw_points[label]\n","        line = self.data[label]\n","        points.append(Point(x, y))\n","        if len(points) != every_n:\n","            return\n","        mean = lambda x: sum(x) / len(x)\n","        line.append(Point(mean([p.x for p in points]),\n","                          mean([p.y for p in points])))\n","        points.clear()\n","        if not self.display:\n","            return\n","        use_svg_display()\n","        if self.fig is None:\n","            self.fig = plt.figure(figsize=self.figsize)\n","        plt_lines, labels = [], []\n","        for (k, v), ls, color in zip(self.data.items(), self.ls, self.colors):\n","            plt_lines.append(plt.plot([p.x for p in v], [p.y for p in v],\n","                                          linestyle=ls, color=color)[0])\n","            labels.append(k)\n","        axes = self.axes if self.axes else plt.gca()\n","        if self.xlim: axes.set_xlim(self.xlim)\n","        if self.ylim: axes.set_ylim(self.ylim)\n","        if not self.xlabel: self.xlabel = self.x\n","        axes.set_xlabel(self.xlabel)\n","        axes.set_ylabel(self.ylabel)\n","        axes.set_xscale(self.xscale)\n","        axes.set_yscale(self.yscale)\n","        axes.legend(plt_lines, labels)\n","        display.display(self.fig)\n","        display.clear_output(wait=True)\n"],"metadata":{"id":"8GmBXFpg9P5O"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Module(nn.Module, HyperParameters):\n","    def __init__(self,plot_train_per_epoch=2, plot_valid_per_epoch=1):\n","        super().__init__()\n","        self.save_hyperparameters()\n","        self.board= ProgressBoard()\n","    def squared_loss(self,y_hat,y):\n","        return(y_hat-y.reshape(y_hat.shape))**2/2\n","    def forward(self, X):\n","        assert hasattr(self, 'net'), 'Neural Network is defined'\n","        return self.net(X)\n","    def plot(self, key, value, train):\n","        assert hasattr(self,'trainer'), 'Trainer is not inited'\n","        self.board.xlabel='epoch'\n","        if train:\n","            x= self.trainer.train_batch_idx / \\\n","                self.trainer.num_train_batches\n","            n=self.trainer.num_train_batches / \\\n","                self.plot_train_per_epoch\n","        else:\n","            x=self.trainer.epoch+1\n","            n=self.trainer.num_val_batches / \\\n","                self.plot_valid_per_epoch\n","        if isinstance(value, int):\n","            value=torch.tensor(value)\n","        self.board.draw(x,value.to('cpu').detach().numpy(), ('train_' if train else 'val_')+key, every_n=int(n))\n","\n","    def training_step(self, batch):\n","        l=self.loss(self(*batch[:-1]), batch[-1])\n","        self.plot('loss', l, train=True)\n","        return l\n","    def validation_step(self,batch):\n","        l=self.loss(self(*batch[:-1]), batch[-1])\n","        self.plot('loss', l, train=False)\n","    def configure_optimizers(self):\n","        return torch.optim.SGD(self.parameters(),lr=self.lr)\n","    def  apply_init(self, inputs, init=None):\n","        self.forward(inputs)\n","        if init is not None:\n","            self.net.apply(init)"],"metadata":{"id":"FiKOFkVk9JfV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class DataModule(HyperParameters):\n","    def __init__(self, root='./data', num_workers=4):\n","        self.save_hyperparameters()\n","    def get_dataloader(self,train):\n","        i=slice(0,self.num_train) if train else slice(self.num_train, None)\n","        return self.get_tensorloader((self.X, self.y), train, i)\n","    def train_dataloader(self):\n","        return self.get_dataloader(train=True)\n","    def val_dataloader(self):\n","        return self.get_dataloader(train=False)\n","    def get_tensorloader(self, tensors, train, indices=slice(0, None)):\n","        tensors = tuple(a[indices] for a in tensors)\n","        dataset = torch.utils.data.TensorDataset(*tensors)\n","        return torch.utils.data.DataLoader(dataset, self.batch_size, shuffle=train)\n"],"metadata":{"id":"mYec5ZP09pgm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def gpu(i=0):\n","    return torch.device(f'cuda:{i}')\n","def num_gpus():\n","    return torch.cuda.device_count()\n","class Trainer(HyperParameters):\n","    def __init__(self, max_epochs, num_gpus_arg=0, gradient_clip_val=0):\n","        self.save_hyperparameters()\n","        self.gpus=[gpu(i) for i in range(min(num_gpus_arg, num_gpus()))]\n","    def prepare_data(self,data):\n","        self.train_dataloader=data.train_dataloader()\n","        self.val_dataloader=data.val_dataloader()\n","        self.num_train_batches=len(self.train_dataloader)\n","        self.num_val_batches=(len(self.val_dataloader) if self.val_dataloader is not None else 0)\n","    def prepare_model(self,model):\n","        model.trainer=self\n","        model.board.xlim=[0,self.max_epochs]\n","        if self.gpus:\n","            model.to(self.gpus[0])\n","        self.model=model\n","    def fit(self,model,data):\n","        self.prepare_data(data)\n","        self.prepare_model(model)\n","        self.optim=model.configure_optimizers()\n","        self.epoch=0\n","        self.train_batch_idx=0\n","        self.val_batch_idx=0\n","        for self.epoch in range(self.max_epochs):\n","            self.fit_epoch()\n","    def fit_epoch(self):\n","        self.model.train()\n","        for batch in self.train_dataloader:\n","            loss = self.model.training_step(self.prepare_batch(batch))\n","            self.optim.zero_grad()\n","            with torch.no_grad():\n","                loss.backward()\n","                if self.gradient_clip_val > 0: # To be discussed later\n","                    self.clip_gradients(self.gradient_clip_val, self.model)\n","                self.optim.step()\n","            self.train_batch_idx += 1\n","        if self.val_dataloader is None:\n","            return\n","        self.model.eval()\n","        for batch in self.val_dataloader:\n","            with torch.no_grad():\n","                self.model.validation_step(self.prepare_batch(batch))\n","            self.val_batch_idx += 1\n","    def prepare_batch(self,batch):\n","        if self.gpus:\n","            batch=[a.to(self.gpus[0]) for a in batch]\n","        return batch\n","    def clip_gradients(self, grad_clip_val, model):\n","        params = [p for p in model.parameters() if p.requires_grad]\n","        norm = torch.sqrt(sum(torch.sum((p.grad ** 2)) for p in params))\n","        if norm > grad_clip_val:\n","            for param in params:\n","                param.grad[:] *= grad_clip_val / norm\n","\n"],"metadata":{"id":"phu0SHYu9z9g"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Classifier(Module):\n","    def validation_step(self, batch):\n","        Y_hat = self(*batch[:-1])\n","        self.plot('loss', self.loss(Y_hat, batch[-1]), train=False)\n","        self.plot('acc', self.accuracy(Y_hat, batch[-1]), train=False)\n","    def accuracy(Self, Y_hat, Y, averaged=True):\n","        Y_hat= Y_hat.reshape((-1, Y_hat.shape[-1]))\n","        preds=Y_hat.argmax(axis=1).type(Y.dtype)\n","        compare=(preds==Y.reshape(-1)).type(torch.float32)\n","        return compare.mean() if averaged else compare\n","    def layer_summary(self,X_shape):\n","        X=torch.randn(*X_shape)\n","        for layer in self.net:\n","            X=layer(X)\n","            print(layer.__class__.__name__, 'output shape: \\t', X.shape)"],"metadata":{"id":"LDekJ1vM-Tic"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def download(url, folder='../data', sha1_hash=None):\n","    \"\"\"Download a file to folder and return the local filepath.\"\"\"\n","    if not url.startswith('http'):\n","    # For back compatability\n","        url, sha1_hash = DATA_HUB[url]\n","    os.makedirs(folder, exist_ok=True)\n","    fname = os.path.join(folder, url.split('/')[-1])\n","    # Check if hit cache\n","    if os.path.exists(fname) and sha1_hash:\n","        sha1 = hashlib.sha1()\n","        with open(fname, 'rb') as f:\n","            while True:\n","                data = f.read(1048576)\n","                if not data:\n","                    break\n","            sha1.update(data)\n","        if sha1.hexdigest() == sha1_hash:\n","            return fname\n","    # Download\n","    print(f'Downloading {fname} from {url}...')\n","    r = requests.get(url, stream=True, verify=True)\n","    with open(fname, 'wb') as f:\n","        f.write(r.content)\n","    return fname\n","def extract(filename, folder=None):\n","    \"\"\"Extract a zip/tar file into folder.\"\"\"\n","    base_dir = os.path.dirname(filename)\n","    _, ext = os.path.splitext(filename)\n","    assert ext in ('.zip', '.tar', '.gz'), 'Only support zip/tar files.'\n","    if ext == '.zip':\n","        fp = zipfile.ZipFile(filename, 'r')\n","    else:\n","        fp = tarfile.open(filename, 'r')\n","    if folder is None:\n","        folder = base_dir\n","    fp.extractall(folder)"],"metadata":{"id":"9Jx-RXNgk9Zr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["use_svg_display()\n","def show_images(imgs, num_rows, num_cols, titles=None, scale=1.5):\n","    figsize=(num_cols*scale, num_rows*scale)\n","    _ , axes=plt.subplots(num_rows, num_cols, figsize=figsize)\n","    axes=axes.flatten()\n","    for i , (ax, img) in enumerate (zip(axes, imgs)):\n","        try:\n","            img=img.detach().numpy()\n","        except:\n","            pass\n","        ax.imshow(img)\n","        ax.axes.get_xaxis().set_visible(False)\n","        ax.axes.get_yaxis().set_visible(False)\n","        if titles:\n","            ax.set_title(titles[i])\n","    return axes\n"],"metadata":{"id":"GoDvxRAYUCjl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["DATA_HUB = dict()\n","DATA_URL = 'http://d2l-data.s3-accelerate.amazonaws.com/'"],"metadata":{"id":"K-UNZ4yUlChC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import torchvision"],"metadata":{"id":"GEA8glyRTvOc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_augs=torchvision.transforms.Compose([\n","    torchvision.transforms.RandomHorizontalFlip(),       #Flipping ảnh theo chiều ngang\n","    torchvision.transforms.ToTensor()                    #chuyển data thành dạng tensor\n","])\n","test_augs=torchvision.transforms.Compose([\n","    torchvision.transforms.ToTensor()                    # tập test không dùng data augmentation\n","])\n"],"metadata":{"id":"7jtJFWW9WvoE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def accuracy(y_hat, y):\n","    if len(y_hat.shape) > 1 and y_hat.shape[1] > 1:      #kiểm tra xem y_hat có phải ma trận dự đoán xác suất nhiều lớp\n","        y_hat = y_hat.argmax(axis=1)                     # nếu phải thì chọn lớp có xác suất lớn nhất\n","    cmp = y_hat.type(y.dtype) == y                       # ép kiểu y_hat về giống y rồi so sánh\n","    return float(cmp.type(y.dtype).sum())                # trả về tổng số lượng dự đoán đúng\n"],"metadata":{"id":"SgV1u_KQZhMq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def try_all_gpus():\n","    return [gpu(i) for i in range(num_gpus())]\n","def cpu():\n","  \"\"\"Get the CPU device.\"\"\"\n","  return torch.device('cpu')\n","def try_gpu(i=0):\n","  if num_gpus() >= i + 1:\n","    return gpu(i)\n","  return cpu()\n"],"metadata":{"id":"MFSEKUORbbeA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import time\n","class Timer:\n","    def __init__(self):\n","        self.times = []\n","        self.start()                                     # bắt đầu tính thời gian từ khi khởi tạo\n","    def start(self):\n","        self.tik = time.time()                           # lưu lại thời điểm hiện tại\n","    def stop(self):\n","        self.times.append(time.time() - self.tik)        # lấy thời điểm hiện tại trừ thời điểm bắt đầu, lưu vào list times\n","        return self.times[-1]                            # trả về giá trị vừa đo được\n","    def avg(self):\n","        return sum(self.times) / len(self.times)         # tính thời gian trung bình\n","    def sum(self):\n","        return sum(self.times)                           # tính tổng thời gian\n","    def cumsum(self):\n","        return np.array(self.times).cumsum().tolist()    # chuyển thành dạng numpy rồi tính tổng tích lũy rồi trả về kết quả dưới dạng list Python"],"metadata":{"id":"tjeish3rbz0-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Animator:                   # Lớp ni để vẽ đồ thị động\n","    def __init__(self, xlabel=None, ylabel=None, legend=None, xlim=None, ylim=None, xscale='linear', yscale='linear', fmts=('-', 'm--', 'g-.', 'r:'), nrows=1, ncols=1, figsize=(3.5, 2.5)):\n","        if legend is None:\n","            legend = []\n","        use_svg_display()\n","        self.fig, self.axes = plt.subplots(nrows, ncols, figsize=figsize)     # tạo 1 biểu đồ bằng subplots sau đó lấy fig và axes\n","        if nrows * ncols == 1:\n","            self.axes = [self.axes, ]          # nếu chỉ có 1 biểu đồ (nrows*ncols==1) thì biến self.axes thành 1 list chứa trục\n","        self.config_axes = lambda: set_axes(self.axes[0], xlabel, ylabel, xlim, ylim, xscale, yscale, legend)   # cấu hình trục mỗi khi cập nhật đồ thị\n","        self.X, self.Y, self.fmts = None, None, fmts             #khởi tạo dữ liệu để lưu các điểm vẽ thời gian\n","    def add(self, x, y):                       # thêm điểm dữ liệu mới\n","        if not hasattr(y, \"__len__\"):                          # Chuẩn hóa x và y thành list\n","            y = [y]\n","        n = len(y)\n","        if not hasattr(x, \"__len__\"):\n","            x = [x] * n\n","        if not self.X:                                        # nếu chưa có dữ liệu thì khởi tạo\n","            self.X = [[] for _ in range(n)]\n","        if not self.Y:\n","            self.Y = [[] for _ in range(n)]\n","        for i, (a, b) in enumerate(zip(x, y)):                       #thêm dữ liệu vào danh sách\n","            if a is not None and b is not None:\n","                self.X[i].append(a)\n","                self.Y[i].append(b)\n","        self.axes[0].cla()                                           # xóa dữ liệu cũ\n","        for x, y, fmt in zip(self.X, self.Y, self.fmts):            # vẽ dữ liệu mới\n","            self.axes[0].plot(x, y, fmt)\n","        self.config_axes()                                          # cấu hình trục\n","        display.display(self.fig)                                   # hiển thị\n","        display.clear_output(wait=True)                               # xóa hình cũ để vẽ hình mới"],"metadata":{"id":"1ep3W-pwc50d"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Accumulator:                                           # lớp này để tích lũy giá trị số học qua nhiều bước\n","    def __init__(self, n):\n","        self.data = [0.0] * n                                #tạo list n phần tử 0.0\n","    def add(self, *args):\n","        self.data = [a + float(b) for a, b in zip(self.data, args)]   # kết hợp phần tử trong self.data cộng với các phần tử trong args rồi cập nhật lại vào self.data\n","    def reset(self):\n","        self.data = [0.0] * len(self.data)            # reset về 0.0\n","    def __getitem__(self, idx):\n","        return self.data[idx]                               # lấy giá trị tại vị trí idx"],"metadata":{"id":"N5pj-E_GeHUe"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def evaluate_accuracy_gpu(net, data_iter, device=None):\n","    if isinstance(net, nn.Module):            # nếu net là mô hình nn.Module thì đưa về chế độ eval\n","        net.eval()\n","        if not device:\n","            device = next(iter(net.parameters())).device       # nếu chưa chỉ định device thì tự động lấy device của tham số đầu tiên trong mô hình\n","    metric=Accumulator(2)                                      # tạo accumulator để tích lũy, metric[0] để tích lũy số dự đoán đúng, metric[1] để tích lũy tổng số mẫu\n","    with torch.no_grad():                                      # tắt gradient để tăng tốc\n","        for X, y in data_iter:\n","            if isinstance(X, list):                            #chuyển dữ liệu sang GPU\n","                X = [x.to(device) for x in X]\n","            else:\n","                X = X.to(device)\n","            y = y.to(device)\n","            metric.add(accuracy(net(X), y), y.numel())         #tính tổng số dự đoán đúng và tổng số mẫu rồi add vào metric\n","    return metric[0] / metric[1]                               # trả về accuracy = số dự đoán đúng/ số mẫu"],"metadata":{"id":"5ximjpDtfvge"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Residual(nn.Module):\n","    def __init__(self, num_channels, use_1x1conv=False, strides=1):\n","        super().__init__()\n","        self.conv1=nn.LazyConv2d( num_channels, kernel_size=3, padding=1, stride=strides)\n","        self.conv2=nn.LazyConv2d(num_channels, kernel_size=3, padding=1)\n","        if use_1x1conv:\n","            self.conv3=nn.LazyConv2d(num_channels, kernel_size=1, stride=strides)\n","        else:\n","            self.conv3=None\n","        self.bn1=nn.LazyBatchNorm2d()\n","        self.bn2=nn.LazyBatchNorm2d()\n","    def forward(self, X):\n","        Y=F.relu(self.bn1(self.conv1(X)))\n","        Y=self.bn2(self.conv2(Y))\n","        if self.conv3:\n","            X=self.conv3(X)\n","        Y+=X\n","        return F.relu(Y)\n"],"metadata":{"id":"jSQ8OykphKNe"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def resnet18(num_classes, in_channels=1):\n","    def resnet_block(in_channels, out_channels, num_residuals, first_block=False):\n","        blk = []\n","        for i in range(num_residuals):\n","            if i == 0 and not first_block:\n","                blk.append(Residual(out_channels, use_1x1conv=True, strides=2))\n","            else:\n","                blk.append(Residual(out_channels, out_channels))\n","        return nn.Sequential(*blk)\n","    net=nn.Sequential(nn.Conv2d(in_channels, 64, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(64), nn.ReLU())\n","    net.add_module(\"resnet_block1\", resnet_block(64, 64, 2, first_block=True))\n","    net.add_module(\"resnet_block2\", resnet_block(64, 128, 2))\n","    net.add_module(\"resnet_block3\", resnet_block(128, 256, 2))\n","    net.add_module(\"resnet_block4\", resnet_block(256, 512, 2))\n","    net.add_module(\"global_avg_pool\", nn.AdaptiveAvgPool2d((1,1)))\n","    net.add_module(\"fc\", nn.Sequential(nn.Flatten(), nn.Linear(512, num_classes)))\n","    return net"],"metadata":{"id":"hucFZZhggmeB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def init_cnn(module):\n","    if type(module) == nn.Linear or type(module) == nn.Conv2d:\n","        nn.init.xavier_uniform_(module.weight)"],"metadata":{"id":"Cw9fDfY0hdLR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def download_extract(name, folder=None):\n","    fname = download(name)\n","    base_dir = os.path.dirname(fname)\n","    data_dir, ext = os.path.splitext(fname)\n","    if ext == '.zip':\n","        fp = zipfile.ZipFile(fname, 'r')\n","    elif ext in ('.tar', '.gz'):\n","        fp = tarfile.open(fname, 'r')\n","    else:\n","        assert False, 'Only zip/tar files can be extracted.'\n","    fp.extractall(base_dir)\n","    return os.path.join(base_dir, folder) if folder else data_dir"],"metadata":{"id":"AIRtcwYMv_Bo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def train_batch_ch13(net, X, y, loss, trainer, devices):         #huấn luyện 1 batch dữ liệu duy nhất\n","    if isinstance(X, list):                                      # chuyển X và y sang các thiết bị tương ứng\n","        X = [x.to(devices[0]) for x in X]\n","    else:\n","        X=X.to(devices[0])\n","    y=y.to(devices[0])\n","    net.train()                                                 #bật chế độ huấn luyện\n","    trainer.zero_grad()                                         #xóa gradient\n","    pred=net(X)                                                 #dự đoán đầu ra của mô hình\n","    l=loss(pred, y)                                             #tính hàm mất mát\n","    l.sum().backward()                                          # tính tổng loss và lấy gradient\n","    trainer.step()                                              #cập nhật trọng số\n","    train_loss_sum=l.sum()\n","    train_acc_sum=accuracy(pred, y)\n","    return train_loss_sum, train_acc_sum                        # trả về tổng train loss và tổng train acc\n"],"metadata":{"id":"5-WfKZXaYl9c"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def train_ch13(net, train_iter, test_iter, loss, trainer, num_epochs, devices=try_all_gpus):\n","    timer, num_batches = Timer(), len(train_iter)                         # timer để đo thời gian huấn luyện, num_batches là len của train_iter\n","    animator = Animator(xlabel='epoch', xlim=[1, num_epochs], ylim=[0,1], legend=['train loss', 'train acc', 'test acc'])  # vẽ đồ thị động\n","    net = nn.DataParallel(net, device_ids=devices).to(devices[0])                                                          # chạy mô hình trên nhiều GPU xong thì chuyển lên GPU chính đầu tiên\n","    for epoch in range(num_epochs):\n","        metric=Accumulator(4)                                       # tạo accumulator để tích lũy theo thứ tự là loss, acc, tổng số mẫu, tổng số phần tử\n","        for i, (features, labels) in enumerate(train_iter):\n","            timer.start()                                           # bắt đầu tính thời gian\n","            l, acc = train_batch_ch13(net, features, labels, loss, trainer, devices)    # lấy loss, acc của 1 batch\n","            metric.add(l, acc, labels.shape[0], labels.numel())     # tích lũy loss, acc, shape của nhãn, tổng số phần tử của nhãn\n","            timer.stop()                                            # dừng tính thời gian\n","            if (i + 1) % (num_batches // 5) == 0 or i == num_batches - 1:                                                # vẽ biểu đồ 5 lần mỗi epoch, đảm bảo batch cuối luôn được vẽ\n","                animator.add(epoch + (i + 1) / num_batches, (metric[0] / metric[2], metric[1]/ metric[3], None))\n","        test_acc = evaluate_accuracy_gpu(net, test_iter)                # tính tess accuracy\n","        animator.add(epoch+1, (None, None, test_acc))\n","        print(f'loss {metric[0] / metric[2]:.3f}, train acc {metric[1] / metric[3]:.3f}, test acc {test_acc:.3f}')\n","        print(f'{metric[2] * num_epochs / timer.sum():.1f} examples/sec on {str(devices)}')"],"metadata":{"id":"ltyM2VWCZxAN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def box_corner_to_center(boxes):\n","    x1, y1, x2, y2 = boxes[:, 0], boxes[:, 1], boxes[:, 2], boxes[:, 3]\n","    cx = (x1 + x2) / 2\n","    cy = (y1 + y2) / 2\n","    w = x2 - x1\n","    h = y2 - y1\n","    boxes=torch.stack((cx, cy, w, h), axis=-1)\n","    return boxes\n","def box_center_to_corner(boxes):\n","  cx,cy,w,h = boxes[:, 0], boxes[:, 1], boxes[:, 2], boxes[:, 3]\n","  x1 = cx - 0.5 * w\n","  y1 = cy - 0.5 * h\n","  x2 = cx + 0.5 * w\n","  y2 = cy + 0.5 * h\n","  boxes = torch.stack((x1, y1, x2, y2), axis=-1)\n","  return boxes\n"],"metadata":{"id":"ErN93tfQ5uWi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def bbox_to_rect(bbox, color):\n","  return plt.Rectangle(xy=(bbox[0], bbox[1]), width=bbox[2]-bbox[0], height=bbox[3]-bbox[1], fill=False, edgecolor=color, linewidth=2)"],"metadata":{"id":"2Waa_p327LcJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["torch.set_printoptions(2)"],"metadata":{"id":"lYlhpTWxK4e5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# tạo ra tập csacs anchor box trên mỗi vị trí của feature map dùng làm cơ sở cho việc dự đoán vật thể\n","def multibox_prior(data, sizes, ratios):\n","    in_height, in_width = data.shape[-2:]\n","    device, num_sizes, num_ratios = data.device, len(sizes), len(ratios)\n","    boxes_per_pixel = (num_sizes + num_ratios - 1)                             # số anchor boxes mỗi pixel\n","    size_tensor = torch.tensor(sizes, device=device)                            # chuyển sizes sang tensor\n","    ratio_tensor = torch.tensor(ratios, device=device)\n","    offset_h, offset_w = 0.5, 0.5                                               # đặt tâm mỗi box là trung tâm của pixel\n","    steps_h = 1.0 / in_height                                                   # bước nhảy của mỗi pixel ở trục y\n","    steps_w = 1.0 / in_width                                                    # trục x\n","    center_h = (torch.arange(in_height, device = device) + offset_h) * steps_h     # tính tâm theo chiều cao, nhân với steps_h để chuẩn hóa về (0,1)\n","    center_w = (torch.arange(in_width, device = device) + offset_w) * steps_w       # tính tâm theo chiều rộng\n","    shift_y, shift_x = torch.meshgrid(center_h, center_w, indexing='ij')            # tạo ma trận tọa độ cho từng pixel trong ảnh\n","    shift_y, shift_x = shift_y.reshape(-1), shift_x.reshape(-1)                    # chuyển ma trận tọa độ sang vector 1 chiều\n","\n","    w = torch.cat((size_tensor * torch.sqrt(ratio_tensor[0]), sizes[0] * torch.sqrt(ratio_tensor[1:]))) * in_height / in_width    # chiều cao anchor box\n","    h = torch.cat((size_tensor / torch.sqrt(ratio_tensor[0]), sizes[0] / torch.sqrt(ratio_tensor[1:])))                           # chiều rộng\n","    anchor_manipulations = torch.stack((-w, -h, w, h)).T.repeat(in_height * in_width, 1) / 2                                      # lưới dịch chuyển\n","    out_grid = torch.stack([shift_x, shift_y, shift_x, shift_y], dim = 1).repeat_interleave(boxes_per_pixel, dim = 0)             # lưới tâm\n","    output = out_grid + anchor_manipulations                                                                                      # lưới anchor box\n","    return output.unsqueeze(0)"],"metadata":{"id":"SR6hIcJsK96d"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def show_bboxes(axes, bboxes, labels = None, colors = None):\n","    def make_list(obj, default_values = None):\n","        if obj is None:\n","            obj = default_values\n","        elif not isinstance(obj, (list, tuple)):\n","            obj = [obj]\n","        return obj\n","    labels = make_list(labels)\n","    colors = make_list(colors, ['b', 'g', 'r', 'm', 'c'])\n","    for i, bbox in enumerate(bboxes):\n","        color = colors[i % len(colors)]\n","        rect = bbox_to_rect(bbox.detach().numpy(), color)\n","        axes.add_patch(rect)\n","        if labels and len(labels) > i:\n","            text_color = 'k' if color == 'w' else 'w'\n","            axes.text(rect.xy[0], rect.xy[1], labels[i], va='center', ha='center', fontsize=9, color=text_color, bbox=dict(facecolor=color, lw=0))"],"metadata":{"id":"FsIf0x4mY6Td"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def box_iou(boxes1, boxes2):\n","  box_area = lambda boxes: ((boxes[:, 2] - boxes[:, 0]) * (boxes[:, 3] - boxes[:, 1]))   # diện tích của box hình chữ nhật (x2-x1)(y2-y1)\n","  areas1 = box_area(boxes1)\n","  areas2 = box_area(boxes2)\n","  inter_upperlefts = torch.max(boxes1[:, None, :2], boxes2[:, :2])             # tọa độ góc trên trái của vùng giao là tọa độ lớn hơn trong 2 tọa độ góc trên trái của 2 box\n","  inter_lowerrights = torch.min(boxes1[:, None, 2:], boxes2[:, 2:])            # tọa độ góc phải dưới của vùng giao là tọa độ nhỏ hơn trong 2 tọa độ góc phải dưới của 2 box\n","  inter = torch.clamp(inter_lowerrights - inter_upperlefts, min=0)             # tính hiệu x2-x1 và y2-y1 của phần inter, clamp ở đây dùng để khống chế intersection = 0 vì nếu k giao thì k có x1 x2,..\n","  inter_area = inter[:, :, 0] * inter[:, :, 1]                                 # diện tích intersection\n","  union_area = areas1[:, None] + areas2 - inter_area                         # diện tích union\n","  return inter_area / union_area                                              # IOU = diện tích intersection / diện tích union"],"metadata":{"id":"CSTJkxxTdwk-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def assign_anchor_to_box(ground_truth, anchors, device, iou_threshold = 0.5):\n","    num_anchors, num_gt_boxes = anchors.shape[0], ground_truth.shape[0]                            # lấy na, nb\n","    jaccard = box_iou(anchors, ground_truth)                                                       # tạo ma trận IoU shape (na,nb)\n","    anchors_bbox_map = torch.full((num_anchors,), -1, dtype=torch.long, device = device)           # tạo mảng để lưu chỉ số ground truth được gán cho mỗi anchor, ban đầu mọi anchor đều gán là -1\n","                                                                                                   # không có hộp nào đủ điều kiện gán, torch.full(size, fill_value, dtype=..., device=...)\n","\n","    max_ious, indices = torch.max(jaccard, dim = 1)                                                # tìm giá trị lớn nhât theo hàng của ma trận\n","    anc_i = torch.nonzero(max_ious >= iou_threshold).reshape(-1)                                   # lấy chỉ số anc_i thỏa mãn điều kiện max_ious >= iou_threshold\n","    box_j = indices[max_ious >= iou_threshold]                                                      # lấy chỉ số box_j thỏa mãn điều kiện max_ious >= iou_threshold\n","    anchors_bbox_map[anc_i] = box_j                                                                 # gán chỉ số\n","    col_discard = torch.full((num_anchors,), -1)                                                    # tạo cột, hàng để đánh dấu cột, hàng discard\n","    row_discard = torch.full((num_gt_boxes,), -1)\n","    for _ in range (num_gt_boxes):\n","        max_idx = torch.argmax(jaccard)                                                    # tìm element lớn nhất, lúc này chỉ số là chỉ số của ma trận đã được flatten\n","        box_idx = (max_idx % num_gt_boxes).long()                                           # lấy chỉ số box, vd ma trận (3,4), max_idx là 7 thì chỉ số cột là 7%4=3 -> cột 3\n","        anc_idx = (max_idx / num_gt_boxes).long()                                           # lấy chỉ số anchor, -> 7/3 = 2 -> hàng 2\n","        anchors_bbox_map[anc_idx] = box_idx                                                 # gán chỉ số\n","        jaccard[:, box_idx] = col_discard                                                   # đánh dấu cột box_idx đã được gán\n","        jaccard[anc_idx, :] = row_discard\n","    return anchors_bbox_map"],"metadata":{"id":"AqQCgygr34q8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def offset_boxes(anchors, assigned_bb, eps =1e-6):\n","    c_anc = box_corner_to_center(anchors)\n","    c_assigned_bb = box_corner_to_center(assigned_bb)\n","    offset_xy = 10*(c_assigned_bb[:, :2] - c_anc[:, :2]) / c_anc[:, 2:]\n","    offset_wh = 5 * torch.log(eps + c_assigned_bb[:, 2:] / c_anc[:, 2:])\n","    offset = torch.cat((offset_xy, offset_wh), axis = 1)\n","    return offset"],"metadata":{"id":"FXn4JeDbA6w7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def multibox_target(anchors, labels):\n","  # từ danh sách các anchor boxes và các ground truth labels tạo ra 3 tensor:\n","  # bbox_offset: độ dời giữa anchor và hộp thật\n","  # bbox_mask: mặt nạ cho biết anchor nào hợp lệ (được gán)\n","  # class_labels: nhãn lớp cho mỗi anchor\n","  # input: anchor boxes (x1, y1, y1, y2) shape [1, N, 4] và labels (class, x1, y1, x2, y2) shape [batch_size, num_labels, 5]\n","    batch_size, anchors = labels.shape[0], anchors.squeeze(0)\n","    batch_offset, batch_mask, batch_class_labels = [], [], []\n","    device, num_anchors = anchors.device, anchors.shape[0]\n","    for i in range(batch_size):\n","        label = labels[i, :, :]              # lấy nhãn của ảnh thứ i\n","        anchors_bbox_map = assign_anchor_to_box(label[:, 1:], anchors, device)     #gán anchor với ground truth box\n","        bbox_mask = ((anchors_bbox_map >= 0).float().unsqueeze(-1)).repeat(1,4)    # tạo mask, anchor đc gán sẽ là [1,1,1,1] không được gán thì [0,0,0,0], xóa những dòng -1 không hợp lệ\n","        class_labels = torch.zeros(num_anchors, dtype = torch.long, device = device)  # khởi tạo chỗ lưu nhãn lớp\n","        assigned_bb = torch.zeros((num_anchors, 4), dtype = torch.float32, device = device)  # khởi tạo chỗ lưu bounding box thật tương ứng\n","        indices_true = torch.nonzero(anchors_bbox_map >= 0)       # lấy các anchor đc gán\n","        bb_idx = anchors_bbox_map[indices_true]                   # chỉ số hộp ground truth tương ứng\n","        assigned_bb[indices_true] = label[bb_idx, 1:]            # lấy tọa độ hộp và gán vào anchor tương ứng\n","        class_labels[indices_true] = label[bb_idx,0].long()+1    #  lấy nhãn lớp, chuyển về kiểu long, + 1 vì label 0 dùng cho background, dời các nhãn thật lên 1 -> gán class label cho các anchor được gán\n","        offset = offset_boxes(anchors, assigned_bb)*bbox_mask   # tính offset giữa anchor và hộp được gán, nhân với mask để loại bỏ anchor không hợp lệ\n","        batch_offset.append(offset.reshape(-1))                # lưu vào batch_offset\n","        batch_mask.append(bbox_mask.reshape(-1))\n","        batch_class_labels.append(class_labels)\n","    bbox_offset = torch.stack(batch_offset)           # gom toàn bộ kết quả thành tensor\n","    bbox_mask = torch.stack(batch_mask)\n","    class_labels = torch.stack(batch_class_labels)\n","    return (bbox_offset, bbox_mask, class_labels)"],"metadata":{"id":"NIgQ0LCFGCOi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def offset_inverse(anchors, offset_preds):\n","  # chuyển đổi từ các offset dự đoán thành tọa độ hộp giới hạn thực tế bounding boxes\n","    anc = box_corner_to_center(anchors)\n","    pred_bbox_xy = (offset_preds[:, :2] * anc[:, 2:] / 10) + anc[:, :2]  # tính tâm (x,y) của hộp dự đoán, lấy phần denta x, denta y nhân với kích thước anchor để chuyển về đơn vị tuyệt đối\n","                                                                         #chia 10 để chuẩn hóa ngược vì khi huấn luyện thường nhân 10, cộng với tâm anchor để đưa offset về vị trí thực tế\n","    pred_bbox_wh = torch.exp(offset_preds[:, 2:] / 5) * anc[:, 2:]      # tính width, height của hộp dự đoán\n","    pred_bbox = torch.cat((pred_bbox_xy, pred_bbox_wh), axis = 1)       # nối tâm và width height thành 1 tensor dạng (cx,cy,w,h)\n","    pred_bbox = box_center_to_corner(pred_bbox)                         # đưa về dạng (x1, y1, x2, y2)\n","    return pred_bbox"],"metadata":{"id":"WsbVB8OzNlrj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def nms(boxes, scores, iou_threshold):\n","    B = torch.argsort(scores, dim = -1, descending = True)\n","    keep = []\n","    while B.numel() > 0:\n","        i = B[0]\n","        keep.append(i)\n","        if B.numel() == 1: break\n","        iou = box_iou(boxes[i, :].reshape(-1, 4), boxes[B[1:], :].reshape(-1, 4))\n","        inds = torch.nonzero(iou <= iou_threshold).reshape(-1)  # lọc ra các dòng có chỉ số các hộp có IoU thấp hơn hoặc bằng ngưỡng inds=indices\n","        B = B[inds +1]\n","    return torch.tensor(keep, device = boxes.device)"],"metadata":{"id":"heQ4UZYeEct1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# xử lý đầu ra của mô hình để đưa ra các hộp dự đoán cuối cùng sau khi thực hiện NMS và lọc theo ngưỡng\n","# cls_probs: xác suất thuộc về từng lớp của mỗi anchor (batch_size, num_classes, num_anchors)\n","# offset_preds: các offset dự đoán cho các anchor (batch_size, num_anchors*4)\n","# pos_threshold: ngưỡng xác suất để xác định box là dương\n","def multibox_detection(cls_probs, offset_preds, anchors, nms_threshold=0.5, pos_threshold = 0.009999999):\n","    device, batch_size = cls_probs.device, cls_probs.shape[0]\n","    anchors = anchors.squeeze(0)\n","    num_classes, num_anchors = cls_probs.shape[1], cls_probs.shape[2]\n","    out = []\n","    for i in range(batch_size):\n","        cls_prob, offset_pred = cls_probs[i], offset_preds[i].reshape(-1, 4)\n","        conf, class_id = torch.max(cls_prob[1:], 0)          # lấy giá trị xác suất cao nhất và id tương ứng\n","        predicted_bb = offset_inverse(anchors, offset_pred)     # chuyển về tọa độ thực tế\n","        keep = nms(predicted_bb, conf, nms_threshold)           # dùng nms để lọc các box giống nhau\n","        all_idx = torch.arange(num_anchors, dtype = torch.long, device = device)   #tạo 1 tensor chứa tất cả index của các anchor\n","        combined = torch.cat((keep, all_idx))         # ghép các chỉ số box được giữ lại sau nms và tất cả chỉ số anchor (các chỉ số keep xuất hiện 2 lần, k đuwocj giữ xuất hiện 1 lần)\n","        uniques, counts = combined.unique(return_counts = True) # trả về các phần tử duy nhất trong combined và số lần xuất hiện của mỗi phần tử\n","        non_keep = uniques[counts == 1]             # non_keep là các phần tử xuất hiện 1 lần\n","        all_id_sorted = torch.cat((keep, non_keep))   # nối keep và non_keep nhưng cho phép keep ở trước\n","        class_id[non_keep] = -1                       # gán -1 cho class_id của những anchor k được giữ\n","        class_id = class_id[all_id_sorted]            # sắp xếp lại class_id theo thứ tự all_id_sorted\n","        conf, predicted_bb = conf[all_id_sorted], predicted_bb[all_id_sorted]   # sắp xếp lại conf, predicted_bb đảm bảo keep đứng trước\n","        below_min_idx = (conf < pos_threshold)            # xác định các box có độ tin cậy thấp hơn pos_threshold\n","        class_id[below_min_idx] = -1                      # gán những box có độ tin cậy thấp thành -1\n","        conf[below_min_idx] = 1 - conf[below_min_idx]     # chuyển từ độ không đáng tin cậy sang độ chắc chắn không phả là vật thể\n","        pred_info = torch.cat((class_id.unsqueeze(1), conf.unsqueeze(1), predicted_bb), dim = 1)  # ghép lại thông tin theo dạng [class_id, confidence, xmin, ymin, xmax, ymax]\n","        out.append(pred_info)        # luuw kết quả vào out\n","    return torch.stack(out)         # ghép tất cả các batch"],"metadata":{"id":"tde2pe-jYuww"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Dataset** \\\n","shape of image: (batch_size, number of channels, height, width)\n","shape of label: (batch_size, m, 5) với m là largest possible number of bounding boxed that any image has"],"metadata":{"id":"VdbgxOvZouXJ"}},{"cell_type":"code","source":["import pandas as pd"],"metadata":{"id":"AwrutavKq66Z"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["DATA_HUB['banana-detection'] = (DATA_URL + 'banana-detection.zip','5de26c8fce5ccdea9f91267273464dc968d20d72')"],"metadata":{"id":"mj-tMsy4owfO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def read_data_bananas(is_train=True):\n","    data_dir = download_extract('banana-detection')\n","    csv_fname = os.path.join(data_dir, 'bananas_train' if is_train else 'bananas_val', 'label.csv')\n","    csv_data = pd.read_csv(csv_fname)\n","    csv_data = csv_data.set_index('img_name')\n","    images, targets = [], []\n","    for img_name, target in csv_data.iterrows():\n","        images.append(torchvision.io.read_image(os.path.join(data_dir, 'bananas_train' if is_train else 'bananas_val', 'images', f'{img_name}')))\n","        targets.append(list(target))\n","    return images, torch.tensor(targets).unsqueeze(1) / 256"],"metadata":{"id":"YYqcHPvfqgj8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class BananasDataset(torch.utils.data.Dataset):\n","    def __init__(self, is_train):\n","        self.features, self.labels = read_data_bananas(is_train)\n","        print('read' + str(len(self.features)) + (f'training examples' if is_train else f'validation examples'))\n","    def __getitem__(self, idx):\n","        return (self.features[idx].float(), self.labels[idx])\n","    def __len__(self):\n","        return len(self.features)"],"metadata":{"id":"cI-WPsEvriCG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def load_data_bananas(batch_size):\n","    train_iter = torch.utils.data.DataLoader(BananasDataset(is_train=True), batch_size, shuffle=True)\n","    val_iter = torch.utils.data.DataLoader(BananasDataset(is_train=False), batch_size)\n","    return train_iter, val_iter"],"metadata":{"id":"nfiz61f3sNMV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Model"],"metadata":{"id":"IdRWgHSkVczv"}},{"cell_type":"code","source":["def cls_predictor(num_inputs, num_anchors, num_classes):\n","    return nn.Conv2d(num_inputs, num_anchors * (num_classes + 1), kernel_size=3, padding=1)"],"metadata":{"id":"MyhGVSfSVd0K"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def bbox_predictor(num_inputs, num_anchors):\n","    return nn.Conv2d(num_inputs, num_anchors * 4, kernel_size=3, padding=1)"],"metadata":{"id":"faKiXvAqWcRi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def flatten_pred(pred):\n","    return torch.flatten(pred.permute(0, 2, 3, 1), start_dim=1)\n","def concat_pred(preds):\n","    return torch.cat([flatten_pred(p) for p in preds], dim=1)"],"metadata":{"id":"72skuvoHbbMq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def down_sample_blk(in_channels, out_channels):\n","    blk = []\n","    for _ in range(2):\n","        blk.append(nn.LazyConv2d(out_channels, kernel_size=3, padding=1))\n","        blk.append(nn.BatchNorm2d(out_channels))\n","        blk.append(nn.ReLU())\n","        in_channels = out_channels\n","    blk.append(nn.MaxPool2d(2))\n","    return nn.Sequential(*blk)"],"metadata":{"id":"MxWIu_-5ehzl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def base_net():\n","    blk = []\n","    num_filters = [3, 16, 32, 64]\n","    for i in range(len(num_filters) - 1):\n","        blk.append(down_sample_blk(num_filters[i], num_filters[i+1]))\n","    return nn.Sequential(*blk)"],"metadata":{"id":"pln6YyO_fAE7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def get_blk(i):\n","    if i == 0:\n","        blk = base_net()\n","    elif i == 1:\n","        blk = down_sample_blk(64,128)\n","    elif i == 4:\n","        blk = nn.AdaptiveMaxPool2d((1,1))\n","    else:\n","        blk = down_sample_blk(128,128)\n","    return blk\n"],"metadata":{"id":"AYzE6XM0hJKB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def blk_forward(X, blk, size, ratio, cls_predictor, bbox_predictor):\n","    Y = blk(X)\n","    anchors = multibox_prior(Y, sizes=size, ratios=ratio)\n","    cls_preds = cls_predictor(Y)\n","    bbox_preds = bbox_predictor(Y)\n","    return (Y, anchors, cls_preds, bbox_preds)\n"],"metadata":{"id":"4Uwoo7tXisHP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["sizes = [[0.2, 0.272], [0.37, 0.447], [0.54, 0.619], [0.71, 0.79], [0.88, 0.96]]\n","ratios = [[1, 2, 0.5]]*5\n","num_anchors = len(sizes[0]) + len(ratios[0]) - 1"],"metadata":{"id":"8tz055rbkolz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class TinySSD(nn.Module):\n","    def __init__(self, num_classes, **kwargs):\n","        super(TinySSD, self).__init__(**kwargs)\n","        self.num_classes = num_classes\n","        idx_to_in_channels = [64, 128, 128, 128, 128]\n","        for i in range(5):\n","            setattr(self, f'blk_{i}', get_blk(i))\n","            setattr(self, f'cls_{i}', cls_predictor(idx_to_in_channels[i], num_anchors, num_classes))\n","            setattr(self, f'bbox_{i}', bbox_predictor(idx_to_in_channels[i], num_anchors))\n","    def forward(self, X):\n","        anchors, cls_preds, bbox_preds = [None] * 5, [None] * 5, [None] * 5\n","        for i in range(5):\n","            X, anchors[i], cls_preds[i], bbox_preds[i] = blk_forward(X, getattr(self, f'blk_{i}'), sizes[i], ratios[i], getattr(self, f'cls_{i}'), getattr(self, f'bbox_{i}'))\n","        anchors = torch.cat(anchors, dim =1)\n","        cls_preds = concat_pred(cls_preds)\n","        cls_preds = cls_preds.reshape(cls_preds.shape[0], -1, self.num_classes + 1)\n","        bbox_preds = concat_pred(bbox_preds)\n","        return anchors, cls_preds, bbox_preds"],"metadata":{"id":"0QqZQnGllNeC"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Training"],"metadata":{"id":"kC9x3TNSmobT"}},{"cell_type":"markdown","source":["Reading the Dataset and Initializing the Model"],"metadata":{"id":"qnI5RzBJmu89"}},{"cell_type":"code","source":["batch_size = 32\n","train_iter, _ = load_data_bananas(batch_size)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RJZk8tX5mqR3","executionInfo":{"status":"ok","timestamp":1752123994408,"user_tz":-420,"elapsed":11100,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}},"outputId":"9b8cc0dc-8425-4334-92d5-b3be6628bec7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading ../data/banana-detection.zip from http://d2l-data.s3-accelerate.amazonaws.com/banana-detection.zip...\n","read1000training examples\n","Downloading ../data/banana-detection.zip from http://d2l-data.s3-accelerate.amazonaws.com/banana-detection.zip...\n","read100validation examples\n"]}]},{"cell_type":"code","source":["device, net = try_gpu(), TinySSD(num_classes=1)\n","trainer = torch.optim.SGD(net.parameters(), lr=0.2, weight_decay=5e-4)"],"metadata":{"id":"LlH__rfRnA9v"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Defining Loss and Evaluation Functions"],"metadata":{"id":"Ize-bt0InQz5"}},{"cell_type":"code","source":["cls_loss = nn.CrossEntropyLoss(reduction='none')\n","bbox_loss = nn.L1Loss(reduction='none')\n","def calc_loss(cls_preds, cls_labels, bbox_preds, bbox_labels, bbox_masks):\n","    batch_size, num_classes = cls_preds.shape[0], cls_preds.shape[2]\n","    cls = cls_loss(cls_preds.reshape(-1, num_classes), cls_labels.reshape(-1)).reshape(batch_size, -1).mean(dim=1)\n","    bbox = bbox_loss(bbox_preds * bbox_masks, bbox_labels * bbox_masks).mean(dim=1)\n","    return cls + bbox\n"],"metadata":{"id":"mL1kpn2_nTx5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def cls_eval(cls_preds, cls_labels):\n","    return float((cls_preds.argmax(dim=-1).type(cls_labels.dtype) == cls_labels).sum())\n","def bbox_eval(bbox_preds, bbox_labels, bbox_masks):\n","    return float((torch.abs((bbox_labels - bbox_preds) * bbox_masks)).sum())\n"],"metadata":{"id":"FWhN8Huan-Ag"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Training the Model"],"metadata":{"id":"eZeOwv5RoJNv"}},{"cell_type":"code","source":["num_epochs, timer = 20, Timer()"],"metadata":{"id":"nEPAMdtnoIYc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["animator = Animator(xlabel='epoch', xlim=[1, num_epochs], legend=['class error', 'bbox mae'])\n","net = net.to(device)\n","for epoch in range(num_epochs):\n","    metric = Accumulator(4)      # tạo 1 bộ đếm tổng hợp 4 giá trị: số dự đoán đúng/ số lỗi phân lớp, số ví dụ phân lớp, tổng sai số tuyệt đối bbox, tổng số bbox\n","    net.train()                  # chuyển sang trạng thái train\n","    for features, target in train_iter:\n","        timer.start()            # đếm thời gian\n","        trainer.zero_grad()       # đặt gradient về 0\n","        X, Y = features.to(device), target.to(device)\n","        anchors, cls_preds, bbox_preds = net(X)            # forward\n","        bbox_labels, bbox_masks, cls_labels = multibox_target(anchors, Y)      #tạo target để tính loss\n","        l = calc_loss(cls_preds, cls_labels, bbox_preds, bbox_labels, bbox_masks)   # tính loss\n","        l.mean().backward()                                                       # tính gradient\n","        trainer.step()                                                            # cập nhật tham số mô hình\n","        #cộng dồn vào Accumulator: cls_eval - số dự đoán đúng/số lỗi, cls_labels.numel() - số anchor được xét, bbox_eval - tổng sai số tuyệt đối cho bbox, bbox_labels.numel() - số bbox đã ghép\n","        metric.add(cls_eval(cls_preds, cls_labels), cls_labels.numel(), bbox_eval(bbox_preds, bbox_labels, bbox_masks), bbox_labels.numel())\n","    cls_err, bbox_mae = 1 - metric[0] / metric[1], metric[2] / metric[3]         #cls_err - tỉ lệ lỗi phân lớp = 1- đúng/tổng\n","    animator.add(epoch + 1, (cls_err, bbox_mae))                                 # bbox_mae = độ sai trung bình tuyệt đối cho bbox\n","print(f'class err {cls_err:.2e}, bbox mae {bbox_mae:.2e}')\n","print(f'{len(train_iter.dataset) / timer.stop():.1f} examples/sec on {str(device)}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":302},"id":"W4dw8zitoQAI","executionInfo":{"status":"ok","timestamp":1752124118625,"user_tz":-420,"elapsed":124181,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}},"outputId":"2e100823-39da-4dad-dce3-1bd7a2737e83"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["class err 3.30e-03, bbox mae 3.28e-03\n","7764.2 examples/sec on cuda:0\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 350x250 with 1 Axes>"],"image/svg+xml":"<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"251.690625pt\" height=\"184.647312pt\" viewBox=\"0 0 251.690625 184.647312\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n <metadata>\n  <rdf:RDF xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n   <cc:Work>\n    <dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\"/>\n    <dc:date>2025-07-10T05:08:37.952567</dc:date>\n    <dc:format>image/svg+xml</dc:format>\n    <dc:creator>\n     <cc:Agent>\n      <dc:title>Matplotlib v3.10.0, https://matplotlib.org/</dc:title>\n     </cc:Agent>\n    </dc:creator>\n   </cc:Work>\n  </rdf:RDF>\n </metadata>\n <defs>\n  <style type=\"text/css\">*{stroke-linejoin: round; stroke-linecap: butt}</style>\n </defs>\n <g id=\"figure_1\">\n  <g id=\"patch_1\">\n   <path d=\"M 0 184.647312 \nL 251.690625 184.647312 \nL 251.690625 0 \nL 0 0 \nz\n\" style=\"fill: #ffffff\"/>\n  </g>\n  <g id=\"axes_1\">\n   <g id=\"patch_2\">\n    <path d=\"M 42.828125 147.091062 \nL 238.128125 147.091062 \nL 238.128125 8.491062 \nL 42.828125 8.491062 \nz\n\" style=\"fill: #ffffff\"/>\n   </g>\n   <g id=\"matplotlib.axis_1\">\n    <g id=\"xtick_1\">\n     <g id=\"line2d_1\">\n      <path d=\"M 83.943914 147.091062 \nL 83.943914 8.491062 \n\" clip-path=\"url(#p9aa408e142)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_2\">\n      <defs>\n       <path id=\"m88f3f0ded2\" d=\"M 0 0 \nL 0 3.5 \n\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </defs>\n      <g>\n       <use xlink:href=\"#m88f3f0ded2\" x=\"83.943914\" y=\"147.091062\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_1\">\n      <!-- 5 -->\n      <g transform=\"translate(80.762664 161.6895) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-35\" d=\"M 691 4666 \nL 3169 4666 \nL 3169 4134 \nL 1269 4134 \nL 1269 2991 \nQ 1406 3038 1543 3061 \nQ 1681 3084 1819 3084 \nQ 2600 3084 3056 2656 \nQ 3513 2228 3513 1497 \nQ 3513 744 3044 326 \nQ 2575 -91 1722 -91 \nQ 1428 -91 1123 -41 \nQ 819 9 494 109 \nL 494 744 \nQ 775 591 1075 516 \nQ 1375 441 1709 441 \nQ 2250 441 2565 725 \nQ 2881 1009 2881 1497 \nQ 2881 1984 2565 2268 \nQ 2250 2553 1709 2553 \nQ 1456 2553 1204 2497 \nQ 953 2441 691 2322 \nL 691 4666 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-35\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_2\">\n     <g id=\"line2d_3\">\n      <path d=\"M 135.338651 147.091062 \nL 135.338651 8.491062 \n\" clip-path=\"url(#p9aa408e142)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_4\">\n      <g>\n       <use xlink:href=\"#m88f3f0ded2\" x=\"135.338651\" y=\"147.091062\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_2\">\n      <!-- 10 -->\n      <g transform=\"translate(128.976151 161.6895) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-31\" d=\"M 794 531 \nL 1825 531 \nL 1825 4091 \nL 703 3866 \nL 703 4441 \nL 1819 4666 \nL 2450 4666 \nL 2450 531 \nL 3481 531 \nL 3481 0 \nL 794 0 \nL 794 531 \nz\n\" transform=\"scale(0.015625)\"/>\n        <path id=\"DejaVuSans-30\" d=\"M 2034 4250 \nQ 1547 4250 1301 3770 \nQ 1056 3291 1056 2328 \nQ 1056 1369 1301 889 \nQ 1547 409 2034 409 \nQ 2525 409 2770 889 \nQ 3016 1369 3016 2328 \nQ 3016 3291 2770 3770 \nQ 2525 4250 2034 4250 \nz\nM 2034 4750 \nQ 2819 4750 3233 4129 \nQ 3647 3509 3647 2328 \nQ 3647 1150 3233 529 \nQ 2819 -91 2034 -91 \nQ 1250 -91 836 529 \nQ 422 1150 422 2328 \nQ 422 3509 836 4129 \nQ 1250 4750 2034 4750 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-31\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(63.623047 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_3\">\n     <g id=\"line2d_5\">\n      <path d=\"M 186.733388 147.091062 \nL 186.733388 8.491062 \n\" clip-path=\"url(#p9aa408e142)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_6\">\n      <g>\n       <use xlink:href=\"#m88f3f0ded2\" x=\"186.733388\" y=\"147.091062\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_3\">\n      <!-- 15 -->\n      <g transform=\"translate(180.370888 161.6895) scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-31\"/>\n       <use xlink:href=\"#DejaVuSans-35\" transform=\"translate(63.623047 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_4\">\n     <g id=\"line2d_7\">\n      <path d=\"M 238.128125 147.091062 \nL 238.128125 8.491062 \n\" clip-path=\"url(#p9aa408e142)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_8\">\n      <g>\n       <use xlink:href=\"#m88f3f0ded2\" x=\"238.128125\" y=\"147.091062\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_4\">\n      <!-- 20 -->\n      <g transform=\"translate(231.765625 161.6895) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-32\" d=\"M 1228 531 \nL 3431 531 \nL 3431 0 \nL 469 0 \nL 469 531 \nQ 828 903 1448 1529 \nQ 2069 2156 2228 2338 \nQ 2531 2678 2651 2914 \nQ 2772 3150 2772 3378 \nQ 2772 3750 2511 3984 \nQ 2250 4219 1831 4219 \nQ 1534 4219 1204 4116 \nQ 875 4013 500 3803 \nL 500 4441 \nQ 881 4594 1212 4672 \nQ 1544 4750 1819 4750 \nQ 2544 4750 2975 4387 \nQ 3406 4025 3406 3419 \nQ 3406 3131 3298 2873 \nQ 3191 2616 2906 2266 \nQ 2828 2175 2409 1742 \nQ 1991 1309 1228 531 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-32\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(63.623047 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"text_5\">\n     <!-- epoch -->\n     <g transform=\"translate(125.25 175.367625) scale(0.1 -0.1)\">\n      <defs>\n       <path id=\"DejaVuSans-65\" d=\"M 3597 1894 \nL 3597 1613 \nL 953 1613 \nQ 991 1019 1311 708 \nQ 1631 397 2203 397 \nQ 2534 397 2845 478 \nQ 3156 559 3463 722 \nL 3463 178 \nQ 3153 47 2828 -22 \nQ 2503 -91 2169 -91 \nQ 1331 -91 842 396 \nQ 353 884 353 1716 \nQ 353 2575 817 3079 \nQ 1281 3584 2069 3584 \nQ 2775 3584 3186 3129 \nQ 3597 2675 3597 1894 \nz\nM 3022 2063 \nQ 3016 2534 2758 2815 \nQ 2500 3097 2075 3097 \nQ 1594 3097 1305 2825 \nQ 1016 2553 972 2059 \nL 3022 2063 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-70\" d=\"M 1159 525 \nL 1159 -1331 \nL 581 -1331 \nL 581 3500 \nL 1159 3500 \nL 1159 2969 \nQ 1341 3281 1617 3432 \nQ 1894 3584 2278 3584 \nQ 2916 3584 3314 3078 \nQ 3713 2572 3713 1747 \nQ 3713 922 3314 415 \nQ 2916 -91 2278 -91 \nQ 1894 -91 1617 61 \nQ 1341 213 1159 525 \nz\nM 3116 1747 \nQ 3116 2381 2855 2742 \nQ 2594 3103 2138 3103 \nQ 1681 3103 1420 2742 \nQ 1159 2381 1159 1747 \nQ 1159 1113 1420 752 \nQ 1681 391 2138 391 \nQ 2594 391 2855 752 \nQ 3116 1113 3116 1747 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-6f\" d=\"M 1959 3097 \nQ 1497 3097 1228 2736 \nQ 959 2375 959 1747 \nQ 959 1119 1226 758 \nQ 1494 397 1959 397 \nQ 2419 397 2687 759 \nQ 2956 1122 2956 1747 \nQ 2956 2369 2687 2733 \nQ 2419 3097 1959 3097 \nz\nM 1959 3584 \nQ 2709 3584 3137 3096 \nQ 3566 2609 3566 1747 \nQ 3566 888 3137 398 \nQ 2709 -91 1959 -91 \nQ 1206 -91 779 398 \nQ 353 888 353 1747 \nQ 353 2609 779 3096 \nQ 1206 3584 1959 3584 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-63\" d=\"M 3122 3366 \nL 3122 2828 \nQ 2878 2963 2633 3030 \nQ 2388 3097 2138 3097 \nQ 1578 3097 1268 2742 \nQ 959 2388 959 1747 \nQ 959 1106 1268 751 \nQ 1578 397 2138 397 \nQ 2388 397 2633 464 \nQ 2878 531 3122 666 \nL 3122 134 \nQ 2881 22 2623 -34 \nQ 2366 -91 2075 -91 \nQ 1284 -91 818 406 \nQ 353 903 353 1747 \nQ 353 2603 823 3093 \nQ 1294 3584 2113 3584 \nQ 2378 3584 2631 3529 \nQ 2884 3475 3122 3366 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-68\" d=\"M 3513 2113 \nL 3513 0 \nL 2938 0 \nL 2938 2094 \nQ 2938 2591 2744 2837 \nQ 2550 3084 2163 3084 \nQ 1697 3084 1428 2787 \nQ 1159 2491 1159 1978 \nL 1159 0 \nL 581 0 \nL 581 4863 \nL 1159 4863 \nL 1159 2956 \nQ 1366 3272 1645 3428 \nQ 1925 3584 2291 3584 \nQ 2894 3584 3203 3211 \nQ 3513 2838 3513 2113 \nz\n\" transform=\"scale(0.015625)\"/>\n      </defs>\n      <use xlink:href=\"#DejaVuSans-65\"/>\n      <use xlink:href=\"#DejaVuSans-70\" transform=\"translate(61.523438 0)\"/>\n      <use xlink:href=\"#DejaVuSans-6f\" transform=\"translate(125 0)\"/>\n      <use xlink:href=\"#DejaVuSans-63\" transform=\"translate(186.181641 0)\"/>\n      <use xlink:href=\"#DejaVuSans-68\" transform=\"translate(241.162109 0)\"/>\n     </g>\n    </g>\n   </g>\n   <g id=\"matplotlib.axis_2\">\n    <g id=\"ytick_1\">\n     <g id=\"line2d_9\">\n      <path d=\"M 42.828125 130.52902 \nL 238.128125 130.52902 \n\" clip-path=\"url(#p9aa408e142)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_10\">\n      <defs>\n       <path id=\"m6ac3e7de62\" d=\"M 0 0 \nL -3.5 0 \n\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </defs>\n      <g>\n       <use xlink:href=\"#m6ac3e7de62\" x=\"42.828125\" y=\"130.52902\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_6\">\n      <!-- 0.005 -->\n      <g transform=\"translate(7.2 134.328239) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-2e\" d=\"M 684 794 \nL 1344 794 \nL 1344 0 \nL 684 0 \nL 684 794 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-30\"/>\n       <use xlink:href=\"#DejaVuSans-2e\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(95.410156 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(159.033203 0)\"/>\n       <use xlink:href=\"#DejaVuSans-35\" transform=\"translate(222.65625 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_2\">\n     <g id=\"line2d_11\">\n      <path d=\"M 42.828125 100.64657 \nL 238.128125 100.64657 \n\" clip-path=\"url(#p9aa408e142)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_12\">\n      <g>\n       <use xlink:href=\"#m6ac3e7de62\" x=\"42.828125\" y=\"100.64657\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_7\">\n      <!-- 0.010 -->\n      <g transform=\"translate(7.2 104.445788) scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-30\"/>\n       <use xlink:href=\"#DejaVuSans-2e\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(95.410156 0)\"/>\n       <use xlink:href=\"#DejaVuSans-31\" transform=\"translate(159.033203 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(222.65625 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_3\">\n     <g id=\"line2d_13\">\n      <path d=\"M 42.828125 70.764119 \nL 238.128125 70.764119 \n\" clip-path=\"url(#p9aa408e142)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_14\">\n      <g>\n       <use xlink:href=\"#m6ac3e7de62\" x=\"42.828125\" y=\"70.764119\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_8\">\n      <!-- 0.015 -->\n      <g transform=\"translate(7.2 74.563338) scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-30\"/>\n       <use xlink:href=\"#DejaVuSans-2e\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(95.410156 0)\"/>\n       <use xlink:href=\"#DejaVuSans-31\" transform=\"translate(159.033203 0)\"/>\n       <use xlink:href=\"#DejaVuSans-35\" transform=\"translate(222.65625 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_4\">\n     <g id=\"line2d_15\">\n      <path d=\"M 42.828125 40.881669 \nL 238.128125 40.881669 \n\" clip-path=\"url(#p9aa408e142)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_16\">\n      <g>\n       <use xlink:href=\"#m6ac3e7de62\" x=\"42.828125\" y=\"40.881669\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_9\">\n      <!-- 0.020 -->\n      <g transform=\"translate(7.2 44.680888) scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-30\"/>\n       <use xlink:href=\"#DejaVuSans-2e\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(95.410156 0)\"/>\n       <use xlink:href=\"#DejaVuSans-32\" transform=\"translate(159.033203 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(222.65625 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_5\">\n     <g id=\"line2d_17\">\n      <path d=\"M 42.828125 10.999219 \nL 238.128125 10.999219 \n\" clip-path=\"url(#p9aa408e142)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_18\">\n      <g>\n       <use xlink:href=\"#m6ac3e7de62\" x=\"42.828125\" y=\"10.999219\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_10\">\n      <!-- 0.025 -->\n      <g transform=\"translate(7.2 14.798438) scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-30\"/>\n       <use xlink:href=\"#DejaVuSans-2e\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(95.410156 0)\"/>\n       <use xlink:href=\"#DejaVuSans-32\" transform=\"translate(159.033203 0)\"/>\n       <use xlink:href=\"#DejaVuSans-35\" transform=\"translate(222.65625 0)\"/>\n      </g>\n     </g>\n    </g>\n   </g>\n   <g id=\"line2d_19\">\n    <path d=\"M 42.828125 14.791062 \nL 53.107072 131.392998 \nL 63.38602 131.420443 \nL 73.664967 131.480823 \nL 83.943914 131.552181 \nL 94.222862 131.713559 \nL 104.501809 132.013262 \nL 114.780757 132.443604 \nL 125.059704 133.320756 \nL 135.338651 134.575556 \nL 145.617599 136.01369 \nL 155.896546 137.241044 \nL 166.175493 138.532071 \nL 176.454441 139.014011 \nL 186.733388 139.444353 \nL 197.012336 139.679285 \nL 207.291283 139.924097 \nL 217.57023 140.150247 \nL 227.849178 140.414819 \nL 238.128125 140.716718 \n\" clip-path=\"url(#p9aa408e142)\" style=\"fill: none; stroke: #1f77b4; stroke-width: 1.5; stroke-linecap: square\"/>\n   </g>\n   <g id=\"line2d_20\">\n    <path d=\"M 42.828125 128.386902 \nL 53.107072 130.182131 \nL 63.38602 130.691866 \nL 73.664967 130.982007 \nL 83.943914 131.26744 \nL 94.222862 131.560793 \nL 104.501809 131.827104 \nL 114.780757 132.176962 \nL 125.059704 132.622775 \nL 135.338651 133.251587 \nL 145.617599 134.285976 \nL 155.896546 135.579133 \nL 166.175493 136.902881 \nL 176.454441 137.86047 \nL 186.733388 138.549595 \nL 197.012336 139.090306 \nL 207.291283 139.581936 \nL 217.57023 140.047534 \nL 227.849178 140.458962 \nL 238.128125 140.791062 \n\" clip-path=\"url(#p9aa408e142)\" style=\"fill: none; stroke-dasharray: 5.55,2.4; stroke-dashoffset: 0; stroke: #bf00bf; stroke-width: 1.5\"/>\n   </g>\n   <g id=\"patch_3\">\n    <path d=\"M 42.828125 147.091062 \nL 42.828125 8.491062 \n\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n   </g>\n   <g id=\"patch_4\">\n    <path d=\"M 238.128125 147.091062 \nL 238.128125 8.491062 \n\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n   </g>\n   <g id=\"patch_5\">\n    <path d=\"M 42.828125 147.091062 \nL 238.128125 147.091062 \n\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n   </g>\n   <g id=\"patch_6\">\n    <path d=\"M 42.828125 8.491062 \nL 238.128125 8.491062 \n\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n   </g>\n   <g id=\"legend_1\">\n    <g id=\"patch_7\">\n     <path d=\"M 146.921875 45.847312 \nL 231.128125 45.847312 \nQ 233.128125 45.847312 233.128125 43.847312 \nL 233.128125 15.491062 \nQ 233.128125 13.491062 231.128125 13.491062 \nL 146.921875 13.491062 \nQ 144.921875 13.491062 144.921875 15.491062 \nL 144.921875 43.847312 \nQ 144.921875 45.847312 146.921875 45.847312 \nz\n\" style=\"fill: #ffffff; opacity: 0.8; stroke: #cccccc; stroke-linejoin: miter\"/>\n    </g>\n    <g id=\"line2d_21\">\n     <path d=\"M 148.921875 21.5895 \nL 158.921875 21.5895 \nL 168.921875 21.5895 \n\" style=\"fill: none; stroke: #1f77b4; stroke-width: 1.5; stroke-linecap: square\"/>\n    </g>\n    <g id=\"text_11\">\n     <!-- class error -->\n     <g transform=\"translate(176.921875 25.0895) scale(0.1 -0.1)\">\n      <defs>\n       <path id=\"DejaVuSans-6c\" d=\"M 603 4863 \nL 1178 4863 \nL 1178 0 \nL 603 0 \nL 603 4863 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-61\" d=\"M 2194 1759 \nQ 1497 1759 1228 1600 \nQ 959 1441 959 1056 \nQ 959 750 1161 570 \nQ 1363 391 1709 391 \nQ 2188 391 2477 730 \nQ 2766 1069 2766 1631 \nL 2766 1759 \nL 2194 1759 \nz\nM 3341 1997 \nL 3341 0 \nL 2766 0 \nL 2766 531 \nQ 2569 213 2275 61 \nQ 1981 -91 1556 -91 \nQ 1019 -91 701 211 \nQ 384 513 384 1019 \nQ 384 1609 779 1909 \nQ 1175 2209 1959 2209 \nL 2766 2209 \nL 2766 2266 \nQ 2766 2663 2505 2880 \nQ 2244 3097 1772 3097 \nQ 1472 3097 1187 3025 \nQ 903 2953 641 2809 \nL 641 3341 \nQ 956 3463 1253 3523 \nQ 1550 3584 1831 3584 \nQ 2591 3584 2966 3190 \nQ 3341 2797 3341 1997 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-73\" d=\"M 2834 3397 \nL 2834 2853 \nQ 2591 2978 2328 3040 \nQ 2066 3103 1784 3103 \nQ 1356 3103 1142 2972 \nQ 928 2841 928 2578 \nQ 928 2378 1081 2264 \nQ 1234 2150 1697 2047 \nL 1894 2003 \nQ 2506 1872 2764 1633 \nQ 3022 1394 3022 966 \nQ 3022 478 2636 193 \nQ 2250 -91 1575 -91 \nQ 1294 -91 989 -36 \nQ 684 19 347 128 \nL 347 722 \nQ 666 556 975 473 \nQ 1284 391 1588 391 \nQ 1994 391 2212 530 \nQ 2431 669 2431 922 \nQ 2431 1156 2273 1281 \nQ 2116 1406 1581 1522 \nL 1381 1569 \nQ 847 1681 609 1914 \nQ 372 2147 372 2553 \nQ 372 3047 722 3315 \nQ 1072 3584 1716 3584 \nQ 2034 3584 2315 3537 \nQ 2597 3491 2834 3397 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-20\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-72\" d=\"M 2631 2963 \nQ 2534 3019 2420 3045 \nQ 2306 3072 2169 3072 \nQ 1681 3072 1420 2755 \nQ 1159 2438 1159 1844 \nL 1159 0 \nL 581 0 \nL 581 3500 \nL 1159 3500 \nL 1159 2956 \nQ 1341 3275 1631 3429 \nQ 1922 3584 2338 3584 \nQ 2397 3584 2469 3576 \nQ 2541 3569 2628 3553 \nL 2631 2963 \nz\n\" transform=\"scale(0.015625)\"/>\n      </defs>\n      <use xlink:href=\"#DejaVuSans-63\"/>\n      <use xlink:href=\"#DejaVuSans-6c\" transform=\"translate(54.980469 0)\"/>\n      <use xlink:href=\"#DejaVuSans-61\" transform=\"translate(82.763672 0)\"/>\n      <use xlink:href=\"#DejaVuSans-73\" transform=\"translate(144.042969 0)\"/>\n      <use xlink:href=\"#DejaVuSans-73\" transform=\"translate(196.142578 0)\"/>\n      <use xlink:href=\"#DejaVuSans-20\" transform=\"translate(248.242188 0)\"/>\n      <use xlink:href=\"#DejaVuSans-65\" transform=\"translate(280.029297 0)\"/>\n      <use xlink:href=\"#DejaVuSans-72\" transform=\"translate(341.552734 0)\"/>\n      <use xlink:href=\"#DejaVuSans-72\" transform=\"translate(380.916016 0)\"/>\n      <use xlink:href=\"#DejaVuSans-6f\" transform=\"translate(419.779297 0)\"/>\n      <use xlink:href=\"#DejaVuSans-72\" transform=\"translate(480.960938 0)\"/>\n     </g>\n    </g>\n    <g id=\"line2d_22\">\n     <path d=\"M 148.921875 36.267625 \nL 158.921875 36.267625 \nL 168.921875 36.267625 \n\" style=\"fill: none; stroke-dasharray: 5.55,2.4; stroke-dashoffset: 0; stroke: #bf00bf; stroke-width: 1.5\"/>\n    </g>\n    <g id=\"text_12\">\n     <!-- bbox mae -->\n     <g transform=\"translate(176.921875 39.767625) scale(0.1 -0.1)\">\n      <defs>\n       <path id=\"DejaVuSans-62\" d=\"M 3116 1747 \nQ 3116 2381 2855 2742 \nQ 2594 3103 2138 3103 \nQ 1681 3103 1420 2742 \nQ 1159 2381 1159 1747 \nQ 1159 1113 1420 752 \nQ 1681 391 2138 391 \nQ 2594 391 2855 752 \nQ 3116 1113 3116 1747 \nz\nM 1159 2969 \nQ 1341 3281 1617 3432 \nQ 1894 3584 2278 3584 \nQ 2916 3584 3314 3078 \nQ 3713 2572 3713 1747 \nQ 3713 922 3314 415 \nQ 2916 -91 2278 -91 \nQ 1894 -91 1617 61 \nQ 1341 213 1159 525 \nL 1159 0 \nL 581 0 \nL 581 4863 \nL 1159 4863 \nL 1159 2969 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-78\" d=\"M 3513 3500 \nL 2247 1797 \nL 3578 0 \nL 2900 0 \nL 1881 1375 \nL 863 0 \nL 184 0 \nL 1544 1831 \nL 300 3500 \nL 978 3500 \nL 1906 2253 \nL 2834 3500 \nL 3513 3500 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-6d\" d=\"M 3328 2828 \nQ 3544 3216 3844 3400 \nQ 4144 3584 4550 3584 \nQ 5097 3584 5394 3201 \nQ 5691 2819 5691 2113 \nL 5691 0 \nL 5113 0 \nL 5113 2094 \nQ 5113 2597 4934 2840 \nQ 4756 3084 4391 3084 \nQ 3944 3084 3684 2787 \nQ 3425 2491 3425 1978 \nL 3425 0 \nL 2847 0 \nL 2847 2094 \nQ 2847 2600 2669 2842 \nQ 2491 3084 2119 3084 \nQ 1678 3084 1418 2786 \nQ 1159 2488 1159 1978 \nL 1159 0 \nL 581 0 \nL 581 3500 \nL 1159 3500 \nL 1159 2956 \nQ 1356 3278 1631 3431 \nQ 1906 3584 2284 3584 \nQ 2666 3584 2933 3390 \nQ 3200 3197 3328 2828 \nz\n\" transform=\"scale(0.015625)\"/>\n      </defs>\n      <use xlink:href=\"#DejaVuSans-62\"/>\n      <use xlink:href=\"#DejaVuSans-62\" transform=\"translate(63.476562 0)\"/>\n      <use xlink:href=\"#DejaVuSans-6f\" transform=\"translate(126.953125 0)\"/>\n      <use xlink:href=\"#DejaVuSans-78\" transform=\"translate(185.009766 0)\"/>\n      <use xlink:href=\"#DejaVuSans-20\" transform=\"translate(244.189453 0)\"/>\n      <use xlink:href=\"#DejaVuSans-6d\" transform=\"translate(275.976562 0)\"/>\n      <use xlink:href=\"#DejaVuSans-61\" transform=\"translate(373.388672 0)\"/>\n      <use xlink:href=\"#DejaVuSans-65\" transform=\"translate(434.667969 0)\"/>\n     </g>\n    </g>\n   </g>\n  </g>\n </g>\n <defs>\n  <clipPath id=\"p9aa408e142\">\n   <rect x=\"42.828125\" y=\"8.491062\" width=\"195.3\" height=\"138.6\"/>\n  </clipPath>\n </defs>\n</svg>\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Prediction"],"metadata":{"id":"zUuWPMC4sNT6"}},{"cell_type":"code","source":["data_dir = download_extract('banana-detection')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Y5zO61V6wFch","executionInfo":{"status":"ok","timestamp":1752124389549,"user_tz":-420,"elapsed":2783,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}},"outputId":"13299788-6ac6-49cb-ed97-9019d0752427"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading ../data/banana-detection.zip from http://d2l-data.s3-accelerate.amazonaws.com/banana-detection.zip...\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7617c4fc","executionInfo":{"status":"ok","timestamp":1752126381130,"user_tz":-420,"elapsed":1586,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}},"outputId":"6cfd1578-68fe-4e4c-ed04-27ebb65e11d7"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","metadata":{"id":"d428b89f"},"source":["img_path = '/content/drive/My Drive/chuoi.jpg'\n","# Check if the file exists before attempting to read it\n","if os.path.exists(img_path):\n","    X = torchvision.io.read_image(img_path).unsqueeze(0).float()\n","    img = X.squeeze(0).permute(1, 2, 0).long()\n","else:\n","    print(f\"Error: File not found at {img_path}\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","X= torchvision.io.read_image(img_path).unsqueeze(0).float()\n","img = X.squeeze(0).permute(1, 2, 0).long()\n"],"metadata":{"id":"V4lJa7yVxkh_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def predict(X):\n","    net.eval()           # chuyển sang chế độ eval\n","    anchors, cls_preds, bbox_preds = net(X.to(device))\n","    cls_probs = F.softmax(cls_preds, dim=2).permute(0, 2, 1)    #áp softmax lên logits theo chiều class để ra xác suất mỗi lớp cho từng anchor\n","    output = multibox_detection(cls_probs, bbox_preds, anchors)\n","    idx = [i for i, row in enumerate(output[0]) if row[0] != -1]\n","    return output[0, idx]\n","output = predict(X)"],"metadata":{"id":"5Kl3ByhisGeN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def display(img, output, threshold):\n","    set_figsize((5, 5))\n","    fig = plt.imshow(img)\n","    for row in output:\n","        score = float(row[1])\n","        if score < threshold:\n","            continue\n","        h, w = img.shape[:2]\n","        bbox = [row[2:6] * torch.tensor((w, h, w, h), device=row.device)]\n","        show_bboxes(fig.axes, bbox, '%.2f' % score, 'w')\n","display(img, output.cpu(), threshold=0.1)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"7EmOsBGIsVka","executionInfo":{"status":"ok","timestamp":1752126419036,"user_tz":-420,"elapsed":509,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}},"outputId":"38102046-95d6-4c00-a344-1ba43000a335"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x500 with 1 Axes>"],"image/svg+xml":"<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"319.4875pt\" height=\"196.461776pt\" viewBox=\"0 0 319.4875 196.461776\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n <metadata>\n  <rdf:RDF xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n   <cc:Work>\n    <dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\"/>\n    <dc:date>2025-07-10T05:46:57.978447</dc:date>\n    <dc:format>image/svg+xml</dc:format>\n    <dc:creator>\n     <cc:Agent>\n      <dc:title>Matplotlib v3.10.0, https://matplotlib.org/</dc:title>\n     </cc:Agent>\n    </dc:creator>\n   </cc:Work>\n  </rdf:RDF>\n </metadata>\n <defs>\n  <style type=\"text/css\">*{stroke-linejoin: round; stroke-linecap: butt}</style>\n </defs>\n <g id=\"figure_1\">\n  <g id=\"patch_1\">\n   <path d=\"M -0 196.461776 \nL 319.4875 196.461776 \nL 319.4875 0 \nL -0 0 \nz\n\" style=\"fill: #ffffff\"/>\n  </g>\n  <g id=\"axes_1\">\n   <g id=\"patch_2\">\n    <path d=\"M 33.2875 172.583651 \nL 312.2875 172.583651 \nL 312.2875 10.631145 \nL 33.2875 10.631145 \nz\n\" style=\"fill: #ffffff\"/>\n   </g>\n   <g clip-path=\"url(#pcb935c8524)\">\n    <image xlink:href=\"data:image/png;base64,\\" id=\"image699bcd7960\" transform=\"scale(1 -1) translate(0 -162)\" x=\"33.2875\" y=\"-10.583651\" width=\"279.36\" height=\"162\"/>\n   </g>\n   <g id=\"patch_3\">\n    <path d=\"M 104.827361 44.10527 \nL 137.90266 44.10527 \nL 137.90266 77.247226 \nL 104.827361 77.247226 \nL 104.827361 44.10527 \nz\n\" clip-path=\"url(#pcb935c8524)\" style=\"fill: none; stroke: #ffffff; stroke-width: 2; stroke-linejoin: miter\"/>\n   </g>\n   <g id=\"patch_4\">\n    <path d=\"M 95.529666 32.558897 \nL 128.061638 32.558897 \nL 128.061638 63.627403 \nL 95.529666 63.627403 \nL 95.529666 32.558897 \nz\n\" clip-path=\"url(#pcb935c8524)\" style=\"fill: none; stroke: #ffffff; stroke-width: 2; stroke-linejoin: miter\"/>\n   </g>\n   <g id=\"patch_5\">\n    <path d=\"M 95.529666 32.558897 \nL 128.061638 32.558897 \nL 128.061638 63.627403 \nL 95.529666 63.627403 \nL 95.529666 32.558897 \nz\n\" clip-path=\"url(#pcb935c8524)\" style=\"fill: none; stroke: #ffffff; stroke-width: 2; stroke-linejoin: miter\"/>\n   </g>\n   <g id=\"matplotlib.axis_1\">\n    <g id=\"xtick_1\">\n     <g id=\"line2d_1\">\n      <defs>\n       <path id=\"mff1f78e3d0\" d=\"M 0 0 \nL 0 3.5 \n\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </defs>\n      <g>\n       <use xlink:href=\"#mff1f78e3d0\" x=\"33.655574\" y=\"172.583651\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_1\">\n      <!-- 0 -->\n      <g transform=\"translate(30.474324 187.182089) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-30\" d=\"M 2034 4250 \nQ 1547 4250 1301 3770 \nQ 1056 3291 1056 2328 \nQ 1056 1369 1301 889 \nQ 1547 409 2034 409 \nQ 2525 409 2770 889 \nQ 3016 1369 3016 2328 \nQ 3016 3291 2770 3770 \nQ 2525 4250 2034 4250 \nz\nM 2034 4750 \nQ 2819 4750 3233 4129 \nQ 3647 3509 3647 2328 \nQ 3647 1150 3233 529 \nQ 2819 -91 2034 -91 \nQ 1250 -91 836 529 \nQ 422 1150 422 2328 \nQ 422 3509 836 4129 \nQ 1250 4750 2034 4750 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_2\">\n     <g id=\"line2d_2\">\n      <g>\n       <use xlink:href=\"#mff1f78e3d0\" x=\"70.462962\" y=\"172.583651\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_2\">\n      <!-- 50 -->\n      <g transform=\"translate(64.100462 187.182089) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-35\" d=\"M 691 4666 \nL 3169 4666 \nL 3169 4134 \nL 1269 4134 \nL 1269 2991 \nQ 1406 3038 1543 3061 \nQ 1681 3084 1819 3084 \nQ 2600 3084 3056 2656 \nQ 3513 2228 3513 1497 \nQ 3513 744 3044 326 \nQ 2575 -91 1722 -91 \nQ 1428 -91 1123 -41 \nQ 819 9 494 109 \nL 494 744 \nQ 775 591 1075 516 \nQ 1375 441 1709 441 \nQ 2250 441 2565 725 \nQ 2881 1009 2881 1497 \nQ 2881 1984 2565 2268 \nQ 2250 2553 1709 2553 \nQ 1456 2553 1204 2497 \nQ 953 2441 691 2322 \nL 691 4666 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-35\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(63.623047 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_3\">\n     <g id=\"line2d_3\">\n      <g>\n       <use xlink:href=\"#mff1f78e3d0\" x=\"107.27035\" y=\"172.583651\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_3\">\n      <!-- 100 -->\n      <g transform=\"translate(97.7266 187.182089) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-31\" d=\"M 794 531 \nL 1825 531 \nL 1825 4091 \nL 703 3866 \nL 703 4441 \nL 1819 4666 \nL 2450 4666 \nL 2450 531 \nL 3481 531 \nL 3481 0 \nL 794 0 \nL 794 531 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-31\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(127.246094 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_4\">\n     <g id=\"line2d_4\">\n      <g>\n       <use xlink:href=\"#mff1f78e3d0\" x=\"144.077737\" y=\"172.583651\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_4\">\n      <!-- 150 -->\n      <g transform=\"translate(134.533987 187.182089) scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-31\"/>\n       <use xlink:href=\"#DejaVuSans-35\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(127.246094 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_5\">\n     <g id=\"line2d_5\">\n      <g>\n       <use xlink:href=\"#mff1f78e3d0\" x=\"180.885125\" y=\"172.583651\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_5\">\n      <!-- 200 -->\n      <g transform=\"translate(171.341375 187.182089) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-32\" d=\"M 1228 531 \nL 3431 531 \nL 3431 0 \nL 469 0 \nL 469 531 \nQ 828 903 1448 1529 \nQ 2069 2156 2228 2338 \nQ 2531 2678 2651 2914 \nQ 2772 3150 2772 3378 \nQ 2772 3750 2511 3984 \nQ 2250 4219 1831 4219 \nQ 1534 4219 1204 4116 \nQ 875 4013 500 3803 \nL 500 4441 \nQ 881 4594 1212 4672 \nQ 1544 4750 1819 4750 \nQ 2544 4750 2975 4387 \nQ 3406 4025 3406 3419 \nQ 3406 3131 3298 2873 \nQ 3191 2616 2906 2266 \nQ 2828 2175 2409 1742 \nQ 1991 1309 1228 531 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-32\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(127.246094 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_6\">\n     <g id=\"line2d_6\">\n      <g>\n       <use xlink:href=\"#mff1f78e3d0\" x=\"217.692513\" y=\"172.583651\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_6\">\n      <!-- 250 -->\n      <g transform=\"translate(208.148763 187.182089) scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-32\"/>\n       <use xlink:href=\"#DejaVuSans-35\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(127.246094 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_7\">\n     <g id=\"line2d_7\">\n      <g>\n       <use xlink:href=\"#mff1f78e3d0\" x=\"254.499901\" y=\"172.583651\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_7\">\n      <!-- 300 -->\n      <g transform=\"translate(244.956151 187.182089) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-33\" d=\"M 2597 2516 \nQ 3050 2419 3304 2112 \nQ 3559 1806 3559 1356 \nQ 3559 666 3084 287 \nQ 2609 -91 1734 -91 \nQ 1441 -91 1130 -33 \nQ 819 25 488 141 \nL 488 750 \nQ 750 597 1062 519 \nQ 1375 441 1716 441 \nQ 2309 441 2620 675 \nQ 2931 909 2931 1356 \nQ 2931 1769 2642 2001 \nQ 2353 2234 1838 2234 \nL 1294 2234 \nL 1294 2753 \nL 1863 2753 \nQ 2328 2753 2575 2939 \nQ 2822 3125 2822 3475 \nQ 2822 3834 2567 4026 \nQ 2313 4219 1838 4219 \nQ 1578 4219 1281 4162 \nQ 984 4106 628 3988 \nL 628 4550 \nQ 988 4650 1302 4700 \nQ 1616 4750 1894 4750 \nQ 2613 4750 3031 4423 \nQ 3450 4097 3450 3541 \nQ 3450 3153 3228 2886 \nQ 3006 2619 2597 2516 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-33\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(127.246094 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_8\">\n     <g id=\"line2d_8\">\n      <g>\n       <use xlink:href=\"#mff1f78e3d0\" x=\"291.307289\" y=\"172.583651\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_8\">\n      <!-- 350 -->\n      <g transform=\"translate(281.763539 187.182089) scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-33\"/>\n       <use xlink:href=\"#DejaVuSans-35\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(127.246094 0)\"/>\n      </g>\n     </g>\n    </g>\n   </g>\n   <g id=\"matplotlib.axis_2\">\n    <g id=\"ytick_1\">\n     <g id=\"line2d_9\">\n      <defs>\n       <path id=\"m8c43a4d639\" d=\"M 0 0 \nL -3.5 0 \n\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </defs>\n      <g>\n       <use xlink:href=\"#m8c43a4d639\" x=\"33.2875\" y=\"10.999219\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_9\">\n      <!-- 0 -->\n      <g transform=\"translate(19.925 14.798438) scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_2\">\n     <g id=\"line2d_10\">\n      <g>\n       <use xlink:href=\"#m8c43a4d639\" x=\"33.2875\" y=\"47.806607\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_10\">\n      <!-- 50 -->\n      <g transform=\"translate(13.5625 51.605825) scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-35\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(63.623047 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_3\">\n     <g id=\"line2d_11\">\n      <g>\n       <use xlink:href=\"#m8c43a4d639\" x=\"33.2875\" y=\"84.613994\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_11\">\n      <!-- 100 -->\n      <g transform=\"translate(7.2 88.413213) scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-31\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(127.246094 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_4\">\n     <g id=\"line2d_12\">\n      <g>\n       <use xlink:href=\"#m8c43a4d639\" x=\"33.2875\" y=\"121.421382\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_12\">\n      <!-- 150 -->\n      <g transform=\"translate(7.2 125.220601) scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-31\"/>\n       <use xlink:href=\"#DejaVuSans-35\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(127.246094 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_5\">\n     <g id=\"line2d_13\">\n      <g>\n       <use xlink:href=\"#m8c43a4d639\" x=\"33.2875\" y=\"158.22877\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_13\">\n      <!-- 200 -->\n      <g transform=\"translate(7.2 162.027989) scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-32\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(127.246094 0)\"/>\n      </g>\n     </g>\n    </g>\n   </g>\n   <g id=\"patch_6\">\n    <path d=\"M 33.2875 172.583651 \nL 33.2875 10.631145 \n\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n   </g>\n   <g id=\"patch_7\">\n    <path d=\"M 312.2875 172.583651 \nL 312.2875 10.631145 \n\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n   </g>\n   <g id=\"patch_8\">\n    <path d=\"M 33.2875 172.583651 \nL 312.2875 172.583651 \n\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n   </g>\n   <g id=\"patch_9\">\n    <path d=\"M 33.2875 10.631145 \nL 312.2875 10.631145 \n\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n   </g>\n   <g id=\"text_14\">\n    <g id=\"patch_10\">\n     <path d=\"M 90.84783 52.420426 \nL 118.806893 52.420426 \nL 118.806893 35.790114 \nL 90.84783 35.790114 \nz\n\" style=\"fill: #ffffff\"/>\n    </g>\n    <!-- 0.11 -->\n    <g transform=\"translate(94.80783 46.588707) scale(0.09 -0.09)\">\n     <defs>\n      <path id=\"DejaVuSans-2e\" d=\"M 684 794 \nL 1344 794 \nL 1344 0 \nL 684 0 \nL 684 794 \nz\n\" transform=\"scale(0.015625)\"/>\n     </defs>\n     <use xlink:href=\"#DejaVuSans-30\"/>\n     <use xlink:href=\"#DejaVuSans-2e\" transform=\"translate(63.623047 0)\"/>\n     <use xlink:href=\"#DejaVuSans-31\" transform=\"translate(95.410156 0)\"/>\n     <use xlink:href=\"#DejaVuSans-31\" transform=\"translate(159.033203 0)\"/>\n    </g>\n   </g>\n   <g id=\"text_15\">\n    <g id=\"patch_11\">\n     <path d=\"M 81.550134 40.874053 \nL 109.509197 40.874053 \nL 109.509197 24.24374 \nL 81.550134 24.24374 \nz\n\" style=\"fill: #ffffff\"/>\n    </g>\n    <!-- 0.10 -->\n    <g transform=\"translate(85.510134 35.042334) scale(0.09 -0.09)\">\n     <use xlink:href=\"#DejaVuSans-30\"/>\n     <use xlink:href=\"#DejaVuSans-2e\" transform=\"translate(63.623047 0)\"/>\n     <use xlink:href=\"#DejaVuSans-31\" transform=\"translate(95.410156 0)\"/>\n     <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(159.033203 0)\"/>\n    </g>\n   </g>\n   <g id=\"text_16\">\n    <g id=\"patch_12\">\n     <path d=\"M 81.550134 40.874053 \nL 109.509197 40.874053 \nL 109.509197 24.24374 \nL 81.550134 24.24374 \nz\n\" style=\"fill: #ffffff\"/>\n    </g>\n    <!-- 0.10 -->\n    <g transform=\"translate(85.510134 35.042334) scale(0.09 -0.09)\">\n     <use xlink:href=\"#DejaVuSans-30\"/>\n     <use xlink:href=\"#DejaVuSans-2e\" transform=\"translate(63.623047 0)\"/>\n     <use xlink:href=\"#DejaVuSans-31\" transform=\"translate(95.410156 0)\"/>\n     <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(159.033203 0)\"/>\n    </g>\n   </g>\n  </g>\n </g>\n <defs>\n  <clipPath id=\"pcb935c8524\">\n   <rect x=\"33.2875\" y=\"10.631145\" width=\"279\" height=\"161.952507\"/>\n  </clipPath>\n </defs>\n</svg>\n"},"metadata":{}}]}]}