{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyPHd4JKBXg578PsgYovTruP"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["from matplotlib_inline import backend_inline\n","from matplotlib import pyplot as plt\n","from IPython import get_ipython\n","from IPython import display\n","import torch\n","import random\n","import re\n","import collections\n","import inspect\n","import os\n","import hashlib # Added missing import\n","import zipfile # Added missing import\n","import tarfile # Added missing import\n","import requests # Import the requests library\n","from torch import nn\n","from torch.nn import functional as F\n","import numpy as np"],"metadata":{"id":"MPIRm_Oi8ljo","executionInfo":{"status":"ok","timestamp":1753063766894,"user_tz":-420,"elapsed":5882,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"7toaPqFy33Ku","executionInfo":{"status":"ok","timestamp":1753063766899,"user_tz":-420,"elapsed":50,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","source":["\n","def use_svg_display():\n","    \"\"\"Use the svg format to display a plot in Jupyter.\n","\n","    Defined in :numref:`sec_calculus`\"\"\"\n","    backend_inline.set_matplotlib_formats('svg')\n","def set_figsize(figsize=(3.5,2.5)):\n","    use_svg_display()\n","    plt.rcParams['figure.figsize']=figsize\n","def set_axes(axes,xlabel,ylabel,xlim,ylim,xscale,yscale,legend):\n","    axes.set_xlabel(xlabel), axes.set_ylabel(ylabel)\n","    axes.set_xscale(xscale), axes.set_yscale(yscale)\n","    axes.set_xlim(xlim), axes.set_ylim(ylim)\n","    if legend:\n","        axes.legend(legend)\n","    axes.grid()\n","def plot(X,Y=None,xlabel=None, ylabel=None, legend=[],xlim=None, ylim=None, xscale='linear',yscale='linear',fmts=('-','m--','g-.','r:'),figsize=(3.5,2.5),axes=None):\n","    def has_one_axis(X):\n","        return(hasattr(X,'ndim') and X.ndim == 1 or isinstance(X,list) and not hasattr(X[0],\"__len__\"))\n","    if has_one_axis(X): X=[X]\n","    if Y is None:\n","        X,Y=[[]]*len(X),X\n","    elif has_one_axis(Y):\n","        Y=[Y]\n","    if len(X) != len(Y):\n","        X=X*len(Y)\n","    set_figsize(figsize)\n","    if axes is None:\n","        axes=plt.gca()\n","    axes.cla()\n","    for x,y,fmt in zip (X,Y,fmts):\n","        axes.plot(x,y,fmt) if len(x) else axes.plot(y,fmt)\n","    set_axes(axes,xlabel,ylabel,xlim,ylim,xscale,yscale,legend)\n","\n","class HyperParameters:\n","    \"\"\"The base class of hyperparameters.\"\"\"\n","    def save_hyperparameters(self, ignore=[]):\n","        \"\"\"Defined in :numref:`sec_oo-design`\"\"\"\n","        raise NotImplemented\n","\n","    def save_hyperparameters(self, ignore=[]):\n","        \"\"\"Save function arguments into class attributes.\n","\n","        Defined in :numref:`sec_utils`\"\"\"\n","        frame = inspect.currentframe().f_back\n","        _, _, _, local_vars = inspect.getargvalues(frame)\n","        self.hparams = {k:v for k, v in local_vars.items()\n","                        if k not in set(ignore+['self']) and not k.startswith('_')}\n","        for k, v in self.hparams.items():\n","            setattr(self, k, v)\n","\n","class ProgressBoard(HyperParameters):\n","    \"\"\"The board that plots data points in animation.\n","\n","    Defined in :numref:`sec_oo-design`\"\"\"\n","    def __init__(self, xlabel=None, ylabel=None, xlim=None,\n","                 ylim=None, xscale='linear', yscale='linear',\n","                 ls=['-', '--', '-.', ':'], colors=['C0', 'C1', 'C2', 'C3'],\n","                 fig=None, axes=None, figsize=(3.5, 2.5), display=True):\n","        self.save_hyperparameters()\n","\n","    def draw(self, x, y, label, every_n=1):\n","        raise NotImplemented\n","\n","    def draw(self, x, y, label, every_n=1):\n","        \"\"\"Defined in :numref:`sec_utils`\"\"\"\n","        Point = collections.namedtuple('Point', ['x', 'y'])\n","        if not hasattr(self, 'raw_points'):\n","            self.raw_points = collections.OrderedDict()\n","            self.data = collections.OrderedDict()\n","        if label not in self.raw_points:\n","            self.raw_points[label] = []\n","            self.data[label] = []\n","        points = self.raw_points[label]\n","        line = self.data[label]\n","        points.append(Point(x, y))\n","        if len(points) != every_n:\n","            return\n","        mean = lambda x: sum(x) / len(x)\n","        line.append(Point(mean([p.x for p in points]),\n","                          mean([p.y for p in points])))\n","        points.clear()\n","        if not self.display:\n","            return\n","        use_svg_display()\n","        if self.fig is None:\n","            self.fig = plt.figure(figsize=self.figsize)\n","        plt_lines, labels = [], []\n","        for (k, v), ls, color in zip(self.data.items(), self.ls, self.colors):\n","            plt_lines.append(plt.plot([p.x for p in v], [p.y for p in v],\n","                                          linestyle=ls, color=color)[0])\n","            labels.append(k)\n","        axes = self.axes if self.axes else plt.gca()\n","        if self.xlim: axes.set_xlim(self.xlim)\n","        if self.ylim: axes.set_ylim(self.ylim)\n","        if not self.xlabel: self.xlabel = self.x\n","        axes.set_xlabel(self.xlabel)\n","        axes.set_ylabel(self.ylabel)\n","        axes.set_xscale(self.xscale)\n","        axes.set_yscale(self.yscale)\n","        axes.legend(plt_lines, labels)\n","        display.display(self.fig)\n","        display.clear_output(wait=True)\n"],"metadata":{"id":"8GmBXFpg9P5O","executionInfo":{"status":"ok","timestamp":1753063766903,"user_tz":-420,"elapsed":3,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["class Module(nn.Module, HyperParameters):\n","    def __init__(self,plot_train_per_epoch=2, plot_valid_per_epoch=1):\n","        super().__init__()\n","        self.save_hyperparameters()\n","        self.board= ProgressBoard()\n","    def squared_loss(self,y_hat,y):\n","        return(y_hat-y.reshape(y_hat.shape))**2/2\n","    def forward(self, X):\n","        assert hasattr(self, 'net'), 'Neural Network is defined'\n","        return self.net(X)\n","    def plot(self, key, value, train):\n","        assert hasattr(self,'trainer'), 'Trainer is not inited'\n","        self.board.xlabel='epoch'\n","        if train:\n","            x= self.trainer.train_batch_idx / \\\n","                self.trainer.num_train_batches\n","            n=self.trainer.num_train_batches / \\\n","                self.plot_train_per_epoch\n","        else:\n","            x=self.trainer.epoch+1\n","            n=self.trainer.num_val_batches / \\\n","                self.plot_valid_per_epoch\n","        if isinstance(value, int):\n","            value=torch.tensor(value)\n","        self.board.draw(x,value.to('cpu').detach().numpy(), ('train_' if train else 'val_')+key, every_n=int(n))\n","\n","    def training_step(self, batch):\n","        l=self.loss(self(*batch[:-1]), batch[-1])\n","        self.plot('loss', l, train=True)\n","        return l\n","    def validation_step(self,batch):\n","        l=self.loss(self(*batch[:-1]), batch[-1])\n","        self.plot('loss', l, train=False)\n","    def configure_optimizers(self):\n","        return torch.optim.SGD(self.parameters(),lr=self.lr)\n","    def  apply_init(self, inputs, init=None):\n","        self.forward(inputs)\n","        if init is not None:\n","            self.net.apply(init)"],"metadata":{"id":"FiKOFkVk9JfV","executionInfo":{"status":"ok","timestamp":1753063766910,"user_tz":-420,"elapsed":2,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["class DataModule(HyperParameters):\n","    def __init__(self, root='./data', num_workers=4):\n","        self.save_hyperparameters()\n","    def get_dataloader(self,train):\n","        i=slice(0,self.num_train) if train else slice(self.num_train, None)\n","        return self.get_tensorloader((self.X, self.y), train, i)\n","    def train_dataloader(self):\n","        return self.get_dataloader(train=True)\n","    def val_dataloader(self):\n","        return self.get_dataloader(train=False)\n","    def get_tensorloader(self, tensors, train, indices=slice(0, None)):\n","        tensors = tuple(a[indices] for a in tensors)\n","        dataset = torch.utils.data.TensorDataset(*tensors)\n","        return torch.utils.data.DataLoader(dataset, self.batch_size, shuffle=train)\n"],"metadata":{"id":"mYec5ZP09pgm","executionInfo":{"status":"ok","timestamp":1753063766932,"user_tz":-420,"elapsed":19,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["def gpu(i=0):\n","    return torch.device(f'cuda:{i}')\n","def num_gpus():\n","    return torch.cuda.device_count()\n","class Trainer(HyperParameters):\n","    def __init__(self, max_epochs, num_gpus_arg=0, gradient_clip_val=0):\n","        self.save_hyperparameters()\n","        self.gpus=[gpu(i) for i in range(min(num_gpus_arg, num_gpus()))]\n","    def prepare_data(self,data):\n","        self.train_dataloader=data.train_dataloader()\n","        self.val_dataloader=data.val_dataloader()\n","        self.num_train_batches=len(self.train_dataloader)\n","        self.num_val_batches=(len(self.val_dataloader) if self.val_dataloader is not None else 0)\n","    def prepare_model(self,model):\n","        model.trainer=self\n","        model.board.xlim=[0,self.max_epochs]\n","        if self.gpus:\n","            model.to(self.gpus[0])\n","        self.model=model\n","    def fit(self,model,data):\n","        self.prepare_data(data)\n","        self.prepare_model(model)\n","        self.optim=model.configure_optimizers()\n","        self.epoch=0\n","        self.train_batch_idx=0\n","        self.val_batch_idx=0\n","        for self.epoch in range(self.max_epochs):\n","            self.fit_epoch()\n","    def fit_epoch(self):\n","        self.model.train()\n","        for batch in self.train_dataloader:\n","            loss = self.model.training_step(self.prepare_batch(batch))\n","            self.optim.zero_grad()\n","            with torch.no_grad():\n","                loss.backward()\n","                if self.gradient_clip_val > 0: # To be discussed later\n","                    self.clip_gradients(self.gradient_clip_val, self.model)\n","                self.optim.step()\n","            self.train_batch_idx += 1\n","        if self.val_dataloader is None:\n","            return\n","        self.model.eval()\n","        for batch in self.val_dataloader:\n","            with torch.no_grad():\n","                self.model.validation_step(self.prepare_batch(batch))\n","            self.val_batch_idx += 1\n","    def prepare_batch(self,batch):\n","        if self.gpus:\n","            batch=[a.to(self.gpus[0]) for a in batch]\n","        return batch\n","    def clip_gradients(self, grad_clip_val, model):\n","        params = [p for p in model.parameters() if p.requires_grad]\n","        norm = torch.sqrt(sum(torch.sum((p.grad ** 2)) for p in params))\n","        if norm > grad_clip_val:\n","            for param in params:\n","                param.grad[:] *= grad_clip_val / norm\n","\n"],"metadata":{"id":"phu0SHYu9z9g","executionInfo":{"status":"ok","timestamp":1753063766949,"user_tz":-420,"elapsed":2,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["class Classifier(Module):\n","    def validation_step(self, batch):\n","        Y_hat = self(*batch[:-1])\n","        self.plot('loss', self.loss(Y_hat, batch[-1]), train=False)\n","        self.plot('acc', self.accuracy(Y_hat, batch[-1]), train=False)\n","    def accuracy(Self, Y_hat, Y, averaged=True):\n","        Y_hat= Y_hat.reshape((-1, Y_hat.shape[-1]))\n","        preds=Y_hat.argmax(axis=1).type(Y.dtype)\n","        compare=(preds==Y.reshape(-1)).type(torch.float32)\n","        return compare.mean() if averaged else compare\n","    def layer_summary(self,X_shape):\n","        X=torch.randn(*X_shape)\n","        for layer in self.net:\n","            X=layer(X)\n","            print(layer.__class__.__name__, 'output shape: \\t', X.shape)"],"metadata":{"id":"LDekJ1vM-Tic","executionInfo":{"status":"ok","timestamp":1753063766976,"user_tz":-420,"elapsed":11,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["def download(url, folder='../data', sha1_hash=None):\n","    \"\"\"Download a file to folder and return the local filepath.\"\"\"\n","    if not url.startswith('http'):\n","    # For back compatability\n","        url, sha1_hash = DATA_HUB[url]\n","    os.makedirs(folder, exist_ok=True)\n","    fname = os.path.join(folder, url.split('/')[-1])\n","    # Check if hit cache\n","    if os.path.exists(fname) and sha1_hash:\n","        sha1 = hashlib.sha1()\n","        with open(fname, 'rb') as f:\n","            while True:\n","                data = f.read(1048576)\n","                if not data:\n","                    break\n","            sha1.update(data)\n","        if sha1.hexdigest() == sha1_hash:\n","            return fname\n","    # Download\n","    print(f'Downloading {fname} from {url}...')\n","    r = requests.get(url, stream=True, verify=True)\n","    with open(fname, 'wb') as f:\n","        f.write(r.content)\n","    return fname\n","def extract(filename, folder=None):\n","    \"\"\"Extract a zip/tar file into folder.\"\"\"\n","    base_dir = os.path.dirname(filename)\n","    _, ext = os.path.splitext(filename)\n","    assert ext in ('.zip', '.tar', '.gz'), 'Only support zip/tar files.'\n","    if ext == '.zip':\n","        fp = zipfile.ZipFile(filename, 'r')\n","    else:\n","        fp = tarfile.open(filename, 'r')\n","    if folder is None:\n","        folder = base_dir\n","    fp.extractall(folder)"],"metadata":{"id":"9Jx-RXNgk9Zr","executionInfo":{"status":"ok","timestamp":1753063767094,"user_tz":-420,"elapsed":116,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["use_svg_display()\n","def show_images(imgs, num_rows, num_cols, titles=None, scale=1.5):\n","    figsize=(num_cols*scale, num_rows*scale)\n","    _ , axes=plt.subplots(num_rows, num_cols, figsize=figsize)\n","    axes=axes.flatten()\n","    for i , (ax, img) in enumerate (zip(axes, imgs)):\n","        try:\n","            img=img.detach().numpy()\n","        except:\n","            pass\n","        ax.imshow(img)\n","        ax.axes.get_xaxis().set_visible(False)\n","        ax.axes.get_yaxis().set_visible(False)\n","        if titles:\n","            ax.set_title(titles[i])\n","\n","    return axes\n"],"metadata":{"id":"GoDvxRAYUCjl","executionInfo":{"status":"ok","timestamp":1753063767110,"user_tz":-420,"elapsed":13,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["DATA_HUB = dict()\n","DATA_URL = 'http://d2l-data.s3-accelerate.amazonaws.com/'"],"metadata":{"id":"K-UNZ4yUlChC","executionInfo":{"status":"ok","timestamp":1753063767130,"user_tz":-420,"elapsed":14,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["import torchvision"],"metadata":{"id":"GEA8glyRTvOc","executionInfo":{"status":"ok","timestamp":1753063774625,"user_tz":-420,"elapsed":7494,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["def accuracy(y_hat, y):\n","    if len(y_hat.shape) > 1 and y_hat.shape[1] > 1:      #kiểm tra xem y_hat có phải ma trận dự đoán xác suất nhiều lớp\n","        y_hat = y_hat.argmax(axis=1)                     # nếu phải thì chọn lớp có xác suất lớn nhất\n","    cmp = y_hat.type(y.dtype) == y                       # ép kiểu y_hat về giống y rồi so sánh\n","    return float(cmp.type(y.dtype).sum())                # trả về tổng số lượng dự đoán đúng\n"],"metadata":{"id":"SgV1u_KQZhMq","executionInfo":{"status":"ok","timestamp":1753063774632,"user_tz":-420,"elapsed":4,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["def try_all_gpus():\n","    return [gpu(i) for i in range(num_gpus())]\n","def cpu():\n","  \"\"\"Get the CPU device.\"\"\"\n","  return torch.device('cpu')\n","def try_gpu(i=0):\n","  if num_gpus() >= i + 1:\n","    return gpu(i)\n","  return cpu()\n"],"metadata":{"id":"MFSEKUORbbeA","executionInfo":{"status":"ok","timestamp":1753063774664,"user_tz":-420,"elapsed":27,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["import time\n","class Timer:\n","    def __init__(self):\n","        self.times = []\n","        self.start()                                     # bắt đầu tính thời gian từ khi khởi tạo\n","    def start(self):\n","        self.tik = time.time()                           # lưu lại thời điểm hiện tại\n","    def stop(self):\n","        self.times.append(time.time() - self.tik)        # lấy thời điểm hiện tại trừ thời điểm bắt đầu, lưu vào list times\n","        return self.times[-1]                            # trả về giá trị vừa đo được\n","    def avg(self):\n","        return sum(self.times) / len(self.times)         # tính thời gian trung bình\n","    def sum(self):\n","        return sum(self.times)                           # tính tổng thời gian\n","    def cumsum(self):\n","        return np.array(self.times).cumsum().tolist()    # chuyển thành dạng numpy rồi tính tổng tích lũy rồi trả về kết quả dưới dạng list Python"],"metadata":{"id":"tjeish3rbz0-","executionInfo":{"status":"ok","timestamp":1753063774672,"user_tz":-420,"elapsed":2,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["class Animator:                   # Lớp ni để vẽ đồ thị động\n","    def __init__(self, xlabel=None, ylabel=None, legend=None, xlim=None, ylim=None, xscale='linear', yscale='linear', fmts=('-', 'm--', 'g-.', 'r:'), nrows=1, ncols=1, figsize=(3.5, 2.5)):\n","        if legend is None:\n","            legend = []\n","        use_svg_display()\n","        self.fig, self.axes = plt.subplots(nrows, ncols, figsize=figsize)     # tạo 1 biểu đồ bằng subplots sau đó lấy fig và axes\n","        if nrows * ncols == 1:\n","            self.axes = [self.axes, ]          # nếu chỉ có 1 biểu đồ (nrows*ncols==1) thì biến self.axes thành 1 list chứa trục\n","        self.config_axes = lambda: set_axes(self.axes[0], xlabel, ylabel, xlim, ylim, xscale, yscale, legend)   # cấu hình trục mỗi khi cập nhật đồ thị\n","        self.X, self.Y, self.fmts = None, None, fmts             #khởi tạo dữ liệu để lưu các điểm vẽ thời gian\n","    def add(self, x, y):                       # thêm điểm dữ liệu mới\n","        if not hasattr(y, \"__len__\"):                          # Chuẩn hóa x và y thành list\n","            y = [y]\n","        n = len(y)\n","        if not hasattr(x, \"__len__\"):\n","            x = [x] * n\n","        if not self.X:                                        # nếu chưa có dữ liệu thì khởi tạo\n","            self.X = [[] for _ in range(n)]\n","        if not self.Y:\n","            self.Y = [[] for _ in range(n)]\n","        for i, (a, b) in enumerate(zip(x, y)):                       #thêm dữ liệu vào danh sách\n","            if a is not None and b is not None:\n","                self.X[i].append(a)\n","                self.Y[i].append(b)\n","        self.axes[0].cla()                                           # xóa dữ liệu cũ\n","        for x, y, fmt in zip(self.X, self.Y, self.fmts):            # vẽ dữ liệu mới\n","            self.axes[0].plot(x, y, fmt)\n","        self.config_axes()                                          # cấu hình trục\n","        display.display(self.fig)                                   # hiển thị\n","        display.clear_output(wait=True)                               # xóa hình cũ để vẽ hình mới"],"metadata":{"id":"1ep3W-pwc50d","executionInfo":{"status":"ok","timestamp":1753063774697,"user_tz":-420,"elapsed":24,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["class Accumulator:                                           # lớp này để tích lũy giá trị số học qua nhiều bước\n","    def __init__(self, n):\n","        self.data = [0.0] * n                                #tạo list n phần tử 0.0\n","    def add(self, *args):\n","        self.data = [a + float(b) for a, b in zip(self.data, args)]   # kết hợp phần tử trong self.data cộng với các phần tử trong args rồi cập nhật lại vào self.data\n","    def reset(self):\n","        self.data = [0.0] * len(self.data)            # reset về 0.0\n","    def __getitem__(self, idx):\n","        return self.data[idx]                               # lấy giá trị tại vị trí idx"],"metadata":{"id":"N5pj-E_GeHUe","executionInfo":{"status":"ok","timestamp":1753063774704,"user_tz":-420,"elapsed":9,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["def evaluate_accuracy_gpu(net, data_iter, device=None):\n","    if isinstance(net, nn.Module):            # nếu net là mô hình nn.Module thì đưa về chế độ eval\n","        net.eval()\n","        if not device:\n","            device = next(iter(net.parameters())).device       # nếu chưa chỉ định device thì tự động lấy device của tham số đầu tiên trong mô hình\n","    metric=Accumulator(2)                                      # tạo accumulator để tích lũy, metric[0] để tích lũy số dự đoán đúng, metric[1] để tích lũy tổng số mẫu\n","    with torch.no_grad():                                      # tắt gradient để tăng tốc\n","        for X, y in data_iter:\n","            if isinstance(X, list):                            #chuyển dữ liệu sang GPU\n","                X = [x.to(device) for x in X]\n","            else:\n","                X = X.to(device)\n","            y = y.to(device)\n","            metric.add(accuracy(net(X), y), y.numel())         #tính tổng số dự đoán đúng và tổng số mẫu rồi add vào metric\n","    return metric[0] / metric[1]                               # trả về accuracy = số dự đoán đúng/ số mẫu"],"metadata":{"id":"5ximjpDtfvge","executionInfo":{"status":"ok","timestamp":1753063774776,"user_tz":-420,"elapsed":76,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["class Residual(nn.Module):\n","    def __init__(self, num_channels, use_1x1conv=False, strides=1):\n","        super().__init__()\n","        self.conv1=nn.LazyConv2d( num_channels, kernel_size=3, padding=1, stride=strides)\n","        self.conv2=nn.LazyConv2d(num_channels, kernel_size=3, padding=1)\n","        if use_1x1conv:\n","            self.conv3=nn.LazyConv2d(num_channels, kernel_size=1, stride=strides)\n","        else:\n","            self.conv3=None\n","        self.bn1=nn.LazyBatchNorm2d()\n","        self.bn2=nn.LazyBatchNorm2d()\n","    def forward(self, X):\n","        Y=F.relu(self.bn1(self.conv1(X)))\n","        Y=self.bn2(self.conv2(Y))\n","        if self.conv3:\n","            X=self.conv3(X)\n","        Y+=X\n","        return F.relu(Y)\n"],"metadata":{"id":"jSQ8OykphKNe","executionInfo":{"status":"ok","timestamp":1753063774780,"user_tz":-420,"elapsed":3,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["def resnet18(num_classes, in_channels=1):\n","    def resnet_block(in_channels, out_channels, num_residuals, first_block=False):\n","        blk = []\n","        for i in range(num_residuals):\n","            if i == 0 and not first_block:\n","                blk.append(Residual(out_channels, use_1x1conv=True, strides=2))\n","            else:\n","                blk.append(Residual(out_channels, out_channels))\n","        return nn.Sequential(*blk)\n","    net=nn.Sequential(nn.Conv2d(in_channels, 64, kernel_size=3, stride=1, padding=1), nn.BatchNorm2d(64), nn.ReLU())\n","    net.add_module(\"resnet_block1\", resnet_block(64, 64, 2, first_block=True))\n","    net.add_module(\"resnet_block2\", resnet_block(64, 128, 2))\n","    net.add_module(\"resnet_block3\", resnet_block(128, 256, 2))\n","    net.add_module(\"resnet_block4\", resnet_block(256, 512, 2))\n","    net.add_module(\"global_avg_pool\", nn.AdaptiveAvgPool2d((1,1)))\n","    net.add_module(\"fc\", nn.Sequential(nn.Flatten(), nn.Linear(512, num_classes)))\n","    return net"],"metadata":{"id":"hucFZZhggmeB","executionInfo":{"status":"ok","timestamp":1753063774794,"user_tz":-420,"elapsed":12,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["def init_cnn(module):\n","    if type(module) == nn.Linear or type(module) == nn.Conv2d:\n","        nn.init.xavier_uniform_(module.weight)"],"metadata":{"id":"Cw9fDfY0hdLR","executionInfo":{"status":"ok","timestamp":1753063774796,"user_tz":-420,"elapsed":1,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["def download_extract(name, folder=None):\n","    fname = download(name)\n","    base_dir = os.path.dirname(fname)\n","    data_dir, ext = os.path.splitext(fname)\n","    if ext == '.zip':\n","        fp = zipfile.ZipFile(fname, 'r')\n","    elif ext in ('.tar', '.gz'):\n","        fp = tarfile.open(fname, 'r')\n","    else:\n","        assert False, 'Only zip/tar files can be extracted.'\n","    fp.extractall(base_dir)\n","    return os.path.join(base_dir, folder) if folder else data_dir"],"metadata":{"id":"AIRtcwYMv_Bo","executionInfo":{"status":"ok","timestamp":1753063774812,"user_tz":-420,"elapsed":15,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["def get_dataloader_workers():\n","    \"\"\"Use 4 processes to read the data.\"\"\"\n","    return 4\n"],"metadata":{"id":"5YjRGkykJW0v","executionInfo":{"status":"ok","timestamp":1753063774815,"user_tz":-420,"elapsed":16,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["def train_batch_ch13(net, X, y, loss, trainer, devices):         #huấn luyện 1 batch dữ liệu duy nhất\n","    if isinstance(X, list):                                      # chuyển X và y sang các thiết bị tương ứng\n","        X = [x.to(devices[0]) for x in X]\n","    else:\n","        X=X.to(devices[0])\n","    y=y.to(devices[0])\n","    net.train()                                                 #bật chế độ huấn luyện\n","    trainer.zero_grad()                                         #xóa gradient\n","    pred=net(X)                                                 #dự đoán đầu ra của mô hình\n","    l=loss(pred, y)                                             #tính hàm mất mát\n","    l.sum().backward()                                          # tính tổng loss và lấy gradient\n","    trainer.step()                                              #cập nhật trọng số\n","    train_loss_sum=l.sum()\n","    train_acc_sum=accuracy(pred, y)\n","    return train_loss_sum, train_acc_sum                        # trả về tổng train loss và tổng train acc\n"],"metadata":{"id":"bIMhnjnl2_GN","executionInfo":{"status":"ok","timestamp":1753063774818,"user_tz":-420,"elapsed":2,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["def train_ch13(net, train_iter, test_iter, loss, trainer, num_epochs, devices=try_all_gpus):\n","    timer, num_batches = Timer(), len(train_iter)                         # timer để đo thời gian huấn luyện, num_batches là len của train_iter\n","    animator = Animator(xlabel='epoch', xlim=[1, num_epochs], ylim=[0,1], legend=['train loss', 'train acc', 'test acc'])  # vẽ đồ thị động\n","    net = nn.DataParallel(net, device_ids=devices).to(devices[0])                                                          # chạy mô hình trên nhiều GPU xong thì chuyển lên GPU chính đầu tiên\n","    for epoch in range(num_epochs):\n","        metric=Accumulator(4)                                       # tạo accumulator để tích lũy theo thứ tự là loss, acc, tổng số mẫu, tổng số phần tử\n","        for i, (features, labels) in enumerate(train_iter):\n","            timer.start()                                           # bắt đầu tính thời gian\n","            l, acc = train_batch_ch13(net, features, labels, loss, trainer, devices)    # lấy loss, acc của 1 batch\n","            metric.add(l, acc, labels.shape[0], labels.numel())     # tích lũy loss, acc, shape của nhãn, tổng số phần tử của nhãn\n","            timer.stop()                                            # dừng tính thời gian\n","            if (i + 1) % (num_batches // 5) == 0 or i == num_batches - 1:                                                # vẽ biểu đồ 5 lần mỗi epoch, đảm bảo batch cuối luôn được vẽ\n","                animator.add(epoch + (i + 1) / num_batches, (metric[0] / metric[2], metric[1]/ metric[3], None))\n","        test_acc = evaluate_accuracy_gpu(net, test_iter)                # tính tess accuracy\n","        animator.add(epoch+1, (None, None, test_acc))\n","        print(f'loss {metric[0] / metric[2]:.3f}, train acc {metric[1] / metric[3]:.3f}, test acc {test_acc:.3f}')\n","        print(f'{metric[2] * num_epochs / timer.sum():.1f} examples/sec on {str(devices)}')"],"metadata":{"id":"LgEx6p8HwQdI","executionInfo":{"status":"ok","timestamp":1753063774830,"user_tz":-420,"elapsed":11,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":23,"outputs":[]},{"cell_type":"markdown","source":["**Dataset** \\\n"],"metadata":{"id":"VdbgxOvZouXJ"}},{"cell_type":"code","source":["import pandas as pd"],"metadata":{"id":"AwrutavKq66Z","executionInfo":{"status":"ok","timestamp":1753063775110,"user_tz":-420,"elapsed":277,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["DATA_HUB['ptb'] = (DATA_URL + 'ptb.zip',\n","'319d85e578af0cdc590547f26231e4e31cdf1e42')"],"metadata":{"id":"vh4mwXAH9gy0","executionInfo":{"status":"ok","timestamp":1753063775143,"user_tz":-420,"elapsed":30,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["def read_ptb():\n","    \"\"\"Load the PTB dataset into a list of text lines.\"\"\"\n","    data_dir = download_extract('ptb')\n","    # Read the training set\n","    with open(os.path.join(data_dir, 'ptb.train.txt')) as f:\n","        raw_text = f.read()\n","    return [line.split() for line in raw_text.split('\\n')]\n","sentences = read_ptb()\n","f'# sentences: {len(sentences)}'"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":73},"id":"HEyXQqKiVImW","executionInfo":{"status":"ok","timestamp":1753063775686,"user_tz":-420,"elapsed":542,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}},"outputId":"92b8113f-8a84-48e4-bbff-77cd11003bc6"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading ../data/ptb.zip from http://d2l-data.s3-accelerate.amazonaws.com/ptb.zip...\n"]},{"output_type":"execute_result","data":{"text/plain":["'# sentences: 42069'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["# Nhận vào 1 tập token (có thể là list các câu).\n","# Đếm tần suất, giữ lại token theo min_freq + reserved_tokens + '<unk>'.\n","# khai báo một lớp Vocab để quản lý ánh xạ giữa token (từ, ký tự,..) và chỉ số (index)\n","# tokens: danh sách token\n","# min_freq: tần suất tối thiểu để một token được giữ lại trong từ điển\n","# reserved_tokens: danh sách token đặt trước như pad, bos, eos\n","class Vocab:\n","  def __init__(self, tokens=[], min_freq=0, reserved_tokens=[]):\n","    if tokens and isinstance(tokens[0],list):            # nếu token không rỗng và phần tử đầu vào là một list\n","      tokens=[token for line in tokens for token in line]  # lấy từng token trong line (một list token trong tokens) rồi gom lại thành một list phẳng\n","    counter=collections.Counter(tokens)                    # đếm tần suất xuất hiện của từng token, kết quả là một counter mapping token -> số lần xuất hiện\n","    self.token_freqs=sorted(counter.items(), key=lambda x:x[1], reverse=True)  # chuyển các cặp (token, freq) thành một list theo tần suất giảm dần, key là tiêu chí so sánh, ở đây mỗi phần tử x tiêu chí là freq nên x[1], thông thường sorted sắp tăng dần nên phải reversed\n","    # xây danh sách từ chỉ số -> token , unk luôn đầu tiên để gán cho token lạ + reversed_tokens + token thật sự có tần suất >= min_freq\n","    # dùng set để loại bỏ trùng, sorted để chắc chắn thứ tự cố định (theo mã unicode của chuỗi)\n","    self.idx_to_token=list(sorted(set(['<unk>']+reserved_tokens+[token for token, freq in self.token_freqs if freq>=min_freq])))\n","    self.token_to_idx={token:idx for idx, token in enumerate(self.idx_to_token)}  # tạo ngược lại một dict token_to_idx bằng các đánh số 0,1,2,.. trên idx_to_token\n","  def __len__(self):\n","    return len(self.idx_to_token)             # trả về số token trong từ điển\n","  def __getitem__(self,tokens):               # lấy index\n","    if not isinstance(tokens,(list,tuple)):\n","      return self.token_to_idx.get(tokens,self.unk)\n","    return [self.__getitem__(token) for token in tokens]\n","  def to_tokens(self, indices):               # lấy token của index\n","    if hasattr(indices,'__len__') and len(indices)>1:\n","      return [self.idx_to_token[int(index)] for index in indices]\n","    return self.idx_to_token[indices]\n","  @property\n","  def unk(self):\n","    return self.token_to_idx['<unk>']"],"metadata":{"id":"JDC8QHMyWa9z","executionInfo":{"status":"ok","timestamp":1753063775688,"user_tz":-420,"elapsed":38,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["vocab = Vocab(sentences, min_freq=10)\n","f'vocab size: {len(vocab)}'\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"id":"q8UYHJl0WEX0","executionInfo":{"status":"ok","timestamp":1753063775815,"user_tz":-420,"elapsed":133,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}},"outputId":"84daace0-e15f-4e53-c08b-da75a3599970"},"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'vocab size: 6719'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["import math"],"metadata":{"id":"SdMA_ybhY3ch","executionInfo":{"status":"ok","timestamp":1753063775822,"user_tz":-420,"elapsed":11,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["def subsample(sentences, vocab):\n","    \"\"\"Subsample high-frequency words.\"\"\"\n","    # Exclude unknown tokens ('<unk>')\n","    sentences = [[token for token in line if vocab[token] != vocab.unk] for line in sentences]   # loại bỏ token unk\n","    counter = collections.Counter([token for line in sentences for token in line])     # đếm số lần token xuất hiện trong toàn bộ tập\n","    num_tokens = sum(counter.values())                                                 # tổng số token sau khi đã bỏ unk\n","    # Return True if `token` is kept during subsampling\n","    def keep(token):\n","        return(random.uniform(0, 1) < math.sqrt(1e-4 / counter[token] * num_tokens))\n","    return ([[token for token in line if keep(token)] for line in sentences],counter)  # duyệt từng token trong câu, nếu keep(token trả về true thì giữ nguyên,\n","                                                                                      # trả về danh sách các câu sau khi đã lọc từ, counter = tần suất gốc của các từ)\n","subsampled, counter = subsample(sentences, vocab)"],"metadata":{"id":"PDg6MKWwYdBU","executionInfo":{"status":"ok","timestamp":1753063777352,"user_tz":-420,"elapsed":1533,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["def get_centers_and_contexts(corpus, max_window_size):\n","    \"\"\"Return center words and context words in skip-gram.\"\"\"\n","    centers, contexts = [], []\n","    for line in corpus:\n","        # To form a \"center word--context word\" pair, each sentence needs to\n","        # have at least 2 words\n","        if len(line) < 2:     # nếu câu ít hơn 2 từ thì bỏ qua\n","            continue\n","        centers += line       # mỗi từ trong câu sẽ được dùng làm từ trung tâm\n","        for i in range(len(line)): # Context window centered at `i`\n","            window_size = random.randint(1, max_window_size)     # với mỗi từ tại vị trí i, chọn ngẫu nhiên một window_size từ 1 đến max_window_size)\n","            indices = list(range(max(0, i - window_size), min(len(line), i + 1 + window_size))) # xác định các chỉ số của các từ nằm xung quanh center word\n","            # Exclude the center word from the context words\n","            indices.remove(i)       # loại bỏ chỉ số của center words\n","            contexts.append([line[idx] for idx in indices])   # với mỗi center word, lưu danh sách các từ ngữ cảnh tương ứng\n","    return centers, contexts\n"],"metadata":{"id":"D1xsitqBb5_L","executionInfo":{"status":"ok","timestamp":1753063777355,"user_tz":-420,"elapsed":2,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["corpus = [vocab[line] for line in subsampled]     # tập ngữ liệu\n"],"metadata":{"id":"LUC6PIj_evjk","executionInfo":{"status":"ok","timestamp":1753063777739,"user_tz":-420,"elapsed":369,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":32,"outputs":[]},{"cell_type":"code","source":["all_centers, all_contexts = get_centers_and_contexts(corpus, 5)\n","f'# center-context pairs: {sum([len(contexts) for contexts in all_contexts])}'\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"id":"m376E8OjdVcf","executionInfo":{"status":"ok","timestamp":1753063778728,"user_tz":-420,"elapsed":970,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}},"outputId":"33cc3732-05c9-44c3-9233-6ba83c002d71"},"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'# center-context pairs: 1500860'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":33}]},{"cell_type":"code","source":["class RandomGenerator:\n","    \"\"\"Randomly draw among {1, ..., n} according to n sampling weights.\"\"\"\n","    def __init__(self, sampling_weights):\n","        # Exclude\n","        self.population = list(range(1, len(sampling_weights) + 1))\n","        self.sampling_weights = sampling_weights\n","        self.candidates = []\n","        self.i = 0\n","    def draw(self):\n","        if self.i == len(self.candidates):   # nếu đã duyệt hết candidates\n","        # Cache `k` random sampling results\n","            self.candidates = random.choices(self.population, self.sampling_weights, k=10000)   # sinh mới 10000 kết quả ngẫu nhiên theo trọng số\n","            self.i = 0\n","        self.i += 1\n","        return self.candidates[self.i - 1]"],"metadata":{"id":"IFdfopUWe9qB","executionInfo":{"status":"ok","timestamp":1753063778737,"user_tz":-420,"elapsed":3,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["def get_negatives(all_contexts, vocab, counter, K):\n","    \"\"\"Return noise words in negative sampling.\"\"\"\n","    # Sampling weights for words with indices 1, 2, ... (index 0 is the\n","    # excluded unknown token) in the vocabulary\n","    sampling_weights = [counter[vocab.to_tokens(i)]**0.75 for i in range(1, len(vocab))]      # lấy tần suất xuất hiện của từng từ trong counter, mỗi trọng số được nâng lũy thừa 0.75 để giảm ảnh hưởng của từ quá phổ biến  -> ưu tiên chọn những từ có tần suất vừa phải (không quá lớn, không quá hiếm)\n","    all_negatives, generator = [], RandomGenerator(sampling_weights)    # dùng RandomGenerator để tạo sinh từ ngẫu nhiên theo phân phối trọng số\n","    for contexts in all_contexts:        # duyệt qua tuengf danh sách context\n","        negatives = []\n","        while len(negatives) < len(contexts) * K:     # cần tạo đủ len(contexts)*K từ nhiễu cho mỗi dòng\n","            neg = generator.draw()      # dùng draw để lấy ngẫu nhiên từ theo trọng số\n","            # chỉ thêm từ nếu nó không nằm trong contexts\n","            if neg not in contexts:\n","                negatives.append(neg)\n","        all_negatives.append(negatives)\n","    return all_negatives          # trả về list 2 chiều mỗi phần tử là danh sách các từ nhiễu ứng với từng dòng contexts\n","all_negatives = get_negatives(all_contexts, vocab, counter, 5)"],"metadata":{"id":"lbWpaDyjfdNv","executionInfo":{"status":"ok","timestamp":1753063784323,"user_tz":-420,"elapsed":5583,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["# tạo các minibatch đầu vào cho mô hình Skip-gram với Negative Sampling và nó xử lý dữ liệu đầu vào thành tensor phù hợp để huấn luyện\n","def batchify(data):\n","    \"\"\"Return a minibatch of examples for skip-gram with negative sampling.\"\"\"\n","    max_len = max(len(c) + len(n) for _, c, n in data)   # tính tổng số từ ngữ cảnh + nhiễu lớn nhất trong các phần tử (để tí padding cho đồng bộ chiều dài)\n","    centers, contexts_negatives, masks, labels = [], [], [], []  # cnay để tí lưu kết quả\n","    for center, context, negative in data:\n","        cur_len = len(context) + len(negative)\n","        centers += [center]                 # lưu từ trung tâm\n","        contexts_negatives += [context + negative + [0] * (max_len - cur_len)]  # nối context + negative, thêm padding 0 cho đủ chiều dài max_len\n","        masks += [[1] * cur_len + [0] * (max_len - cur_len)]                    # đánh dấu vị trí không có padding để tí còn tính loss\n","        labels += [[1] * len(context) + [0] * (max_len - len(context))]         # đánh dấu cho context và negative\n","    return (torch.tensor(centers).reshape((-1, 1)), torch.tensor(contexts_negatives), torch.tensor(masks), torch.tensor(labels))  # chuyển tất cả thành tensor"],"metadata":{"id":"8rTS1Cb3gUvK","executionInfo":{"status":"ok","timestamp":1753063784347,"user_tz":-420,"elapsed":3,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":36,"outputs":[]},{"cell_type":"code","source":["def load_data_ptb(batch_size, max_window_size, num_noise_words):\n","    \"\"\"Download the PTB dataset and then load it into memory.\"\"\"\n","    num_workers = get_dataloader_workers()   # số workers\n","    sentences = read_ptb()\n","    vocab = Vocab(sentences, min_freq=10)     # tải dữ liệu\n","    subsampled, counter = subsample(sentences, vocab)   # subsample những từ phổ biến\n","    corpus = [vocab[line] for line in subsampled]       # chuyển token thành chỉ số\n","    all_centers, all_contexts = get_centers_and_contexts(corpus, max_window_size)  # tạo data center và context\n","    all_negatives = get_negatives(all_contexts, vocab, counter, num_noise_words) # sinh từ nhiễu, mỗi từ context có k từ nhiễu\n","    class PTBDataset(torch.utils.data.Dataset):\n","        def __init__(self, centers, contexts, negatives):\n","            assert len(centers) == len(contexts) == len(negatives)\n","            self.centers = centers\n","            self.contexts = contexts\n","            self.negatives = negatives\n","        def __getitem__(self, index):\n","            return (self.centers[index], self.contexts[index], self.negatives[index])\n","        def __len__(self):\n","            return len(self.centers)\n","    dataset = PTBDataset(all_centers, all_contexts, all_negatives)\n","    data_iter = torch.utils.data.DataLoader(dataset, batch_size, shuffle=True, collate_fn=batchify, num_workers=num_workers)\n","    return data_iter, vocab"],"metadata":{"id":"6ODuk98JgipP","executionInfo":{"status":"ok","timestamp":1753063784352,"user_tz":-420,"elapsed":2,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":37,"outputs":[]},{"cell_type":"code","source":["def skip_gram(center, contexts_and_negatives, embed_v, embed_u):\n","    v = embed_v(center)\n","    u = embed_u(contexts_and_negatives)\n","    pred = torch.bmm(v, u.permute(0, 2, 1))\n","    return pred\n",""],"metadata":{"id":"oFmkiAARqCKS","executionInfo":{"status":"ok","timestamp":1753063784355,"user_tz":-420,"elapsed":1,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":38,"outputs":[]},{"cell_type":"code","source":["class SigmoidBCELoss(nn.Module):\n","    def __init__(self):\n","        super().__init__()\n","    def forward(self, inputs, target, mask=None):\n","        out=torch.nn.functional.binary_cross_entropy_with_logits(inputs, target, weight=mask, reduction=\"none\")\n","        return out.mean(dim=1)\n"],"metadata":{"id":"aNNe7dOSrXVg","executionInfo":{"status":"ok","timestamp":1753064045479,"user_tz":-420,"elapsed":13,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":55,"outputs":[]},{"cell_type":"code","source":["def train(net, data_iter, lr, num_epochs, device = try_gpu()):\n","    def init_weights(module):\n","        if type(module) == nn.Embedding:\n","            nn.init.xavier_uniform_(module.weight)\n","    net.apply(init_weights)\n","    net = net.to(device)\n","    optimizer = torch.optim.Adam(net.parameters(), lr=lr)\n","    animator = Animator(xlabel='epoch', ylabel='loss', xlim=[1, num_epochs])\n","    metric = Accumulator(2)\n","    for epoch in range(num_epochs):\n","        timer = Timer()\n","        num_batches = len(data_iter)\n","        for i, batch in enumerate(data_iter):\n","            optimizer.zero_grad()\n","            center, context_negative, mask, label = [data.to(device) for data in batch]\n","            pred = skip_gram(center, context_negative, net[0], net[1])\n","            l = (loss(pred.reshape(label.shape).float(), label.float(), mask)/ mask.sum(axis=1))*mask.shape[1]\n","            l.sum().backward()\n","            optimizer.step()\n","            metric.add(l.sum(), l.numel())\n","            if (i+1) % (num_batches // 5) == 0 or i == num_batches - 1:\n","                animator.add(epoch + (i + 1) / num_batches, (metric[0] / metric[1],))\n","    print(f'loss {metric[0] / metric[1]:.3f}, '\n","        f'{metric[1] / timer.stop():.1f} tokens/sec on {str(device)}')"],"metadata":{"id":"kn77-JlcsKd1","executionInfo":{"status":"ok","timestamp":1753064379916,"user_tz":-420,"elapsed":13,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":70,"outputs":[]},{"cell_type":"code","source":["def get_similar_tokens(query_token, k, embed):\n","    W = embed.weight.data\n","    x = W[vocab[query_token]]\n","    cos = torch.mv(W, x) / torch.sqrt(torch.sum(W * W, dim=1) * torch.sum(x * x) + 1e-9)\n","    topk = torch.topk(cos, k=k+1)[1].cpu().numpy().astype('int32')\n","    for i in topk[1:]:\n","        print(f'cosine sim={float(cos[i]):.3f}: {vocab.to_tokens(i)}')\n"],"metadata":{"id":"IAfbomL8uJqR","executionInfo":{"status":"ok","timestamp":1753064379929,"user_tz":-420,"elapsed":16,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":71,"outputs":[]},{"cell_type":"code","source":["batch_size, max_window_size, num_noise_words = 512, 5, 5\n","data_iter, vocab = load_data_ptb(batch_size, max_window_size, num_noise_words)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V_LUVrk8u4w7","executionInfo":{"status":"ok","timestamp":1753064388880,"user_tz":-420,"elapsed":8953,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}},"outputId":"31225ec6-2379-4d1e-ec88-ea3619601092"},"execution_count":72,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading ../data/ptb.zip from http://d2l-data.s3-accelerate.amazonaws.com/ptb.zip...\n"]}]},{"cell_type":"code","source":["embed = nn.Embedding(num_embeddings=20, embedding_dim=4)"],"metadata":{"id":"7DWYe8zwvCVX","executionInfo":{"status":"ok","timestamp":1753064388890,"user_tz":-420,"elapsed":9,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":73,"outputs":[]},{"cell_type":"code","source":["loss = SigmoidBCELoss()"],"metadata":{"id":"UfcJVxWGvLxZ","executionInfo":{"status":"ok","timestamp":1753064388894,"user_tz":-420,"elapsed":8,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":74,"outputs":[]},{"cell_type":"code","source":["embed_size = 100\n","net = nn.Sequential(nn.Embedding(num_embeddings=len(vocab), embedding_dim=embed_size), nn.Embedding(num_embeddings=len(vocab), embedding_dim=embed_size))"],"metadata":{"id":"3YRVKzNWr7_z","executionInfo":{"status":"ok","timestamp":1753064388928,"user_tz":-420,"elapsed":32,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":75,"outputs":[]},{"cell_type":"code","source":["lr, num_epochs = 0.002, 5\n","train(net,data_iter, lr, num_epochs)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"XFaOtk7Uutml","executionInfo":{"status":"ok","timestamp":1753064467290,"user_tz":-420,"elapsed":78359,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}},"outputId":"6572af62-1330-488c-8d3d-1a88e081304d"},"execution_count":76,"outputs":[{"output_type":"stream","name":"stdout","text":["loss 0.410, 112073.2 tokens/sec on cuda:0\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 350x250 with 1 Axes>"],"image/svg+xml":"<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"255.825pt\" height=\"183.35625pt\" viewBox=\"0 0 255.825 183.35625\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n <metadata>\n  <rdf:RDF xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n   <cc:Work>\n    <dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\"/>\n    <dc:date>2025-07-21T02:21:05.582927</dc:date>\n    <dc:format>image/svg+xml</dc:format>\n    <dc:creator>\n     <cc:Agent>\n      <dc:title>Matplotlib v3.10.0, https://matplotlib.org/</dc:title>\n     </cc:Agent>\n    </dc:creator>\n   </cc:Work>\n  </rdf:RDF>\n </metadata>\n <defs>\n  <style type=\"text/css\">*{stroke-linejoin: round; stroke-linecap: butt}</style>\n </defs>\n <g id=\"figure_1\">\n  <g id=\"patch_1\">\n   <path d=\"M 0 183.35625 \nL 255.825 183.35625 \nL 255.825 0 \nL 0 0 \nz\n\" style=\"fill: #ffffff\"/>\n  </g>\n  <g id=\"axes_1\">\n   <g id=\"patch_2\">\n    <path d=\"M 50.14375 145.8 \nL 245.44375 145.8 \nL 245.44375 7.2 \nL 50.14375 7.2 \nz\n\" style=\"fill: #ffffff\"/>\n   </g>\n   <g id=\"matplotlib.axis_1\">\n    <g id=\"xtick_1\">\n     <g id=\"line2d_1\">\n      <path d=\"M 50.14375 145.8 \nL 50.14375 7.2 \n\" clip-path=\"url(#p4bcd46cbd6)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_2\">\n      <defs>\n       <path id=\"m19fd91bb50\" d=\"M 0 0 \nL 0 3.5 \n\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </defs>\n      <g>\n       <use xlink:href=\"#m19fd91bb50\" x=\"50.14375\" y=\"145.8\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_1\">\n      <!-- 1 -->\n      <g transform=\"translate(46.9625 160.398438) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-31\" d=\"M 794 531 \nL 1825 531 \nL 1825 4091 \nL 703 3866 \nL 703 4441 \nL 1819 4666 \nL 2450 4666 \nL 2450 531 \nL 3481 531 \nL 3481 0 \nL 794 0 \nL 794 531 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-31\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_2\">\n     <g id=\"line2d_3\">\n      <path d=\"M 98.96875 145.8 \nL 98.96875 7.2 \n\" clip-path=\"url(#p4bcd46cbd6)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_4\">\n      <g>\n       <use xlink:href=\"#m19fd91bb50\" x=\"98.96875\" y=\"145.8\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_2\">\n      <!-- 2 -->\n      <g transform=\"translate(95.7875 160.398438) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-32\" d=\"M 1228 531 \nL 3431 531 \nL 3431 0 \nL 469 0 \nL 469 531 \nQ 828 903 1448 1529 \nQ 2069 2156 2228 2338 \nQ 2531 2678 2651 2914 \nQ 2772 3150 2772 3378 \nQ 2772 3750 2511 3984 \nQ 2250 4219 1831 4219 \nQ 1534 4219 1204 4116 \nQ 875 4013 500 3803 \nL 500 4441 \nQ 881 4594 1212 4672 \nQ 1544 4750 1819 4750 \nQ 2544 4750 2975 4387 \nQ 3406 4025 3406 3419 \nQ 3406 3131 3298 2873 \nQ 3191 2616 2906 2266 \nQ 2828 2175 2409 1742 \nQ 1991 1309 1228 531 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-32\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_3\">\n     <g id=\"line2d_5\">\n      <path d=\"M 147.79375 145.8 \nL 147.79375 7.2 \n\" clip-path=\"url(#p4bcd46cbd6)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_6\">\n      <g>\n       <use xlink:href=\"#m19fd91bb50\" x=\"147.79375\" y=\"145.8\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_3\">\n      <!-- 3 -->\n      <g transform=\"translate(144.6125 160.398438) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-33\" d=\"M 2597 2516 \nQ 3050 2419 3304 2112 \nQ 3559 1806 3559 1356 \nQ 3559 666 3084 287 \nQ 2609 -91 1734 -91 \nQ 1441 -91 1130 -33 \nQ 819 25 488 141 \nL 488 750 \nQ 750 597 1062 519 \nQ 1375 441 1716 441 \nQ 2309 441 2620 675 \nQ 2931 909 2931 1356 \nQ 2931 1769 2642 2001 \nQ 2353 2234 1838 2234 \nL 1294 2234 \nL 1294 2753 \nL 1863 2753 \nQ 2328 2753 2575 2939 \nQ 2822 3125 2822 3475 \nQ 2822 3834 2567 4026 \nQ 2313 4219 1838 4219 \nQ 1578 4219 1281 4162 \nQ 984 4106 628 3988 \nL 628 4550 \nQ 988 4650 1302 4700 \nQ 1616 4750 1894 4750 \nQ 2613 4750 3031 4423 \nQ 3450 4097 3450 3541 \nQ 3450 3153 3228 2886 \nQ 3006 2619 2597 2516 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-33\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_4\">\n     <g id=\"line2d_7\">\n      <path d=\"M 196.61875 145.8 \nL 196.61875 7.2 \n\" clip-path=\"url(#p4bcd46cbd6)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_8\">\n      <g>\n       <use xlink:href=\"#m19fd91bb50\" x=\"196.61875\" y=\"145.8\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_4\">\n      <!-- 4 -->\n      <g transform=\"translate(193.4375 160.398438) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-34\" d=\"M 2419 4116 \nL 825 1625 \nL 2419 1625 \nL 2419 4116 \nz\nM 2253 4666 \nL 3047 4666 \nL 3047 1625 \nL 3713 1625 \nL 3713 1100 \nL 3047 1100 \nL 3047 0 \nL 2419 0 \nL 2419 1100 \nL 313 1100 \nL 313 1709 \nL 2253 4666 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-34\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_5\">\n     <g id=\"line2d_9\">\n      <path d=\"M 245.44375 145.8 \nL 245.44375 7.2 \n\" clip-path=\"url(#p4bcd46cbd6)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_10\">\n      <g>\n       <use xlink:href=\"#m19fd91bb50\" x=\"245.44375\" y=\"145.8\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_5\">\n      <!-- 5 -->\n      <g transform=\"translate(242.2625 160.398438) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-35\" d=\"M 691 4666 \nL 3169 4666 \nL 3169 4134 \nL 1269 4134 \nL 1269 2991 \nQ 1406 3038 1543 3061 \nQ 1681 3084 1819 3084 \nQ 2600 3084 3056 2656 \nQ 3513 2228 3513 1497 \nQ 3513 744 3044 326 \nQ 2575 -91 1722 -91 \nQ 1428 -91 1123 -41 \nQ 819 9 494 109 \nL 494 744 \nQ 775 591 1075 516 \nQ 1375 441 1709 441 \nQ 2250 441 2565 725 \nQ 2881 1009 2881 1497 \nQ 2881 1984 2565 2268 \nQ 2250 2553 1709 2553 \nQ 1456 2553 1204 2497 \nQ 953 2441 691 2322 \nL 691 4666 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-35\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"text_6\">\n     <!-- epoch -->\n     <g transform=\"translate(132.565625 174.076563) scale(0.1 -0.1)\">\n      <defs>\n       <path id=\"DejaVuSans-65\" d=\"M 3597 1894 \nL 3597 1613 \nL 953 1613 \nQ 991 1019 1311 708 \nQ 1631 397 2203 397 \nQ 2534 397 2845 478 \nQ 3156 559 3463 722 \nL 3463 178 \nQ 3153 47 2828 -22 \nQ 2503 -91 2169 -91 \nQ 1331 -91 842 396 \nQ 353 884 353 1716 \nQ 353 2575 817 3079 \nQ 1281 3584 2069 3584 \nQ 2775 3584 3186 3129 \nQ 3597 2675 3597 1894 \nz\nM 3022 2063 \nQ 3016 2534 2758 2815 \nQ 2500 3097 2075 3097 \nQ 1594 3097 1305 2825 \nQ 1016 2553 972 2059 \nL 3022 2063 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-70\" d=\"M 1159 525 \nL 1159 -1331 \nL 581 -1331 \nL 581 3500 \nL 1159 3500 \nL 1159 2969 \nQ 1341 3281 1617 3432 \nQ 1894 3584 2278 3584 \nQ 2916 3584 3314 3078 \nQ 3713 2572 3713 1747 \nQ 3713 922 3314 415 \nQ 2916 -91 2278 -91 \nQ 1894 -91 1617 61 \nQ 1341 213 1159 525 \nz\nM 3116 1747 \nQ 3116 2381 2855 2742 \nQ 2594 3103 2138 3103 \nQ 1681 3103 1420 2742 \nQ 1159 2381 1159 1747 \nQ 1159 1113 1420 752 \nQ 1681 391 2138 391 \nQ 2594 391 2855 752 \nQ 3116 1113 3116 1747 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-6f\" d=\"M 1959 3097 \nQ 1497 3097 1228 2736 \nQ 959 2375 959 1747 \nQ 959 1119 1226 758 \nQ 1494 397 1959 397 \nQ 2419 397 2687 759 \nQ 2956 1122 2956 1747 \nQ 2956 2369 2687 2733 \nQ 2419 3097 1959 3097 \nz\nM 1959 3584 \nQ 2709 3584 3137 3096 \nQ 3566 2609 3566 1747 \nQ 3566 888 3137 398 \nQ 2709 -91 1959 -91 \nQ 1206 -91 779 398 \nQ 353 888 353 1747 \nQ 353 2609 779 3096 \nQ 1206 3584 1959 3584 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-63\" d=\"M 3122 3366 \nL 3122 2828 \nQ 2878 2963 2633 3030 \nQ 2388 3097 2138 3097 \nQ 1578 3097 1268 2742 \nQ 959 2388 959 1747 \nQ 959 1106 1268 751 \nQ 1578 397 2138 397 \nQ 2388 397 2633 464 \nQ 2878 531 3122 666 \nL 3122 134 \nQ 2881 22 2623 -34 \nQ 2366 -91 2075 -91 \nQ 1284 -91 818 406 \nQ 353 903 353 1747 \nQ 353 2603 823 3093 \nQ 1294 3584 2113 3584 \nQ 2378 3584 2631 3529 \nQ 2884 3475 3122 3366 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-68\" d=\"M 3513 2113 \nL 3513 0 \nL 2938 0 \nL 2938 2094 \nQ 2938 2591 2744 2837 \nQ 2550 3084 2163 3084 \nQ 1697 3084 1428 2787 \nQ 1159 2491 1159 1978 \nL 1159 0 \nL 581 0 \nL 581 4863 \nL 1159 4863 \nL 1159 2956 \nQ 1366 3272 1645 3428 \nQ 1925 3584 2291 3584 \nQ 2894 3584 3203 3211 \nQ 3513 2838 3513 2113 \nz\n\" transform=\"scale(0.015625)\"/>\n      </defs>\n      <use xlink:href=\"#DejaVuSans-65\"/>\n      <use xlink:href=\"#DejaVuSans-70\" transform=\"translate(61.523438 0)\"/>\n      <use xlink:href=\"#DejaVuSans-6f\" transform=\"translate(125 0)\"/>\n      <use xlink:href=\"#DejaVuSans-63\" transform=\"translate(186.181641 0)\"/>\n      <use xlink:href=\"#DejaVuSans-68\" transform=\"translate(241.162109 0)\"/>\n     </g>\n    </g>\n   </g>\n   <g id=\"matplotlib.axis_2\">\n    <g id=\"ytick_1\">\n     <g id=\"line2d_11\">\n      <path d=\"M 50.14375 145.689823 \nL 245.44375 145.689823 \n\" clip-path=\"url(#p4bcd46cbd6)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_12\">\n      <defs>\n       <path id=\"m9a9bbd799d\" d=\"M 0 0 \nL -3.5 0 \n\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </defs>\n      <g>\n       <use xlink:href=\"#m9a9bbd799d\" x=\"50.14375\" y=\"145.689823\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_7\">\n      <!-- 0.40 -->\n      <g transform=\"translate(20.878125 149.489042) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-30\" d=\"M 2034 4250 \nQ 1547 4250 1301 3770 \nQ 1056 3291 1056 2328 \nQ 1056 1369 1301 889 \nQ 1547 409 2034 409 \nQ 2525 409 2770 889 \nQ 3016 1369 3016 2328 \nQ 3016 3291 2770 3770 \nQ 2525 4250 2034 4250 \nz\nM 2034 4750 \nQ 2819 4750 3233 4129 \nQ 3647 3509 3647 2328 \nQ 3647 1150 3233 529 \nQ 2819 -91 2034 -91 \nQ 1250 -91 836 529 \nQ 422 1150 422 2328 \nQ 422 3509 836 4129 \nQ 1250 4750 2034 4750 \nz\n\" transform=\"scale(0.015625)\"/>\n        <path id=\"DejaVuSans-2e\" d=\"M 684 794 \nL 1344 794 \nL 1344 0 \nL 684 0 \nL 684 794 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-30\"/>\n       <use xlink:href=\"#DejaVuSans-2e\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-34\" transform=\"translate(95.410156 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(159.033203 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_2\">\n     <g id=\"line2d_13\">\n      <path d=\"M 50.14375 114.831736 \nL 245.44375 114.831736 \n\" clip-path=\"url(#p4bcd46cbd6)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_14\">\n      <g>\n       <use xlink:href=\"#m9a9bbd799d\" x=\"50.14375\" y=\"114.831736\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_8\">\n      <!-- 0.45 -->\n      <g transform=\"translate(20.878125 118.630955) scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-30\"/>\n       <use xlink:href=\"#DejaVuSans-2e\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-34\" transform=\"translate(95.410156 0)\"/>\n       <use xlink:href=\"#DejaVuSans-35\" transform=\"translate(159.033203 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_3\">\n     <g id=\"line2d_15\">\n      <path d=\"M 50.14375 83.97365 \nL 245.44375 83.97365 \n\" clip-path=\"url(#p4bcd46cbd6)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_16\">\n      <g>\n       <use xlink:href=\"#m9a9bbd799d\" x=\"50.14375\" y=\"83.97365\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_9\">\n      <!-- 0.50 -->\n      <g transform=\"translate(20.878125 87.772869) scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-30\"/>\n       <use xlink:href=\"#DejaVuSans-2e\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-35\" transform=\"translate(95.410156 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(159.033203 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_4\">\n     <g id=\"line2d_17\">\n      <path d=\"M 50.14375 53.115564 \nL 245.44375 53.115564 \n\" clip-path=\"url(#p4bcd46cbd6)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_18\">\n      <g>\n       <use xlink:href=\"#m9a9bbd799d\" x=\"50.14375\" y=\"53.115564\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_10\">\n      <!-- 0.55 -->\n      <g transform=\"translate(20.878125 56.914783) scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-30\"/>\n       <use xlink:href=\"#DejaVuSans-2e\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-35\" transform=\"translate(95.410156 0)\"/>\n       <use xlink:href=\"#DejaVuSans-35\" transform=\"translate(159.033203 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_5\">\n     <g id=\"line2d_19\">\n      <path d=\"M 50.14375 22.257478 \nL 245.44375 22.257478 \n\" clip-path=\"url(#p4bcd46cbd6)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_20\">\n      <g>\n       <use xlink:href=\"#m9a9bbd799d\" x=\"50.14375\" y=\"22.257478\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_11\">\n      <!-- 0.60 -->\n      <g transform=\"translate(20.878125 26.056696) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-36\" d=\"M 2113 2584 \nQ 1688 2584 1439 2293 \nQ 1191 2003 1191 1497 \nQ 1191 994 1439 701 \nQ 1688 409 2113 409 \nQ 2538 409 2786 701 \nQ 3034 994 3034 1497 \nQ 3034 2003 2786 2293 \nQ 2538 2584 2113 2584 \nz\nM 3366 4563 \nL 3366 3988 \nQ 3128 4100 2886 4159 \nQ 2644 4219 2406 4219 \nQ 1781 4219 1451 3797 \nQ 1122 3375 1075 2522 \nQ 1259 2794 1537 2939 \nQ 1816 3084 2150 3084 \nQ 2853 3084 3261 2657 \nQ 3669 2231 3669 1497 \nQ 3669 778 3244 343 \nQ 2819 -91 2113 -91 \nQ 1303 -91 875 529 \nQ 447 1150 447 2328 \nQ 447 3434 972 4092 \nQ 1497 4750 2381 4750 \nQ 2619 4750 2861 4703 \nQ 3103 4656 3366 4563 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-30\"/>\n       <use xlink:href=\"#DejaVuSans-2e\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-36\" transform=\"translate(95.410156 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(159.033203 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"text_12\">\n     <!-- loss -->\n     <g transform=\"translate(14.798437 86.157813) rotate(-90) scale(0.1 -0.1)\">\n      <defs>\n       <path id=\"DejaVuSans-6c\" d=\"M 603 4863 \nL 1178 4863 \nL 1178 0 \nL 603 0 \nL 603 4863 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-73\" d=\"M 2834 3397 \nL 2834 2853 \nQ 2591 2978 2328 3040 \nQ 2066 3103 1784 3103 \nQ 1356 3103 1142 2972 \nQ 928 2841 928 2578 \nQ 928 2378 1081 2264 \nQ 1234 2150 1697 2047 \nL 1894 2003 \nQ 2506 1872 2764 1633 \nQ 3022 1394 3022 966 \nQ 3022 478 2636 193 \nQ 2250 -91 1575 -91 \nQ 1294 -91 989 -36 \nQ 684 19 347 128 \nL 347 722 \nQ 666 556 975 473 \nQ 1284 391 1588 391 \nQ 1994 391 2212 530 \nQ 2431 669 2431 922 \nQ 2431 1156 2273 1281 \nQ 2116 1406 1581 1522 \nL 1381 1569 \nQ 847 1681 609 1914 \nQ 372 2147 372 2553 \nQ 372 3047 722 3315 \nQ 1072 3584 1716 3584 \nQ 2034 3584 2315 3537 \nQ 2597 3491 2834 3397 \nz\n\" transform=\"scale(0.015625)\"/>\n      </defs>\n      <use xlink:href=\"#DejaVuSans-6c\"/>\n      <use xlink:href=\"#DejaVuSans-6f\" transform=\"translate(27.783203 0)\"/>\n      <use xlink:href=\"#DejaVuSans-73\" transform=\"translate(88.964844 0)\"/>\n      <use xlink:href=\"#DejaVuSans-73\" transform=\"translate(141.064453 0)\"/>\n     </g>\n    </g>\n   </g>\n   <g id=\"line2d_21\">\n    <path d=\"M 11.08375 13.5 \nL 20.84875 60.527305 \nL 30.61375 79.474622 \nL 40.37875 89.659038 \nL 50.14375 96.131315 \nL 59.90875 101.019669 \nL 69.67375 104.717575 \nL 79.43875 107.789026 \nL 89.20375 110.409006 \nL 98.96875 112.712791 \nL 108.73375 115.194936 \nL 118.49875 117.411186 \nL 128.26375 119.430765 \nL 138.02875 121.270484 \nL 147.79375 122.939549 \nL 157.55875 125.057596 \nL 167.32375 126.959687 \nL 177.08875 128.67833 \nL 186.85375 130.250423 \nL 196.61875 131.707758 \nL 206.38375 133.581939 \nL 216.14875 135.270515 \nL 225.91375 136.826531 \nL 235.67875 138.239868 \nL 245.44375 139.5 \n\" clip-path=\"url(#p4bcd46cbd6)\" style=\"fill: none; stroke: #1f77b4; stroke-width: 1.5; stroke-linecap: square\"/>\n   </g>\n   <g id=\"patch_3\">\n    <path d=\"M 50.14375 145.8 \nL 50.14375 7.2 \n\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n   </g>\n   <g id=\"patch_4\">\n    <path d=\"M 245.44375 145.8 \nL 245.44375 7.2 \n\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n   </g>\n   <g id=\"patch_5\">\n    <path d=\"M 50.14375 145.8 \nL 245.44375 145.8 \n\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n   </g>\n   <g id=\"patch_6\">\n    <path d=\"M 50.14375 7.2 \nL 245.44375 7.2 \n\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n   </g>\n  </g>\n </g>\n <defs>\n  <clipPath id=\"p4bcd46cbd6\">\n   <rect x=\"50.14375\" y=\"7.2\" width=\"195.3\" height=\"138.6\"/>\n  </clipPath>\n </defs>\n</svg>\n"},"metadata":{}}]},{"cell_type":"code","source":["get_similar_tokens('chip', 3, net[0])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xKkfKoewvbl2","executionInfo":{"status":"ok","timestamp":1753064467415,"user_tz":-420,"elapsed":118,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}},"outputId":"562fff69-ad0f-49e2-a751-86d057b303b4"},"execution_count":77,"outputs":[{"output_type":"stream","name":"stdout","text":["cosine sim=0.696: microprocessor\n","cosine sim=0.685: intel\n","cosine sim=0.646: chips\n"]}]}]}