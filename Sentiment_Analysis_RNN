{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyPWAuse5hAwq1tsnEdiBiRx"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":[],"metadata":{"id":"53GCqU1OoITI"}},{"cell_type":"code","source":["from matplotlib_inline import backend_inline\n","from matplotlib import pyplot as plt\n","from IPython import get_ipython\n","from IPython import display\n","import torch\n","import random\n","import re\n","import collections\n","import inspect\n","import os\n","import hashlib # Added missing import\n","import zipfile # Added missing import\n","import tarfile # Added missing import\n","import requests # Import the requests library\n","from torch import nn\n","from torch.nn import functional as F"],"metadata":{"id":"MPIRm_Oi8ljo","executionInfo":{"status":"ok","timestamp":1753417329428,"user_tz":-420,"elapsed":34,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":229,"outputs":[]},{"cell_type":"code","source":["\n","def use_svg_display():\n","    \"\"\"Use the svg format to display a plot in Jupyter.\n","\n","    Defined in :numref:`sec_calculus`\"\"\"\n","    backend_inline.set_matplotlib_formats('svg')\n","def set_figsize(figsize=(3.5,2.5)):\n","    use_svg_display()\n","    plt.rcParams['figure.figsize']=figsize\n","def set_axes(axes,xlabel,ylabel,xlim,ylim,xscale,yscale,legend):\n","    axes.set_xlabel(xlabel), axes.set_ylabel(ylabel)\n","    axes.set_xscale(xscale), axes.set_yscale(yscale)\n","    axes.set_xlim(xlim), axes.set_ylim(ylim)\n","    if legend:\n","        axes.legend(legend)\n","    axes.grid()\n","def plot(X,Y=None,xlabel=None, ylabel=None, legend=[],xlim=None, ylim=None, xscale='linear',yscale='linear',fmts=('-','m--','g-.','r:'),figsize=(3.5,2.5),axes=None):\n","    def has_one_axis(X):\n","        return(hasattr(X,'ndim') and X.ndim == 1 or isinstance(X,list) and not hasattr(X[0],\"__len__\"))\n","    if has_one_axis(X): X=[X]\n","    if Y is None:\n","        X,Y=[[]]*len(X),X\n","    elif has_one_axis(Y):\n","        Y=[Y]\n","    if len(X) != len(Y):\n","        X=X*len(Y)\n","    set_figsize(figsize)\n","    if axes is None:\n","        axes=plt.gca()\n","    axes.cla()\n","    for x,y,fmt in zip (X,Y,fmts):\n","        axes.plot(x,y,fmt) if len(x) else axes.plot(y,fmt)\n","    set_axes(axes,xlabel,ylabel,xlim,ylim,xscale,yscale,legend)\n","\n","class HyperParameters:\n","    \"\"\"The base class of hyperparameters.\"\"\"\n","    def save_hyperparameters(self, ignore=[]):\n","        \"\"\"Defined in :numref:`sec_oo-design`\"\"\"\n","        raise NotImplemented\n","\n","    def save_hyperparameters(self, ignore=[]):\n","        \"\"\"Save function arguments into class attributes.\n","\n","        Defined in :numref:`sec_utils`\"\"\"\n","        frame = inspect.currentframe().f_back\n","        _, _, _, local_vars = inspect.getargvalues(frame)\n","        self.hparams = {k:v for k, v in local_vars.items()\n","                        if k not in set(ignore+['self']) and not k.startswith('_')}\n","        for k, v in self.hparams.items():\n","            setattr(self, k, v)\n","\n","class ProgressBoard(HyperParameters):\n","    \"\"\"The board that plots data points in animation.\n","\n","    Defined in :numref:`sec_oo-design`\"\"\"\n","    def __init__(self, xlabel=None, ylabel=None, xlim=None,\n","                 ylim=None, xscale='linear', yscale='linear',\n","                 ls=['-', '--', '-.', ':'], colors=['C0', 'C1', 'C2', 'C3'],\n","                 fig=None, axes=None, figsize=(3.5, 2.5), display=True):\n","        self.save_hyperparameters()\n","\n","    def draw(self, x, y, label, every_n=1):\n","        raise NotImplemented\n","\n","    def draw(self, x, y, label, every_n=1):\n","        \"\"\"Defined in :numref:`sec_utils`\"\"\"\n","        Point = collections.namedtuple('Point', ['x', 'y'])\n","        if not hasattr(self, 'raw_points'):\n","            self.raw_points = collections.OrderedDict()\n","            self.data = collections.OrderedDict()\n","        if label not in self.raw_points:\n","            self.raw_points[label] = []\n","            self.data[label] = []\n","        points = self.raw_points[label]\n","        line = self.data[label]\n","        points.append(Point(x, y))\n","        if len(points) != every_n:\n","            return\n","        mean = lambda x: sum(x) / len(x)\n","        line.append(Point(mean([p.x for p in points]),\n","                          mean([p.y for p in points])))\n","        points.clear()\n","        if not self.display:\n","            return\n","        use_svg_display()\n","        if self.fig is None:\n","            self.fig = plt.figure(figsize=self.figsize)\n","        plt_lines, labels = [], []\n","        for (k, v), ls, color in zip(self.data.items(), self.ls, self.colors):\n","            plt_lines.append(plt.plot([p.x for p in v], [p.y for p in v],\n","                                          linestyle=ls, color=color)[0])\n","            labels.append(k)\n","        axes = self.axes if self.axes else plt.gca()\n","        if self.xlim: axes.set_xlim(self.xlim)\n","        if self.ylim: axes.set_ylim(self.ylim)\n","        if not self.xlabel: self.xlabel = self.x\n","        axes.set_xlabel(self.xlabel)\n","        axes.set_ylabel(self.ylabel)\n","        axes.set_xscale(self.xscale)\n","        axes.set_yscale(self.yscale)\n","        axes.legend(plt_lines, labels)\n","        display.display(self.fig)\n","        display.clear_output(wait=True)\n"],"metadata":{"id":"8GmBXFpg9P5O","executionInfo":{"status":"ok","timestamp":1753417329432,"user_tz":-420,"elapsed":2,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":230,"outputs":[]},{"cell_type":"code","source":["class Module(nn.Module, HyperParameters):\n","    def __init__(self,plot_train_per_epoch=2, plot_valid_per_epoch=1):\n","        super().__init__()\n","        self.save_hyperparameters()\n","        self.board= ProgressBoard()\n","    def squared_loss(self,y_hat,y):\n","        return(y_hat-y.reshape(y_hat.shape))**2/2\n","    def forward(self, X):\n","        assert hasattr(self, 'net'), 'Neural Network is defined'\n","        return self.net(X)\n","    def plot(self, key, value, train):\n","        assert hasattr(self,'trainer'), 'Trainer is not inited'\n","        self.board.xlabel='epoch'\n","        if train:\n","            x= self.trainer.train_batch_idx / \\\n","                self.trainer.num_train_batches\n","            n=self.trainer.num_train_batches / \\\n","                self.plot_train_per_epoch\n","        else:\n","            x=self.trainer.epoch+1\n","            n=self.trainer.num_val_batches / \\\n","                self.plot_valid_per_epoch\n","        if isinstance(value, int):\n","            value=torch.tensor(value)\n","        self.board.draw(x,value.to('cpu').detach().numpy(), ('train_' if train else 'val_')+key, every_n=int(n))\n","\n","    def training_step(self, batch):\n","        l=self.loss(self(*batch[:-1]), batch[-1])\n","        self.plot('loss', l, train=True)\n","        return l\n","    def validation_step(self,batch):\n","        l=self.loss(self(*batch[:-1]), batch[-1])\n","        self.plot('loss', l, train=False)\n","    def configure_optimizers(self):\n","        return torch.optim.SGD(self.parameters(),lr=self.lr)\n","    def  apply_init(self, inputs, init=None):\n","        self.forward(inputs)\n","        if init is not None:\n","            self.net.apply(init)"],"metadata":{"id":"FiKOFkVk9JfV","executionInfo":{"status":"ok","timestamp":1753417329435,"user_tz":-420,"elapsed":1,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":231,"outputs":[]},{"cell_type":"code","source":["class DataModule(HyperParameters):\n","    def __init__(self, root='./data', num_workers=4):\n","        self.save_hyperparameters()\n","    def get_dataloader(self,train):\n","        i=slice(0,self.num_train) if train else slice(self.num_train, None)\n","        return self.get_tensorloader((self.X, self.y), train, i)\n","    def train_dataloader(self):\n","        return self.get_dataloader(train=True)\n","    def val_dataloader(self):\n","        return self.get_dataloader(train=False)\n","    def get_tensorloader(self, tensors, train, indices=slice(0, None)):\n","        tensors = tuple(a[indices] for a in tensors)\n","        dataset = torch.utils.data.TensorDataset(*tensors)\n","        return torch.utils.data.DataLoader(dataset, self.batch_size, shuffle=train)\n"],"metadata":{"id":"mYec5ZP09pgm","executionInfo":{"status":"ok","timestamp":1753417329437,"user_tz":-420,"elapsed":1,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":232,"outputs":[]},{"cell_type":"code","source":["def gpu(i=0):\n","    return torch.device(f'cuda:{i}')\n","def num_gpus():\n","    return torch.cuda.device_count()\n","class Trainer(HyperParameters):\n","    def __init__(self, max_epochs, num_gpus_arg=0, gradient_clip_val=0):\n","        self.save_hyperparameters()\n","        self.gpus=[gpu(i) for i in range(min(num_gpus_arg, num_gpus()))]\n","    def prepare_data(self,data):\n","        self.train_dataloader=data.train_dataloader()\n","        self.val_dataloader=data.val_dataloader()\n","        self.num_train_batches=len(self.train_dataloader)\n","        self.num_val_batches=(len(self.val_dataloader) if self.val_dataloader is not None else 0)\n","    def prepare_model(self,model):\n","        model.trainer=self\n","        model.board.xlim=[0,self.max_epochs]\n","        if self.gpus:\n","            model.to(self.gpus[0])\n","        self.model=model\n","    def fit(self,model,data):\n","        self.prepare_data(data)\n","        self.prepare_model(model)\n","        self.optim=model.configure_optimizers()\n","        self.epoch=0\n","        self.train_batch_idx=0\n","        self.val_batch_idx=0\n","        for self.epoch in range(self.max_epochs):\n","            self.fit_epoch()\n","    def fit_epoch(self):\n","        self.model.train()\n","        for batch in self.train_dataloader:\n","            loss = self.model.training_step(self.prepare_batch(batch))\n","            self.optim.zero_grad()\n","            with torch.no_grad():\n","                loss.backward()\n","                if self.gradient_clip_val > 0: # To be discussed later\n","                    self.clip_gradients(self.gradient_clip_val, self.model)\n","                self.optim.step()\n","            self.train_batch_idx += 1\n","        if self.val_dataloader is None:\n","            return\n","        self.model.eval()\n","        for batch in self.val_dataloader:\n","            with torch.no_grad():\n","                self.model.validation_step(self.prepare_batch(batch))\n","            self.val_batch_idx += 1\n","    def prepare_batch(self,batch):\n","        if self.gpus:\n","            batch=[a.to(self.gpus[0]) for a in batch]\n","        return batch\n","    def clip_gradients(self, grad_clip_val, model):\n","        params = [p for p in model.parameters() if p.requires_grad]\n","        norm = torch.sqrt(sum(torch.sum((p.grad ** 2)) for p in params))\n","        if norm > grad_clip_val:\n","            for param in params:\n","                param.grad[:] *= grad_clip_val / norm\n","\n"],"metadata":{"id":"phu0SHYu9z9g","executionInfo":{"status":"ok","timestamp":1753417329440,"user_tz":-420,"elapsed":1,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":233,"outputs":[]},{"cell_type":"code","source":["class Classifier(Module):\n","    def validation_step(self, batch):\n","        Y_hat = self(*batch[:-1])\n","        self.plot('loss', self.loss(Y_hat, batch[-1]), train=False)\n","        self.plot('acc', self.accuracy(Y_hat, batch[-1]), train=False)\n","    def accuracy(Self, Y_hat, Y, averaged=True):\n","        Y_hat= Y_hat.reshape((-1, Y_hat.shape[-1]))\n","        preds=Y_hat.argmax(axis=1).type(Y.dtype)\n","        compare=(preds==Y.reshape(-1)).type(torch.float32)\n","        return compare.mean() if averaged else compare\n","    def layer_summary(self,X_shape):\n","        X=torch.randn(*X_shape)\n","        for layer in self.net:\n","            X=layer(X)\n","            print(layer.__class__.__name__, 'output shape: \\t', X.shape)"],"metadata":{"id":"LDekJ1vM-Tic","executionInfo":{"status":"ok","timestamp":1753417329442,"user_tz":-420,"elapsed":2,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":234,"outputs":[]},{"cell_type":"code","source":["def download(url, folder='../data', sha1_hash=None):\n","    \"\"\"Download a file to folder and return the local filepath.\"\"\"\n","    if not url.startswith('http'):\n","    # For back compatability\n","        url, sha1_hash = DATA_HUB[url]\n","    os.makedirs(folder, exist_ok=True)\n","    fname = os.path.join(folder, url.split('/')[-1])\n","    # Check if hit cache\n","    if os.path.exists(fname) and sha1_hash:\n","        sha1 = hashlib.sha1()\n","        with open(fname, 'rb') as f:\n","            while True:\n","                data = f.read(1048576)\n","                if not data:\n","                    break\n","            sha1.update(data)\n","        if sha1.hexdigest() == sha1_hash:\n","            return fname\n","    # Download\n","    print(f'Downloading {fname} from {url}...')\n","    r = requests.get(url, stream=True, verify=True)\n","    with open(fname, 'wb') as f:\n","        f.write(r.content)\n","    return fname\n","def extract(filename, folder=None):\n","    \"\"\"Extract a zip/tar file into folder.\"\"\"\n","    base_dir = os.path.dirname(filename)\n","    _, ext = os.path.splitext(filename)\n","    assert ext in ('.zip', '.tar', '.gz'), 'Only support zip/tar files.'\n","    if ext == '.zip':\n","        fp = zipfile.ZipFile(filename, 'r')\n","    else:\n","        fp = tarfile.open(filename, 'r')\n","    if folder is None:\n","        folder = base_dir\n","    fp.extractall(folder)\n","def download_extract(name, folder=None):\n","    fname = download(name)\n","    base_dir = os.path.dirname(fname)\n","    data_dir, ext = os.path.splitext(fname)\n","    if ext == '.zip':\n","        fp = zipfile.ZipFile(fname, 'r')\n","    elif ext in ('.tar', '.gz'):\n","        fp = tarfile.open(fname, 'r')\n","    else:\n","        assert False, 'Only zip/tar files can be extracted.'\n","    fp.extractall(base_dir)\n","    return os.path.join(base_dir, folder) if folder else data_dir"],"metadata":{"id":"9Jx-RXNgk9Zr","executionInfo":{"status":"ok","timestamp":1753417329444,"user_tz":-420,"elapsed":2,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":235,"outputs":[]},{"cell_type":"code","source":["def tokenize(lines, token='word'):\n","    \"\"\"Split text lines into word or character tokens.\"\"\"\n","    assert token in ('word', 'char'), 'Unknown token type: ' + token\n","    return [line.split() if token == 'word' else list(line) for line in lines]"],"metadata":{"id":"YCavajN0B9ph","executionInfo":{"status":"ok","timestamp":1753417329445,"user_tz":-420,"elapsed":2,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":236,"outputs":[]},{"cell_type":"code","source":["# Nhận vào 1 tập token (có thể là list các câu).\n","# Đếm tần suất, giữ lại token theo min_freq + reserved_tokens + '<unk>'.\n","# khai báo một lớp Vocab để quản lý ánh xạ giữa token (từ, ký tự,..) và chỉ số (index)\n","# tokens: danh sách token\n","# min_freq: tần suất tối thiểu để một token được giữ lại trong từ điển\n","# reserved_tokens: danh sách token đặt trước như pad, bos, eos\n","class Vocab:\n","  def __init__(self, tokens=[], min_freq=0, reserved_tokens=[]):\n","    if tokens and isinstance(tokens[0],list):            # nếu token không rỗng và phần tử đầu vào là một list\n","      tokens=[token for line in tokens for token in line]  # lấy từng token trong line (một list token trong tokens) rồi gom lại thành một list phẳng\n","    counter=collections.Counter(tokens)                    # đếm tần suất xuất hiện của từng token, kết quả là một counter mapping token -> số lần xuất hiện\n","    self.token_freqs=sorted(counter.items(), key=lambda x:x[1], reverse=True)  # chuyển các cặp (token, freq) thành một list theo tần suất giảm dần, key là tiêu chí so sánh, ở đây mỗi phần tử x tiêu chí là freq nên x[1], thông thường sorted sắp tăng dần nên phải reversed\n","    # xây danh sách từ chỉ số -> token , unk luôn đầu tiên để gán cho token lạ + reversed_tokens + token thật sự có tần suất >= min_freq\n","    # dùng set để loại bỏ trùng, sorted để chắc chắn thứ tự cố định (theo mã unicode của chuỗi)\n","    self.idx_to_token=list(sorted(set(['<unk>']+reserved_tokens+[token for token, freq in self.token_freqs if freq>=min_freq])))\n","    self.token_to_idx={token:idx for idx, token in enumerate(self.idx_to_token)}  # tạo ngược lại một dict token_to_idx bằng các đánh số 0,1,2,.. trên idx_to_token\n","  def __len__(self):\n","    return len(self.idx_to_token)             # trả về số token trong từ điển\n","  def __getitem__(self,tokens):               # lấy index\n","    if not isinstance(tokens,(list,tuple)):\n","      return self.token_to_idx.get(tokens,self.unk)\n","    return [self.__getitem__(token) for token in tokens]\n","  def to_tokens(self, indices):               # lấy token của index\n","    if hasattr(indices,'__len__') and len(indices)>1:\n","      return [self.idx_to_token[int(index)] for index in indices]\n","    return self.idx_to_token[indices]\n","  @property\n","  def unk(self):\n","    return self.token_to_idx['<unk>']"],"metadata":{"id":"KpFscInsxJZC","executionInfo":{"status":"ok","timestamp":1753417329449,"user_tz":-420,"elapsed":5,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":237,"outputs":[]},{"cell_type":"code","source":["class Encoder(nn.Module):     # nhận về một chuỗi nguồn source, xử lý chuỗi để sinh ra một biểu diễn ẩn lưu thông tin ngữ nghĩa, ngữ cảnh, thứ tự từ,..\n","    def __init__(self):\n","      super().__init__()\n","    def forward(self, X, *args):\n","      raise NotImplemented\n","class Decoder(nn.Module):      # Dựa vào biểu diễn ẩn của encoder cùng với đầu vào lần lượt sinh ra từng token đích target, cập nhật trạng thái nội bộ sau mỗi bước\n","    def __init__(self):\n","      super().__init__()\n","    def init_state(self, enc_outputs, *args):\n","      raise NotImplemented\n","    def forward(self, X, state):\n","      raise NotImplemented\n","class EncoderDecoder(Classifier):\n","  def __init__(self, encoder, decoder):\n","    super().__init__()\n","    self.encoder=encoder\n","    self.decoder=decoder\n","  def forward(self, enc_X, dec_X, *args):  # enc_X: input cho encoder, dec_X: input cho decoder, *args: các tham số phụ trợ\n","    enc_all_outputs=self.encoder(enc_X, *args)      # chạy encoder, thu về outputs\n","    dec_state = self.decoder.init_state(enc_all_outputs, *args)  # dùng init_state của decoder để khởi tạo dec_state, dựa trên output của encode và các tham số bổ sung\n","    return self.decoder(dec_X, dec_state)[0]      # chạy decoder trên toàn bộ input decoder, trả về một tuple (outputs, state), lấy phần outputs\n","  def predict_step(self, batch, device, num_steps, save_attention_weights=False):\n","    batch=[a.to(device) for a in batch]\n","    src, tgt, src_valid_len, _= batch   # giải nén source, terget, độ dài thực không tính padding\n","    self.encoder.to(device)\n","    self.decoder.to(device)\n","    enc_all_outputs=self.encoder(src, src_valid_len)   # chạy encoder với source và độ dài thực\n","    dec_state=self.decoder.init_state(enc_all_outputs, src_valid_len)     # khởi tạo state cho decoder\n","    outputs, attention_weights = [tgt[:, (0)].unsqueeze(1)], []     # tạo danh sách output ban đầu tằng token bos, attention_weights rỗng\n","    for _ in range(num_steps):\n","      Y, dec_state = self.decoder(outputs[-1], dec_state)   # lấy token cuối cùng trong outputs chạy qua decoder cùng dec_state, Y shape (batch, 1, vocab_size), dec_state: state cập nhật\n","      outputs.append(Y.argmax(dim=2))    # lấy chỉ số token có xác suất cao nhất rồi append vào output\n","      if save_attention_weights:\n","        attention_weights.append(self.decoder.attention_weights)   # nếu cần lưu attention weight thì append vào\n","    return torch.cat(outputs[1:], dim=1), attention_weights    # output trả về k có <bos>"],"metadata":{"id":"hYerWL4PoMFN","executionInfo":{"status":"ok","timestamp":1753417329452,"user_tz":-420,"elapsed":5,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":238,"outputs":[]},{"cell_type":"code","source":["class RNN(Module):\n","  def __init__(self, num_inputs, num_hiddens):\n","    super().__init__()\n","    self.save_hyperparameters()\n","    self.rnn=nn.RNN(num_inputs, num_hiddens)\n","  def forward(self, inputs, H=None):\n","    return self.rnn(inputs, H)\n","class GRU(RNN):\n","  def __init__(self, num_inputs, num_hiddens, num_layers, dropout=0):\n","    Module.__init__(self)\n","    self.save_hyperparameters()\n","    self.rnn = nn.GRU(num_inputs, num_hiddens, num_layers,\n","    dropout=dropout)\n"],"metadata":{"id":"3UsY-u0SLZfu","executionInfo":{"status":"ok","timestamp":1753417329455,"user_tz":-420,"elapsed":2,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":239,"outputs":[]},{"cell_type":"code","source":["def masked_softmax(X, valid_lens):\n","    def _sequence_mask(X, valid_len, value=0):\n","        maxlen = X.size(1)\n","        mask = torch.arange((maxlen), dtype=torch.float32,\n","                            device=X.device)[None, :] < valid_len[:, None]\n","        X[~mask] = value\n","        return X\n","    if valid_lens is None:\n","        return nn.functional.softmax(X, dim=-1)\n","    else:\n","        shape = X.shape\n","        if valid_lens.dim() == 1:\n","            valid_lens = torch.repeat_interleave(valid_lens, shape[1])\n","        else:\n","            valid_lens = valid_lens.reshape(-1)\n","        X = _sequence_mask(X.reshape(-1, shape[-1]), valid_lens, value=-1e6)\n","        return nn.functional.softmax(X.reshape(shape), dim=-1)"],"metadata":{"id":"uPgqQXf5XLTI","executionInfo":{"status":"ok","timestamp":1753417329458,"user_tz":-420,"elapsed":2,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":240,"outputs":[]},{"cell_type":"code","source":["def show_heatmaps(matrices, xlabel, ylabel, titles=None, figsize=(2.5, 2.5), cmap='Reds'):\n","    use_svg_display()\n","    num_rows, num_cols, _, _ =matrices.shape\n","    fig, axes = plt.subplots(num_rows, num_cols, figsize=figsize,\n","                             sharex=True, sharey=True, squeeze=False)\n","    for i, (row_axes, row_matrices) in enumerate(zip(axes, matrices)):\n","        for j, (ax, matrix) in enumerate(zip(row_axes, row_matrices)):\n","            pcm = ax.imshow(matrix.detach().numpy(), cmap=cmap)\n","            if i == num_rows - 1:\n","                ax.set_xlabel(xlabel)\n","            if j == 0:\n","                ax.set_ylabel(ylabel)\n","            if titles:\n","                ax.set_title(titles[j])\n","    fig.colorbar(pcm, ax=axes, shrink=0.6);"],"metadata":{"id":"AWrkXT0Qi9cf","executionInfo":{"status":"ok","timestamp":1753417329460,"user_tz":-420,"elapsed":3,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":241,"outputs":[]},{"cell_type":"markdown","source":["**Query** là câu hỏi mà decoder hoặc bất cứ thành phần nào cần attention đặt ra khi muốn thu thập thông tin, ví dụ trong seq2seq decoder dùng embedding của token vừa sinh ra để làm quẻy, hỏi xem trong toàn bộ đầu ra của encoder chỗ nào quan trọng nhất cho bước này.  (hidden states của decoder)\\\n","\\\n","**Key** là từ khóa đại diện cho từng vị trí trong dãy nguồn (encoder outputs), mỗi key mô tả nội dung của một vị trí encoder ở không gian mà ta có thể so sánh với query. (hidden states của encoder) \\\n","\\\n","**Value** là giá trị tương ứng của mỗi key, chính là thông tin mà ta muốn lấy ra cuối cùng, khi attention quyết định vị trí nào quan trọng (qua scores giữa Q và K) nó sẽ dùng V tương ứng để tạo ra context vector. (encoder outputs)\n"],"metadata":{"id":"Q-ImEHzJgeFb"}},{"cell_type":"code","source":["# score giữa mỗi cặp Q-K được tính bằng cộng tuyến tính và tanh\n","class AdditiveAttention(nn.Module):\n","    def __init__(self, num_hiddens, dropout, **kwargs):\n","        super(AdditiveAttention, self).__init__(**kwargs)\n","        self.W_k = nn.LazyLinear(num_hiddens, bias=False)\n","        self.W_q = nn.LazyLinear(num_hiddens, bias=False)\n","        self.w_v = nn.LazyLinear(1, bias=False)\n","        self.dropout = nn.Dropout(dropout)\n","    def forward(self, queries, keys, values, valid_lens):\n","        queries, keys = self.W_q(queries), self.W_k(keys)      # áp 2 tầng linear để chiếu quẻies và keys về cùng chiều ẩn\n","        features = queries.unsqueeze(2) + keys.unsqueeze(1)\n","        features = torch.tanh(features)          # vector features\n","        scores = self.w_v(features).squeeze(-1)    # chiếu xuống scalar score bằng w_v\n","        self.attention_weights = masked_softmax(scores, valid_lens)   # phân phối xác suất attention\n","        return torch.bmm(self.dropout(self.attention_weights), values)   # kết hợp values theo phân phối attention qua batch matrix multiplication -> output context vectors\n"],"metadata":{"id":"u33rhNz9UJlM","executionInfo":{"status":"ok","timestamp":1753417329461,"user_tz":-420,"elapsed":2,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":242,"outputs":[]},{"cell_type":"code","source":["class DotProductAttention(nn.Module):\n","    def __init__(self, dropout):\n","        super().__init__()\n","        self.dropout = nn.Dropout(dropout)\n","    def forward(self, queries, keys, values, valid_lens=None):\n","        d = queries.shape[-1]\n","        scores = torch.bmm(queries, keys.transpose(1,2)) / math.sqrt(d)\n","        self.attention_weights = masked_softmax(scores, valid_lens)\n","        return torch.bmm(self.dropout(self.attention_weights), values)"],"metadata":{"id":"wB6wvnEW0Dho","executionInfo":{"status":"ok","timestamp":1753417329462,"user_tz":-420,"elapsed":2,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":243,"outputs":[]},{"cell_type":"code","source":["class MultiHeadAttention(nn.Module):\n","    def __init__(self, num_hiddens, num_heads, dropout, bias=False, **kwargs):\n","        super().__init__()\n","        self.num_heads = num_heads\n","        self.attention = DotProductAttention(dropout)\n","        self.W_q = nn.LazyLinear(num_hiddens, bias=bias)\n","        self.W_k = nn.LazyLinear(num_hiddens, bias=bias)\n","        self.W_v = nn.LazyLinear(num_hiddens, bias=bias)\n","        self.W_o = nn.LazyLinear(num_hiddens, bias=bias)\n","    def forward(self, queries, keys, values, valid_lens):\n","        queries = self.transpose_qkv(self.W_q(queries))\n","        keys = self.transpose_qkv(self.W_k(keys))\n","        values = self.transpose_qkv(self.W_v(values))\n","        if valid_lens is not None:\n","            valid_lens = torch.repeat_interleave(\n","                valid_lens, repeats=self.num_heads, dim=0)\n","        output = self.attention(queries, keys, values, valid_lens)\n","        output_concat = self.transpose_output(output)\n","        return self.W_o(output_concat)\n","    def transpose_qkv(self, X):\n","        X = X.reshape(X.shape[0], X.shape[1], self.num_heads, -1)\n","        X = X.permute(0, 2, 1, 3)\n","        return X.reshape(-1, X.shape[2], X.shape[3])\n","    def transpose_output(self, X):\n","        X = X.reshape(-1, self.num_heads, X.shape[1], X.shape[2])\n","        X = X.permute(0, 2, 1, 3)\n","        return X.reshape(X.shape[0], X.shape[1], -1)\n"],"metadata":{"id":"k-ro4D0WT1xt","executionInfo":{"status":"ok","timestamp":1753417329463,"user_tz":-420,"elapsed":1,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":244,"outputs":[]},{"cell_type":"code","source":["import math"],"metadata":{"id":"g0mx5GniClS4","executionInfo":{"status":"ok","timestamp":1753417329466,"user_tz":-420,"elapsed":1,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":245,"outputs":[]},{"cell_type":"code","source":["def cpu():\n","  \"\"\"Get the CPU device.\"\"\"\n","  return torch.device('cpu')\n","def try_gpu(i=0):\n","  if num_gpus() >= i + 1:\n","    return gpu(i)\n","  return cpu()\n","def try_all_gpus():\n","    return [gpu(i) for i in range(num_gpus())]"],"metadata":{"id":"A0rlJZjJDSsD","executionInfo":{"status":"ok","timestamp":1753417329469,"user_tz":-420,"elapsed":2,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":246,"outputs":[]},{"cell_type":"code","source":["class PositionalEncoding(nn.Module):\n","    def __init__(self, num_hiddens, dropout, max_len=1000):\n","        super().__init__()\n","        self.dropout = nn.Dropout(dropout)\n","        self.P = torch.zeros((1, max_len, num_hiddens))\n","        X = torch.arange(max_len, dtype=torch.float32).reshape(\n","            -1, 1) / torch.pow(10000, torch.arange(\n","                0, num_hiddens, 2, dtype=torch.float32)/num_hiddens)\n","        self.P[:, :, 0 ::2]=torch.sin(X)\n","        self.P[:, :, 1 ::2]=torch.cos(X)\n","    def forward(self, X):\n","        X = X + self.P[:, :X.shape[1], :].to(X.device)\n","        return self.dropout(X)"],"metadata":{"id":"fDuvpUjHilET","executionInfo":{"status":"ok","timestamp":1753417329472,"user_tz":-420,"elapsed":2,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":247,"outputs":[]},{"cell_type":"code","source":["class PositionwiseFFN(nn.Module):\n","  def __init__(self, ffn_num_hiddens,ffn_num_outputs):\n","    super().__init__()\n","    self.dense1=nn.LazyLinear(ffn_num_hiddens)\n","    self.relu=nn.ReLU()\n","    self.dense2=nn.LazyLinear(ffn_num_outputs)\n","  def forward(self, X):\n","    return self.dense2(self.relu(self.dense1(X)))"],"metadata":{"id":"RGV2U4t1I8Qa","executionInfo":{"status":"ok","timestamp":1753417329473,"user_tz":-420,"elapsed":2,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":248,"outputs":[]},{"cell_type":"code","source":["class AddNorm(nn.Module):\n","  def __init__(self, norm_shape, dropout):\n","    super().__init__()\n","    self.dropout=nn.Dropout(dropout)\n","    self.ln=nn.LayerNorm(norm_shape)\n","  def forward(self, X, Y):\n","    return self.ln(self.dropout(Y)+X)"],"metadata":{"id":"r3mHVpTyJkOb","executionInfo":{"status":"ok","timestamp":1753417329474,"user_tz":-420,"elapsed":1,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":249,"outputs":[]},{"cell_type":"code","source":["class TransformerEncoderBlock(nn.Module):\n","  def __init__(self, num_hiddens, ffn_num_hiddens, num_heads, dropout, use_bias=False):\n","    super().__init__()\n","    self.attention=MultiHeadAttention(num_hiddens, num_heads, dropout, use_bias)\n","    self.addnorm1=AddNorm(num_hiddens, dropout)\n","    self.ffn=PositionwiseFFN(ffn_num_hiddens, num_hiddens)\n","    self.addnorm2=AddNorm(num_hiddens, dropout)\n","  def forward(self, X, valid_lens):\n","    Y=self.addnorm1(X, self.attention(X, X, X, valid_lens))\n","    return self.addnorm2(Y, self.ffn(Y))\n"],"metadata":{"id":"HqiAxAJhyAkD","executionInfo":{"status":"ok","timestamp":1753417329478,"user_tz":-420,"elapsed":3,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":250,"outputs":[]},{"cell_type":"code","source":["from pickle import decode_long\n","class TransformerDecoderBlock(nn.Module):\n","    def __init__(self, num_hiddens, ffn_num_hiddens, num_heads, dropout, i):\n","        super().__init__()\n","        self.i=i\n","        self.attention1=MultiHeadAttention(num_hiddens, num_heads, dropout)\n","        self.addnorm1=AddNorm(num_hiddens, dropout)\n","        self.attention2=MultiHeadAttention(num_hiddens, num_heads, dropout)\n","        self.addnorm2=AddNorm(num_hiddens, dropout)\n","        self.ffn=PositionwiseFFN(ffn_num_hiddens, num_hiddens)\n","        self.addnorm3=AddNorm(num_hiddens, dropout)\n","    def forward(self, X, state):\n","        enc_outputs, enc_valid_lens = state[0], state[1]\n","        if state[2][self.i] is None:\n","          key_values=X\n","        else:\n","          key_values=torch.cat((state[2][self.i], X), dim=1)\n","        state[2][self.i] = key_values\n","        if self.training:\n","          batch_size, num_steps, _ =X.shape\n","          dec_valid_lens=torch.arange(1, num_steps+1, device=X.device).repeat(batch_size, 1)\n","        else:\n","          dec_valid_lens=None\n","        X2=self.attention1(X, key_values, key_values, dec_valid_lens)\n","        Y=self.addnorm1(X, X2)\n","        Y2=self.attention2(Y, enc_outputs, enc_outputs, enc_valid_lens)\n","        Z=self.addnorm2(Y, Y2)\n","        return self.addnorm3(Z, self.ffn(Z)), state"],"metadata":{"id":"3jh4yF4OoZCg","executionInfo":{"status":"ok","timestamp":1753417329478,"user_tz":-420,"elapsed":2,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":251,"outputs":[]},{"cell_type":"markdown","source":["Pretraining Tasks"],"metadata":{"id":"Pw2FUh-ET4bS"}},{"cell_type":"code","source":["class TokenEmbedding:  # tải embedding từ file, truy xuất idx to token và ngược lại\n","    def __init__(self, embedding_name):\n","      self.idx_to_token, self.idx_to_vec = self._load_embedding(embedding_name)\n","      self.unknown_idx = 0\n","      self.token_to_idx = {token: idx for idx, token in enumerate(self.idx_to_token)}\n","    def _load_embedding(self, embedding_name):\n","      idx_to_token, idx_to_vec = ['<unk>'], []\n","      data_dir = download_extract(embedding_name)\n","      with open(os.path.join(data_dir, 'vec.txt'), 'r') as f:\n","          for line in f:\n","              elems = line.rstrip().split(' ')\n","              token, elems = elems[0], [float(elem) for elem in elems[1:]]\n","              if len(elems) > 1:\n","                  idx_to_token.append(token)\n","                  idx_to_vec.append(elems)\n","      idx_to_vec = [[0]*len(idx_to_vec[0])] + idx_to_vec\n","      return idx_to_token, torch.tensor(idx_to_vec)\n","    def __getitem__(self, tokens):\n","      indices = [self.token_to_idx.get(token, self.unknown_idx) for token in tokens]\n","      vecs = self.idx_to_vec[torch.tensor(indices)]\n","      return vecs\n","    def __len__(self):\n","      return len(self.idx_to_token)"],"metadata":{"id":"W_3kIC-0olJC","executionInfo":{"status":"ok","timestamp":1753417329480,"user_tz":-420,"elapsed":1,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":252,"outputs":[]},{"cell_type":"code","source":["def get_tokens_and_segments(tokens_a, tokens_b=None):   # chuẩn bị đầu vào với định dạng gồm các token và các segment IDs\n","    tokens = ['<cls>']+ tokens_a +['<sep>']             # định dạng nếu 1 sequence\n","    segments = [0]* (len(tokens_a)+2)                   # eA\n","    if tokens_b is not None:\n","        tokens += tokens_b + ['<sep>']                  # định dạng nếu 2 sequences\n","        segments += [1] * (len(tokens_b)+1)             # eB\n","    return tokens, segments"],"metadata":{"id":"jXa0n_IJor-7","executionInfo":{"status":"ok","timestamp":1753417329483,"user_tz":-420,"elapsed":2,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":253,"outputs":[]},{"cell_type":"code","source":["class BERTEncoder(nn.Module):\n","    def __init__(self, vocab_size, num_hiddens, ffn_num_hiddens, num_heads, num_blks, dropout, max_len = 1000, **kwargs):\n","        super(BERTEncoder, self).__init__(**kwargs)\n","        self.token_embedding = nn.Embedding(vocab_size, num_hiddens)     # Embedding cho từ\n","        self.segment_embedding = nn.Embedding(2, num_hiddens)            # EMbedding cho segment ID (0 hoặc 1)\n","        self.blks = nn.Sequential()\n","        for i in range(num_blks):\n","            self.blks.add_module(f\"{i}\", TransformerEncoderBlock(num_hiddens, ffn_num_hiddens, num_heads, dropout, True))\n","        self.pos_embedding = nn.Parameter(torch.rand(1, max_len, num_hiddens))    # learnable positional embedding\n","    def forward(self, tokens, segments, valid_lens):\n","        X = self.token_embedding(tokens) + self.segment_embedding(segments)       # tính embedding tổng hợp từ từ và segment\n","        X = X + self.pos_embedding[:, :X.shape[1], :]                             # thêm postional embedding theo độ dài thực tế của chuỗi\n","        for blk in self.blks:                                                     # áp dụng các encoder block\n","            X = blk(X, valid_lens)\n","        return X                                                                  # kết quả cuối cùng của encoder: [batch_size, seq_len, num_hiddens]"],"metadata":{"id":"tbkPxhtkouMr","executionInfo":{"status":"ok","timestamp":1753417329486,"user_tz":-420,"elapsed":2,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":254,"outputs":[]},{"cell_type":"code","source":["class MaskLM(nn.Module):\n","    def __init__(self, vocab_size, num_hiddens, **kwargs):\n","        super(MaskLM, self).__init__(**kwargs)\n","        self.mlp = nn.Sequential(nn.LazyLinear(num_hiddens),\n","                                 nn.ReLU(),\n","                                 nn.LayerNorm(num_hiddens),\n","                                 nn.LazyLinear(vocab_size))\n","    def forward(self, X, pred_positions):          # X là input, pred_positions là vị trí bị mask\n","        num_pred_positions = pred_positions.shape[1]   # số lượng vị trí cần mask\n","        pred_positions = pred_positions.reshape(-1)    # chuyển về vector 1 chiều để dễ index\n","        batch_size = X.shape[0]                        # lưu lại kích thước batch\n","        batch_idx = torch.arange(0, batch_size)        # tạo tensor đại diện cho index của từng mẫu trong batch\n","        batch_idx = torch.repeat_interleave(batch_idx, num_pred_positions)    # lặp lại mỗi chỉ số num_pred_positions lần để phù hợp với chiều dài pred_positions\n","        masked_X = X[batch_idx, pred_positions]            # trích xuất embedding các token bị che tại những vị trí chỉ định\n","        masked_X = masked_X.reshape((batch_size, num_pred_positions, -1))   # reshape rồi đưa qua mlp\n","        mlm_Y_hat = self.mlp(masked_X)\n","        return mlm_Y_hat                                                    # logits chưa qua softmax"],"metadata":{"id":"sM4vz-NtovLl","executionInfo":{"status":"ok","timestamp":1753417329488,"user_tz":-420,"elapsed":1,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":255,"outputs":[]},{"cell_type":"code","source":["class NextSentencePred(nn.Module):\n","    \"\"\"The next sentence prediction task of BERT.\"\"\"\n","    def __init__(self, **kwargs):\n","        super(NextSentencePred, self).__init__(**kwargs)\n","        self.output = nn.LazyLinear(2)\n","    def forward(self, X):\n","        # `X` shape: (batch size, `num_hiddens`)\n","        return self.output(X)\n"],"metadata":{"id":"OkFZPBn1EZND","executionInfo":{"status":"ok","timestamp":1753417329490,"user_tz":-420,"elapsed":1,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":256,"outputs":[]},{"cell_type":"code","source":["class BERTModel(nn.Module):\n","    \"\"\"The BERT model.\"\"\"\n","    def __init__(self, vocab_size, num_hiddens, ffn_num_hiddens, num_heads, num_blks, dropout, max_len=1000):\n","        super(BERTModel, self).__init__()\n","        self.encoder = BERTEncoder(vocab_size, num_hiddens, ffn_num_hiddens, num_heads, num_blks, dropout, max_len=max_len)\n","        self.hidden = nn.Sequential(nn.LazyLinear(num_hiddens), nn.Tanh())\n","        self.mlm = MaskLM(vocab_size, num_hiddens)\n","        self.nsp = NextSentencePred()\n","    def forward(self, tokens, segments, valid_lens=None, pred_positions=None):\n","        encoded_X = self.encoder(tokens, segments, valid_lens)\n","        if pred_positions is not None:\n","            mlm_Y_hat = self.mlm(encoded_X, pred_positions)\n","        else:\n","            mlm_Y_hat = None\n","        # The hidden layer of the MLP classifier for next sentence prediction.\n","        # 0 is the index of the '<cls>' token\n","        nsp_Y_hat = self.nsp(self.hidden(encoded_X[:, 0, :]))\n","        return encoded_X, mlm_Y_hat, nsp_Y_hat"],"metadata":{"id":"6EpjbcwWEL9T","executionInfo":{"status":"ok","timestamp":1753417329491,"user_tz":-420,"elapsed":0,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":257,"outputs":[]},{"cell_type":"markdown","source":["Dataset for Pretraining BERT"],"metadata":{"id":"O3Dg2feJUN2B"}},{"cell_type":"code","source":["def _read_wiki(data_dir):\n","    file_name = os.path.join(data_dir, 'wiki.train.tokens')\n","    with open(file_name, 'r') as f:\n","        lines = f.readlines()\n","    # Uppercase letters are converted to lowercase ones\n","    paragraphs = [line.strip().lower().split(' . ') for line in lines if len(line.split(' . ')) >= 2]\n","    random.shuffle(paragraphs)\n","    return paragraphs"],"metadata":{"id":"XGadsl5ypUp7","executionInfo":{"status":"ok","timestamp":1753417329493,"user_tz":-420,"elapsed":1,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":258,"outputs":[]},{"cell_type":"markdown","source":["Generate training examples for binary classification task"],"metadata":{"id":"GazZxa7AUX5j"}},{"cell_type":"code","source":["def _get_next_sentence(sentence, next_sentence, paragraphs):\n","    if random.random() < 0.5:\n","        is_next = True\n","    else:\n","        # `paragraphs` is a list of lists of lists\n","        next_sentence = random.choice(random.choice(paragraphs))\n","        is_next = False\n","    return sentence, next_sentence, is_next"],"metadata":{"id":"lKGnb11BpdWM","executionInfo":{"status":"ok","timestamp":1753417329495,"user_tz":-420,"elapsed":1,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":259,"outputs":[]},{"cell_type":"code","source":["def _get_nsp_data_from_paragraph(paragraph, paragraphs, vocab, max_len):\n","    nsp_data_from_paragraph = []\n","    for i in range(len(paragraph) - 1):\n","        tokens_a, tokens_b, is_next = _get_next_sentence(paragraph[i], paragraph[i + 1], paragraphs)\n","        # Consider 1 '<cls>' token and 2 '<sep>' tokens\n","        if len(tokens_a) + len(tokens_b) + 3 > max_len:\n","            continue\n","        tokens, segments = get_tokens_and_segments(tokens_a, tokens_b)\n","        nsp_data_from_paragraph.append((tokens, segments, is_next))\n","    return nsp_data_from_paragraph"],"metadata":{"id":"0Cu_i225ph69","executionInfo":{"status":"ok","timestamp":1753417329498,"user_tz":-420,"elapsed":2,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":260,"outputs":[]},{"cell_type":"markdown","source":["Generate training examples for masked language modeling task"],"metadata":{"id":"Jio15blCUneH"}},{"cell_type":"code","source":["def _replace_mlm_tokens(tokens, candidate_pred_positions, num_mlm_preds,\n","vocab):\n","    # For the input of a masked language model, make a new copy of tokens and\n","    # replace some of them by '<mask>' or random tokens\n","    mlm_input_tokens = [token for token in tokens]\n","    pred_positions_and_labels = []\n","    # Shuffle for getting 15% random tokens for prediction in the masked\n","    # language modeling task\n","    random.shuffle(candidate_pred_positions)\n","    for mlm_pred_position in candidate_pred_positions:\n","        if len(pred_positions_and_labels) >= num_mlm_preds:\n","            break\n","        masked_token = None\n","        # 80% of the time: replace the word with the '<mask>' token\n","        if random.random() < 0.8:\n","            masked_token = '<mask>'\n","        else:\n","            # 10% of the time: keep the word unchanged\n","            if random.random() < 0.5:\n","                masked_token = tokens[mlm_pred_position]\n","            # 10% of the time: replace the word with a random word\n","            else:\n","                masked_token = random.choice(vocab.idx_to_token)\n","        mlm_input_tokens[mlm_pred_position] = masked_token\n","        pred_positions_and_labels.append((mlm_pred_position, tokens[mlm_pred_position]))\n","    return mlm_input_tokens, pred_positions_and_labels\n"],"metadata":{"id":"8JfNkP_dpvsh","executionInfo":{"status":"ok","timestamp":1753417329501,"user_tz":-420,"elapsed":4,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":261,"outputs":[]},{"cell_type":"code","source":["def _get_mlm_data_from_tokens(tokens, vocab):\n","    candidate_pred_positions = []\n","    # `tokens` is a list of strings\n","    for i, token in enumerate(tokens):\n","        if token in ['<cls>', '<sep>']:\n","            continue\n","        candidate_pred_positions.append(i)\n","    # 15% of random tokens are predicted in the masked language modeling task\n","    num_mlm_preds = max(1, round(len(tokens) * 0.15))\n","    mlm_input_tokens, pred_positions_and_labels = _replace_mlm_tokens(tokens, candidate_pred_positions, num_mlm_preds, vocab)\n","    pred_positions_and_labels = sorted(pred_positions_and_labels, key=lambda x: x[0])\n","    pred_positions = [v[0] for v in pred_positions_and_labels]   # chỉ số vị trí trong câu\n","    mlm_pred_labels = [v[1] for v in pred_positions_and_labels]  # token gốc\n","    return vocab[mlm_input_tokens], pred_positions, vocab[mlm_pred_labels]\n"],"metadata":{"id":"mwtphdIXqDCC","executionInfo":{"status":"ok","timestamp":1753417329506,"user_tz":-420,"elapsed":1,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":262,"outputs":[]},{"cell_type":"markdown","source":["Transforming Text into the Pretraining Dataset"],"metadata":{"id":"sxOEto4bUygV"}},{"cell_type":"code","source":["def _pad_bert_inputs(examples, max_len, vocab):    # chuẩn hóa đầu vào, fixed length\n","    max_num_mlm_preds = round(max_len * 0.15)      # số vị trí dự đoán mlm tối đa\n","    all_token_ids, all_segments, valid_lens, = [], [], []\n","    all_pred_positions, all_mlm_weights, all_mlm_labels = [], [], []\n","    nsp_labels = []\n","    for (token_ids, pred_positions, mlm_pred_label_ids, segments, is_next) in examples:\n","        all_token_ids.append(torch.tensor(token_ids + [vocab['<pad>']] * (max_len - len(token_ids)), dtype=torch.long)) # padding 0 cho id\n","        all_segments.append(torch.tensor(segments + [0] * (max_len - len(segments)), dtype=torch.long))                 # padding cho segment\n","        # `valid_lens` excludes count of '<pad>' tokens\n","        valid_lens.append(torch.tensor(len(token_ids), dtype=torch.float32))       # lưu lại dộ dài thực\n","        all_pred_positions.append(torch.tensor(pred_positions + [0] * (max_num_mlm_preds - len(pred_positions)), dtype=torch.long))  # padding cho vị trí dự đoán\n","        # Predictions of padded tokens will be filtered out in the loss via\n","        # multiplication of 0 weights\n","        all_mlm_weights.append(torch.tensor([1.0] * len(mlm_pred_label_ids) + [0.0] * (max_num_mlm_preds - len(pred_positions)), dtype=torch.float32))\n","        all_mlm_labels.append(torch.tensor(mlm_pred_label_ids + [0] * (max_num_mlm_preds - len(mlm_pred_label_ids)), dtype=torch.long))\n","        nsp_labels.append(torch.tensor(is_next, dtype=torch.long))\n","    return (all_token_ids, all_segments, valid_lens, all_pred_positions, all_mlm_weights, all_mlm_labels, nsp_labels)"],"metadata":{"id":"e-h7Dmm-oxFM","executionInfo":{"status":"ok","timestamp":1753417329534,"user_tz":-420,"elapsed":26,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":263,"outputs":[]},{"cell_type":"code","source":["class _WikiTextDataset(torch.utils.data.Dataset):\n","    def __init__(self, paragraphs, max_len):\n","        # Input `paragraphs[i]` is a list of sentence strings representing a\n","        # paragraph; while output `paragraphs[i]` is a list of sentences\n","        # representing a paragraph, where each sentence is a list of tokens\n","        paragraphs = [tokenize(paragraph, token='word') for paragraph in paragraphs]\n","        sentences = [sentence for paragraph in paragraphs for sentence in paragraph]\n","        self.vocab = Vocab(sentences, min_freq=5, reserved_tokens=['<pad>', '<mask>', '<cls>', '<sep>'])\n","        # Get data for the next sentence prediction task\n","        examples = []\n","        for paragraph in paragraphs:\n","            examples.extend(_get_nsp_data_from_paragraph(paragraph, paragraphs, self.vocab, max_len))\n","        # Get data for the masked language model task\n","        examples = [(_get_mlm_data_from_tokens(tokens, self.vocab) + (segments, is_next)) for tokens, segments, is_next in examples]\n","        # Pad inputs\n","        (self.all_token_ids, self.all_segments, self.valid_lens,\n","        self.all_pred_positions, self.all_mlm_weights,\n","        self.all_mlm_labels, self.nsp_labels) = _pad_bert_inputs(examples, max_len, self.vocab)\n","    def __getitem__(self, idx):\n","        return (self.all_token_ids[idx], self.all_segments[idx],\n","                self.valid_lens[idx], self.all_pred_positions[idx],\n","                self.all_mlm_weights[idx], self.all_mlm_labels[idx],\n","                self.nsp_labels[idx])\n","    def __len__(self):\n","        return len(self.all_token_ids)\n"],"metadata":{"id":"rs-wdH6fo00m","executionInfo":{"status":"ok","timestamp":1753417329538,"user_tz":-420,"elapsed":2,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":264,"outputs":[]},{"cell_type":"code","source":["def get_dataloader_workers():\n","    \"\"\"Use 4 processes to read the data.\"\"\"\n","    return 4\n"],"metadata":{"id":"mSHoTLa9qmIn","executionInfo":{"status":"ok","timestamp":1753417329542,"user_tz":-420,"elapsed":3,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":265,"outputs":[]},{"cell_type":"code","source":["def load_data_wiki(batch_size, max_len):\n","    \"\"\"Load the WikiText-2 dataset.\"\"\"\n","    num_workers = get_dataloader_workers()\n","    data_dir = download_extract('wikitext-2', 'wikitext-2')\n","    paragraphs = _read_wiki(data_dir)\n","    train_set = _WikiTextDataset(paragraphs, max_len)\n","    train_iter = torch.utils.data.DataLoader(train_set, batch_size, shuffle=True, num_workers=num_workers)\n","    return train_iter, train_set.vocab"],"metadata":{"id":"5-PB9j41o21Y","executionInfo":{"status":"ok","timestamp":1753417329545,"user_tz":-420,"elapsed":5,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":266,"outputs":[]},{"cell_type":"markdown","source":["Utilities"],"metadata":{"id":"NmNlRZBeWKaY"}},{"cell_type":"code","source":["import time\n","class Timer:\n","    def __init__(self):\n","        self.times = []\n","        self.start()                                     # bắt đầu tính thời gian từ khi khởi tạo\n","    def start(self):\n","        self.tik = time.time()                           # lưu lại thời điểm hiện tại\n","    def stop(self):\n","        self.times.append(time.time() - self.tik)        # lấy thời điểm hiện tại trừ thời điểm bắt đầu, lưu vào list times\n","        return self.times[-1]                            # trả về giá trị vừa đo được\n","    def avg(self):\n","        return sum(self.times) / len(self.times)         # tính thời gian trung bình\n","    def sum(self):\n","        return sum(self.times)                           # tính tổng thời gian\n","    def cumsum(self):\n","        return np.array(self.times).cumsum().tolist()    # chuyển thành dạng numpy rồi tính tổng tích lũy rồi trả về kết quả dưới dạng list Python"],"metadata":{"id":"X-UBTVaaF3rI","executionInfo":{"status":"ok","timestamp":1753417329546,"user_tz":-420,"elapsed":4,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":267,"outputs":[]},{"cell_type":"code","source":["class Animator:                   # Lớp ni để vẽ đồ thị động\n","    def __init__(self, xlabel=None, ylabel=None, legend=None, xlim=None, ylim=None, xscale='linear', yscale='linear', fmts=('-', 'm--', 'g-.', 'r:'), nrows=1, ncols=1, figsize=(3.5, 2.5)):\n","        if legend is None:\n","            legend = []\n","        use_svg_display()\n","        self.fig, self.axes = plt.subplots(nrows, ncols, figsize=figsize)     # tạo 1 biểu đồ bằng subplots sau đó lấy fig và axes\n","        if nrows * ncols == 1:\n","            self.axes = [self.axes, ]          # nếu chỉ có 1 biểu đồ (nrows*ncols==1) thì biến self.axes thành 1 list chứa trục\n","        self.config_axes = lambda: set_axes(self.axes[0], xlabel, ylabel, xlim, ylim, xscale, yscale, legend)   # cấu hình trục mỗi khi cập nhật đồ thị\n","        self.X, self.Y, self.fmts = None, None, fmts             #khởi tạo dữ liệu để lưu các điểm vẽ thời gian\n","    def add(self, x, y):                       # thêm điểm dữ liệu mới\n","        if not hasattr(y, \"__len__\"):                          # Chuẩn hóa x và y thành list\n","            y = [y]\n","        n = len(y)\n","        if not hasattr(x, \"__len__\"):\n","            x = [x] * n\n","        if not self.X:                                        # nếu chưa có dữ liệu thì khởi tạo\n","            self.X = [[] for _ in range(n)]\n","        if not self.Y:\n","            self.Y = [[] for _ in range(n)]\n","        for i, (a, b) in enumerate(zip(x, y)):                       #thêm dữ liệu vào danh sách\n","            if a is not None and b is not None:\n","                self.X[i].append(a)\n","                self.Y[i].append(b)\n","        self.axes[0].cla()                                           # xóa dữ liệu cũ\n","        for x, y, fmt in zip(self.X, self.Y, self.fmts):            # vẽ dữ liệu mới\n","            self.axes[0].plot(x, y, fmt)\n","        self.config_axes()                                          # cấu hình trục\n","        display.display(self.fig)                                   # hiển thị\n","        display.clear_output(wait=True)                               # xóa hình cũ để vẽ hình mới"],"metadata":{"id":"2i7ZN-NiF5LP","executionInfo":{"status":"ok","timestamp":1753417329549,"user_tz":-420,"elapsed":2,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":268,"outputs":[]},{"cell_type":"code","source":["class Accumulator:                                           # lớp này để tích lũy giá trị số học qua nhiều bước\n","    def __init__(self, n):\n","        self.data = [0.0] * n                                #tạo list n phần tử 0.0\n","    def add(self, *args):\n","        self.data = [a + float(b) for a, b in zip(self.data, args)]   # kết hợp phần tử trong self.data cộng với các phần tử trong args rồi cập nhật lại vào self.data\n","    def reset(self):\n","        self.data = [0.0] * len(self.data)            # reset về 0.0\n","    def __getitem__(self, idx):\n","        return self.data[idx]                               # lấy giá trị tại vị trí idx"],"metadata":{"id":"9-ouiQ0SF8Qb","executionInfo":{"status":"ok","timestamp":1753417329558,"user_tz":-420,"elapsed":8,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":269,"outputs":[]},{"cell_type":"markdown","source":["Pretraining BERT"],"metadata":{"id":"Ui-sgjOuC3R8"}},{"cell_type":"code","source":["def _get_batch_loss_bert(net, loss, vocab_size, tokens_X, segments_X, valid_lens_x, pred_positions_X, mlm_weights_X, mlm_Y, nsp_y):\n","    # Forward pass\n","    _, mlm_Y_hat, nsp_Y_hat = net(tokens_X, segments_X, valid_lens_x.reshape(-1), pred_positions_X)\n","    # Compute masked language model loss\n","    mlm_l = loss(mlm_Y_hat.reshape(-1, vocab_size), mlm_Y.reshape(-1)) *\\\n","    mlm_weights_X.reshape(-1, 1)\n","    mlm_l = mlm_l.sum() / (mlm_weights_X.sum() + 1e-8)\n","    # Compute next sentence prediction loss\n","    nsp_l = loss(nsp_Y_hat, nsp_y)\n","    l = mlm_l + nsp_l\n","    return mlm_l, nsp_l, l"],"metadata":{"id":"OjQOti-1EzKp","executionInfo":{"status":"ok","timestamp":1753417329559,"user_tz":-420,"elapsed":7,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":270,"outputs":[]},{"cell_type":"code","source":["def train_bert(train_iter, net, loss, vocab_size, devices, num_steps):\n","    net(*next(iter(train_iter))[:4])\n","    net = nn.DataParallel(net, device_ids=devices).to(devices[0])\n","    trainer = torch.optim.Adam(net.parameters(), lr=0.01)\n","    step, timer = 0, Timer()\n","    animator = Animator(xlabel='step', ylabel='loss', xlim=[1, num_steps], legend=['mlm', 'nsp'])\n","    # Sum of masked language modeling losses, sum of next sentence prediction\n","    # losses, no. of sentence pairs, count\n","    metric = Accumulator(4)\n","    num_steps_reached = False\n","    while step < num_steps and not num_steps_reached:\n","        for tokens_X, segments_X, valid_lens_x, pred_positions_X,mlm_weights_X, mlm_Y, nsp_y in train_iter:\n","            tokens_X = tokens_X.to(devices[0])\n","            segments_X = segments_X.to(devices[0])\n","            valid_lens_x = valid_lens_x.to(devices[0])\n","            pred_positions_X = pred_positions_X.to(devices[0])\n","            mlm_weights_X = mlm_weights_X.to(devices[0])\n","            mlm_Y, nsp_y = mlm_Y.to(devices[0]), nsp_y.to(devices[0])\n","            trainer.zero_grad()\n","            timer.start()\n","            mlm_l, nsp_l, l = _get_batch_loss_bert(net, loss, vocab_size, tokens_X, segments_X, valid_lens_x, pred_positions_X, mlm_weights_X, mlm_Y, nsp_y)\n","            l.backward()\n","            trainer.step()\n","            metric.add(mlm_l, nsp_l, tokens_X.shape[0], 1)\n","            timer.stop()\n","            animator.add(step + 1,(metric[0] / metric[3], metric[1] / metric[3]))\n","            step += 1\n","            if step == num_steps:\n","                num_steps_reached = True\n","                break\n","    print(f'MLM loss {metric[0] / metric[3]:.3f}, 'f'NSP loss {metric[1] / metric[3]:.3f}')\n","    print(f'{metric[2] / timer.sum():.1f} sentence pairs/sec on 'f'{str(devices)}')\n"],"metadata":{"id":"k7kN8B13FDZ0","executionInfo":{"status":"ok","timestamp":1753417329560,"user_tz":-420,"elapsed":7,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":271,"outputs":[]},{"cell_type":"markdown","source":["Represent Text with BERT"],"metadata":{"id":"z741oYVWWXmH"}},{"cell_type":"code","source":["def get_bert_encoding(net, tokens_a, tokens_b=None):\n","    tokens, segments = get_tokens_and_segments(tokens_a, tokens_b)\n","    token_ids = torch.tensor(vocab[tokens], device=devices[0]).unsqueeze(0)\n","    segments = torch.tensor(segments, device=devices[0]).unsqueeze(0)\n","    valid_len = torch.tensor(len(tokens), device=devices[0]).unsqueeze(0)\n","    encoded_X, _, _ = net(token_ids, segments, valid_len)\n","    return encoded_X"],"metadata":{"id":"LhS0N1T5GEjT","executionInfo":{"status":"ok","timestamp":1753417329560,"user_tz":-420,"elapsed":6,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":272,"outputs":[]},{"cell_type":"markdown","source":["**Sentiment Analysis**\n","\n"],"metadata":{"id":"3NA9PaMQpS0P"}},{"cell_type":"markdown","source":["Dataset"],"metadata":{"id":"LQzYCrcup6TV"}},{"cell_type":"code","source":["DATA_HUB = dict()\n","DATA_URL = 'http://d2l-data.s3-accelerate.amazonaws.com/'"],"metadata":{"id":"rjWYFSU_pWP_","executionInfo":{"status":"ok","timestamp":1753417329561,"user_tz":-420,"elapsed":6,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":273,"outputs":[]},{"cell_type":"code","source":["DATA_HUB['aclImdb'] = (DATA_URL + 'aclImdb_v1.tar.gz','01ada507287d82875905620988597833ad4e0903')"],"metadata":{"id":"clOkNjkHpgwe","executionInfo":{"status":"ok","timestamp":1753417329562,"user_tz":-420,"elapsed":5,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":274,"outputs":[]},{"cell_type":"code","source":["data_dir = download_extract('aclImdb', 'aclImdb')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gcWmNjsrq5rO","executionInfo":{"status":"ok","timestamp":1753417355277,"user_tz":-420,"elapsed":25716,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}},"outputId":"257f132d-3dcd-49bd-ac53-3706037b80c9"},"execution_count":275,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading ../data/aclImdb_v1.tar.gz from http://d2l-data.s3-accelerate.amazonaws.com/aclImdb_v1.tar.gz...\n"]}]},{"cell_type":"code","source":["def read_imdb(data_dir, is_train):\n","    \"\"\"Read the IMDb review dataset text sequences and labels.\"\"\"\n","    data, labels = [], []\n","    for label in ('pos', 'neg'):\n","        folder_name = os.path.join(data_dir, 'train' if is_train else 'test', label)\n","        for file in os.listdir(folder_name):\n","            with open(os.path.join(folder_name, file), 'rb') as f:\n","                review = f.read().decode('utf-8').replace('\\n', '')\n","                data.append(review)\n","                labels.append(1 if label == 'pos' else 0)\n","    return data, labels\n","train_data = read_imdb(data_dir, is_train=True)\n","print('# trainings:', len(train_data[0]))\n","for x, y in zip(train_data[0][:3], train_data[1][:3]):\n","    print('label:', y, 'review:', x[:60])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"muIQu35Bp8fI","executionInfo":{"status":"ok","timestamp":1753417355699,"user_tz":-420,"elapsed":425,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}},"outputId":"bea5a43d-dc0c-4f55-d453-e613d7759bed"},"execution_count":276,"outputs":[{"output_type":"stream","name":"stdout","text":["# trainings: 25000\n","label: 1 review: The Shining starts with Jack Torrance (Jack Nicholson) drivi\n","label: 1 review: This movie captures the absurd essence of an overbearing Ame\n","label: 1 review: One woman, by herself in a house for 45-minutes of screen ti\n"]}]},{"cell_type":"markdown","source":["Preprocessing the Dataset"],"metadata":{"id":"QLgKCZ9ZrLHh"}},{"cell_type":"code","source":["train_tokens = tokenize(train_data[0], token='word')\n","vocab = Vocab(train_tokens, min_freq=5, reserved_tokens=['<pad>'])"],"metadata":{"id":"lHAAV0NprOQq","executionInfo":{"status":"ok","timestamp":1753417357726,"user_tz":-420,"elapsed":2029,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":277,"outputs":[]},{"cell_type":"code","source":["set_figsize()\n","plt.xlabel('# tokens per review')\n","plt.ylabel('count')\n","plt.hist([len(line) for line in train_tokens], bins=range(0, 1000, 50))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":370},"id":"pqCaZU-KrX9c","executionInfo":{"status":"ok","timestamp":1753417358082,"user_tz":-420,"elapsed":342,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}},"outputId":"8992bb83-7351-4fe8-ebed-2b1c6e90a40f"},"execution_count":278,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([ 553., 2373., 6820., 4834., 2817., 1848., 1380., 1005.,  759.,\n","         581.,  437.,  349.,  257.,  207.,  174.,  133.,  116.,   85.,\n","          75.]),\n"," array([  0.,  50., 100., 150., 200., 250., 300., 350., 400., 450., 500.,\n","        550., 600., 650., 700., 750., 800., 850., 900., 950.]),\n"," <BarContainer object of 19 artists>)"]},"metadata":{},"execution_count":278},{"output_type":"display_data","data":{"text/plain":["<Figure size 350x250 with 1 Axes>"],"image/svg+xml":"<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"255.828125pt\" height=\"183.35625pt\" viewBox=\"0 0 255.828125 183.35625\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n <metadata>\n  <rdf:RDF xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n   <cc:Work>\n    <dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\"/>\n    <dc:date>2025-07-25T04:22:38.397175</dc:date>\n    <dc:format>image/svg+xml</dc:format>\n    <dc:creator>\n     <cc:Agent>\n      <dc:title>Matplotlib v3.10.0, https://matplotlib.org/</dc:title>\n     </cc:Agent>\n    </dc:creator>\n   </cc:Work>\n  </rdf:RDF>\n </metadata>\n <defs>\n  <style type=\"text/css\">*{stroke-linejoin: round; stroke-linecap: butt}</style>\n </defs>\n <g id=\"figure_1\">\n  <g id=\"patch_1\">\n   <path d=\"M 0 183.35625 \nL 255.828125 183.35625 \nL 255.828125 0 \nL 0 0 \nz\n\" style=\"fill: #ffffff\"/>\n  </g>\n  <g id=\"axes_1\">\n   <g id=\"patch_2\">\n    <path d=\"M 53.328125 145.8 \nL 248.628125 145.8 \nL 248.628125 7.2 \nL 53.328125 7.2 \nz\n\" style=\"fill: #ffffff\"/>\n   </g>\n   <g id=\"patch_3\">\n    <path d=\"M 62.205398 145.8 \nL 71.549895 145.8 \nL 71.549895 135.096774 \nL 62.205398 135.096774 \nz\n\" clip-path=\"url(#pbb96511950)\" style=\"fill: #1f77b4\"/>\n   </g>\n   <g id=\"patch_4\">\n    <path d=\"M 71.549895 145.8 \nL 80.894393 145.8 \nL 80.894393 99.870968 \nL 71.549895 99.870968 \nz\n\" clip-path=\"url(#pbb96511950)\" style=\"fill: #1f77b4\"/>\n   </g>\n   <g id=\"patch_5\">\n    <path d=\"M 80.894393 145.8 \nL 90.238891 145.8 \nL 90.238891 13.8 \nL 80.894393 13.8 \nz\n\" clip-path=\"url(#pbb96511950)\" style=\"fill: #1f77b4\"/>\n   </g>\n   <g id=\"patch_6\">\n    <path d=\"M 90.238891 145.8 \nL 99.583388 145.8 \nL 99.583388 52.23871 \nL 90.238891 52.23871 \nz\n\" clip-path=\"url(#pbb96511950)\" style=\"fill: #1f77b4\"/>\n   </g>\n   <g id=\"patch_7\">\n    <path d=\"M 99.583388 145.8 \nL 108.927886 145.8 \nL 108.927886 91.277419 \nL 99.583388 91.277419 \nz\n\" clip-path=\"url(#pbb96511950)\" style=\"fill: #1f77b4\"/>\n   </g>\n   <g id=\"patch_8\">\n    <path d=\"M 108.927886 145.8 \nL 118.272383 145.8 \nL 118.272383 110.032258 \nL 108.927886 110.032258 \nz\n\" clip-path=\"url(#pbb96511950)\" style=\"fill: #1f77b4\"/>\n   </g>\n   <g id=\"patch_9\">\n    <path d=\"M 118.272383 145.8 \nL 127.616881 145.8 \nL 127.616881 119.090323 \nL 118.272383 119.090323 \nz\n\" clip-path=\"url(#pbb96511950)\" style=\"fill: #1f77b4\"/>\n   </g>\n   <g id=\"patch_10\">\n    <path d=\"M 127.616881 145.8 \nL 136.961379 145.8 \nL 136.961379 126.348387 \nL 127.616881 126.348387 \nz\n\" clip-path=\"url(#pbb96511950)\" style=\"fill: #1f77b4\"/>\n   </g>\n   <g id=\"patch_11\">\n    <path d=\"M 136.961379 145.8 \nL 146.305876 145.8 \nL 146.305876 131.109677 \nL 136.961379 131.109677 \nz\n\" clip-path=\"url(#pbb96511950)\" style=\"fill: #1f77b4\"/>\n   </g>\n   <g id=\"patch_12\">\n    <path d=\"M 146.305876 145.8 \nL 155.650374 145.8 \nL 155.650374 134.554839 \nL 146.305876 134.554839 \nz\n\" clip-path=\"url(#pbb96511950)\" style=\"fill: #1f77b4\"/>\n   </g>\n   <g id=\"patch_13\">\n    <path d=\"M 155.650374 145.8 \nL 164.994871 145.8 \nL 164.994871 137.341935 \nL 155.650374 137.341935 \nz\n\" clip-path=\"url(#pbb96511950)\" style=\"fill: #1f77b4\"/>\n   </g>\n   <g id=\"patch_14\">\n    <path d=\"M 164.994871 145.8 \nL 174.339369 145.8 \nL 174.339369 139.045161 \nL 164.994871 139.045161 \nz\n\" clip-path=\"url(#pbb96511950)\" style=\"fill: #1f77b4\"/>\n   </g>\n   <g id=\"patch_15\">\n    <path d=\"M 174.339369 145.8 \nL 183.683867 145.8 \nL 183.683867 140.825806 \nL 174.339369 140.825806 \nz\n\" clip-path=\"url(#pbb96511950)\" style=\"fill: #1f77b4\"/>\n   </g>\n   <g id=\"patch_16\">\n    <path d=\"M 183.683867 145.8 \nL 193.028364 145.8 \nL 193.028364 141.793548 \nL 183.683867 141.793548 \nz\n\" clip-path=\"url(#pbb96511950)\" style=\"fill: #1f77b4\"/>\n   </g>\n   <g id=\"patch_17\">\n    <path d=\"M 193.028364 145.8 \nL 202.372862 145.8 \nL 202.372862 142.432258 \nL 193.028364 142.432258 \nz\n\" clip-path=\"url(#pbb96511950)\" style=\"fill: #1f77b4\"/>\n   </g>\n   <g id=\"patch_18\">\n    <path d=\"M 202.372862 145.8 \nL 211.717359 145.8 \nL 211.717359 143.225806 \nL 202.372862 143.225806 \nz\n\" clip-path=\"url(#pbb96511950)\" style=\"fill: #1f77b4\"/>\n   </g>\n   <g id=\"patch_19\">\n    <path d=\"M 211.717359 145.8 \nL 221.061857 145.8 \nL 221.061857 143.554839 \nL 211.717359 143.554839 \nz\n\" clip-path=\"url(#pbb96511950)\" style=\"fill: #1f77b4\"/>\n   </g>\n   <g id=\"patch_20\">\n    <path d=\"M 221.061857 145.8 \nL 230.406355 145.8 \nL 230.406355 144.154839 \nL 221.061857 144.154839 \nz\n\" clip-path=\"url(#pbb96511950)\" style=\"fill: #1f77b4\"/>\n   </g>\n   <g id=\"patch_21\">\n    <path d=\"M 230.406355 145.8 \nL 239.750852 145.8 \nL 239.750852 144.348387 \nL 230.406355 144.348387 \nz\n\" clip-path=\"url(#pbb96511950)\" style=\"fill: #1f77b4\"/>\n   </g>\n   <g id=\"matplotlib.axis_1\">\n    <g id=\"xtick_1\">\n     <g id=\"line2d_1\">\n      <defs>\n       <path id=\"m790db3942d\" d=\"M 0 0 \nL 0 3.5 \n\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </defs>\n      <g>\n       <use xlink:href=\"#m790db3942d\" x=\"62.205398\" y=\"145.8\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_1\">\n      <!-- 0 -->\n      <g transform=\"translate(59.024148 160.398438) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-30\" d=\"M 2034 4250 \nQ 1547 4250 1301 3770 \nQ 1056 3291 1056 2328 \nQ 1056 1369 1301 889 \nQ 1547 409 2034 409 \nQ 2525 409 2770 889 \nQ 3016 1369 3016 2328 \nQ 3016 3291 2770 3770 \nQ 2525 4250 2034 4250 \nz\nM 2034 4750 \nQ 2819 4750 3233 4129 \nQ 3647 3509 3647 2328 \nQ 3647 1150 3233 529 \nQ 2819 -91 2034 -91 \nQ 1250 -91 836 529 \nQ 422 1150 422 2328 \nQ 422 3509 836 4129 \nQ 1250 4750 2034 4750 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_2\">\n     <g id=\"line2d_2\">\n      <g>\n       <use xlink:href=\"#m790db3942d\" x=\"99.583388\" y=\"145.8\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_2\">\n      <!-- 200 -->\n      <g transform=\"translate(90.039638 160.398438) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-32\" d=\"M 1228 531 \nL 3431 531 \nL 3431 0 \nL 469 0 \nL 469 531 \nQ 828 903 1448 1529 \nQ 2069 2156 2228 2338 \nQ 2531 2678 2651 2914 \nQ 2772 3150 2772 3378 \nQ 2772 3750 2511 3984 \nQ 2250 4219 1831 4219 \nQ 1534 4219 1204 4116 \nQ 875 4013 500 3803 \nL 500 4441 \nQ 881 4594 1212 4672 \nQ 1544 4750 1819 4750 \nQ 2544 4750 2975 4387 \nQ 3406 4025 3406 3419 \nQ 3406 3131 3298 2873 \nQ 3191 2616 2906 2266 \nQ 2828 2175 2409 1742 \nQ 1991 1309 1228 531 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-32\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(127.246094 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_3\">\n     <g id=\"line2d_3\">\n      <g>\n       <use xlink:href=\"#m790db3942d\" x=\"136.961379\" y=\"145.8\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_3\">\n      <!-- 400 -->\n      <g transform=\"translate(127.417629 160.398438) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-34\" d=\"M 2419 4116 \nL 825 1625 \nL 2419 1625 \nL 2419 4116 \nz\nM 2253 4666 \nL 3047 4666 \nL 3047 1625 \nL 3713 1625 \nL 3713 1100 \nL 3047 1100 \nL 3047 0 \nL 2419 0 \nL 2419 1100 \nL 313 1100 \nL 313 1709 \nL 2253 4666 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-34\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(127.246094 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_4\">\n     <g id=\"line2d_4\">\n      <g>\n       <use xlink:href=\"#m790db3942d\" x=\"174.339369\" y=\"145.8\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_4\">\n      <!-- 600 -->\n      <g transform=\"translate(164.795619 160.398438) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-36\" d=\"M 2113 2584 \nQ 1688 2584 1439 2293 \nQ 1191 2003 1191 1497 \nQ 1191 994 1439 701 \nQ 1688 409 2113 409 \nQ 2538 409 2786 701 \nQ 3034 994 3034 1497 \nQ 3034 2003 2786 2293 \nQ 2538 2584 2113 2584 \nz\nM 3366 4563 \nL 3366 3988 \nQ 3128 4100 2886 4159 \nQ 2644 4219 2406 4219 \nQ 1781 4219 1451 3797 \nQ 1122 3375 1075 2522 \nQ 1259 2794 1537 2939 \nQ 1816 3084 2150 3084 \nQ 2853 3084 3261 2657 \nQ 3669 2231 3669 1497 \nQ 3669 778 3244 343 \nQ 2819 -91 2113 -91 \nQ 1303 -91 875 529 \nQ 447 1150 447 2328 \nQ 447 3434 972 4092 \nQ 1497 4750 2381 4750 \nQ 2619 4750 2861 4703 \nQ 3103 4656 3366 4563 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-36\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(127.246094 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_5\">\n     <g id=\"line2d_5\">\n      <g>\n       <use xlink:href=\"#m790db3942d\" x=\"211.717359\" y=\"145.8\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_5\">\n      <!-- 800 -->\n      <g transform=\"translate(202.173609 160.398438) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-38\" d=\"M 2034 2216 \nQ 1584 2216 1326 1975 \nQ 1069 1734 1069 1313 \nQ 1069 891 1326 650 \nQ 1584 409 2034 409 \nQ 2484 409 2743 651 \nQ 3003 894 3003 1313 \nQ 3003 1734 2745 1975 \nQ 2488 2216 2034 2216 \nz\nM 1403 2484 \nQ 997 2584 770 2862 \nQ 544 3141 544 3541 \nQ 544 4100 942 4425 \nQ 1341 4750 2034 4750 \nQ 2731 4750 3128 4425 \nQ 3525 4100 3525 3541 \nQ 3525 3141 3298 2862 \nQ 3072 2584 2669 2484 \nQ 3125 2378 3379 2068 \nQ 3634 1759 3634 1313 \nQ 3634 634 3220 271 \nQ 2806 -91 2034 -91 \nQ 1263 -91 848 271 \nQ 434 634 434 1313 \nQ 434 1759 690 2068 \nQ 947 2378 1403 2484 \nz\nM 1172 3481 \nQ 1172 3119 1398 2916 \nQ 1625 2713 2034 2713 \nQ 2441 2713 2670 2916 \nQ 2900 3119 2900 3481 \nQ 2900 3844 2670 4047 \nQ 2441 4250 2034 4250 \nQ 1625 4250 1398 4047 \nQ 1172 3844 1172 3481 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-38\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(127.246094 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"text_6\">\n     <!-- # tokens per review -->\n     <g transform=\"translate(100.597656 174.076563) scale(0.1 -0.1)\">\n      <defs>\n       <path id=\"DejaVuSans-23\" d=\"M 3272 2816 \nL 2363 2816 \nL 2100 1772 \nL 3016 1772 \nL 3272 2816 \nz\nM 2803 4594 \nL 2478 3297 \nL 3391 3297 \nL 3719 4594 \nL 4219 4594 \nL 3897 3297 \nL 4872 3297 \nL 4872 2816 \nL 3775 2816 \nL 3519 1772 \nL 4513 1772 \nL 4513 1294 \nL 3397 1294 \nL 3072 0 \nL 2572 0 \nL 2894 1294 \nL 1978 1294 \nL 1656 0 \nL 1153 0 \nL 1478 1294 \nL 494 1294 \nL 494 1772 \nL 1594 1772 \nL 1856 2816 \nL 850 2816 \nL 850 3297 \nL 1978 3297 \nL 2297 4594 \nL 2803 4594 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-20\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-74\" d=\"M 1172 4494 \nL 1172 3500 \nL 2356 3500 \nL 2356 3053 \nL 1172 3053 \nL 1172 1153 \nQ 1172 725 1289 603 \nQ 1406 481 1766 481 \nL 2356 481 \nL 2356 0 \nL 1766 0 \nQ 1100 0 847 248 \nQ 594 497 594 1153 \nL 594 3053 \nL 172 3053 \nL 172 3500 \nL 594 3500 \nL 594 4494 \nL 1172 4494 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-6f\" d=\"M 1959 3097 \nQ 1497 3097 1228 2736 \nQ 959 2375 959 1747 \nQ 959 1119 1226 758 \nQ 1494 397 1959 397 \nQ 2419 397 2687 759 \nQ 2956 1122 2956 1747 \nQ 2956 2369 2687 2733 \nQ 2419 3097 1959 3097 \nz\nM 1959 3584 \nQ 2709 3584 3137 3096 \nQ 3566 2609 3566 1747 \nQ 3566 888 3137 398 \nQ 2709 -91 1959 -91 \nQ 1206 -91 779 398 \nQ 353 888 353 1747 \nQ 353 2609 779 3096 \nQ 1206 3584 1959 3584 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-6b\" d=\"M 581 4863 \nL 1159 4863 \nL 1159 1991 \nL 2875 3500 \nL 3609 3500 \nL 1753 1863 \nL 3688 0 \nL 2938 0 \nL 1159 1709 \nL 1159 0 \nL 581 0 \nL 581 4863 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-65\" d=\"M 3597 1894 \nL 3597 1613 \nL 953 1613 \nQ 991 1019 1311 708 \nQ 1631 397 2203 397 \nQ 2534 397 2845 478 \nQ 3156 559 3463 722 \nL 3463 178 \nQ 3153 47 2828 -22 \nQ 2503 -91 2169 -91 \nQ 1331 -91 842 396 \nQ 353 884 353 1716 \nQ 353 2575 817 3079 \nQ 1281 3584 2069 3584 \nQ 2775 3584 3186 3129 \nQ 3597 2675 3597 1894 \nz\nM 3022 2063 \nQ 3016 2534 2758 2815 \nQ 2500 3097 2075 3097 \nQ 1594 3097 1305 2825 \nQ 1016 2553 972 2059 \nL 3022 2063 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-6e\" d=\"M 3513 2113 \nL 3513 0 \nL 2938 0 \nL 2938 2094 \nQ 2938 2591 2744 2837 \nQ 2550 3084 2163 3084 \nQ 1697 3084 1428 2787 \nQ 1159 2491 1159 1978 \nL 1159 0 \nL 581 0 \nL 581 3500 \nL 1159 3500 \nL 1159 2956 \nQ 1366 3272 1645 3428 \nQ 1925 3584 2291 3584 \nQ 2894 3584 3203 3211 \nQ 3513 2838 3513 2113 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-73\" d=\"M 2834 3397 \nL 2834 2853 \nQ 2591 2978 2328 3040 \nQ 2066 3103 1784 3103 \nQ 1356 3103 1142 2972 \nQ 928 2841 928 2578 \nQ 928 2378 1081 2264 \nQ 1234 2150 1697 2047 \nL 1894 2003 \nQ 2506 1872 2764 1633 \nQ 3022 1394 3022 966 \nQ 3022 478 2636 193 \nQ 2250 -91 1575 -91 \nQ 1294 -91 989 -36 \nQ 684 19 347 128 \nL 347 722 \nQ 666 556 975 473 \nQ 1284 391 1588 391 \nQ 1994 391 2212 530 \nQ 2431 669 2431 922 \nQ 2431 1156 2273 1281 \nQ 2116 1406 1581 1522 \nL 1381 1569 \nQ 847 1681 609 1914 \nQ 372 2147 372 2553 \nQ 372 3047 722 3315 \nQ 1072 3584 1716 3584 \nQ 2034 3584 2315 3537 \nQ 2597 3491 2834 3397 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-70\" d=\"M 1159 525 \nL 1159 -1331 \nL 581 -1331 \nL 581 3500 \nL 1159 3500 \nL 1159 2969 \nQ 1341 3281 1617 3432 \nQ 1894 3584 2278 3584 \nQ 2916 3584 3314 3078 \nQ 3713 2572 3713 1747 \nQ 3713 922 3314 415 \nQ 2916 -91 2278 -91 \nQ 1894 -91 1617 61 \nQ 1341 213 1159 525 \nz\nM 3116 1747 \nQ 3116 2381 2855 2742 \nQ 2594 3103 2138 3103 \nQ 1681 3103 1420 2742 \nQ 1159 2381 1159 1747 \nQ 1159 1113 1420 752 \nQ 1681 391 2138 391 \nQ 2594 391 2855 752 \nQ 3116 1113 3116 1747 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-72\" d=\"M 2631 2963 \nQ 2534 3019 2420 3045 \nQ 2306 3072 2169 3072 \nQ 1681 3072 1420 2755 \nQ 1159 2438 1159 1844 \nL 1159 0 \nL 581 0 \nL 581 3500 \nL 1159 3500 \nL 1159 2956 \nQ 1341 3275 1631 3429 \nQ 1922 3584 2338 3584 \nQ 2397 3584 2469 3576 \nQ 2541 3569 2628 3553 \nL 2631 2963 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-76\" d=\"M 191 3500 \nL 800 3500 \nL 1894 563 \nL 2988 3500 \nL 3597 3500 \nL 2284 0 \nL 1503 0 \nL 191 3500 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-69\" d=\"M 603 3500 \nL 1178 3500 \nL 1178 0 \nL 603 0 \nL 603 3500 \nz\nM 603 4863 \nL 1178 4863 \nL 1178 4134 \nL 603 4134 \nL 603 4863 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-77\" d=\"M 269 3500 \nL 844 3500 \nL 1563 769 \nL 2278 3500 \nL 2956 3500 \nL 3675 769 \nL 4391 3500 \nL 4966 3500 \nL 4050 0 \nL 3372 0 \nL 2619 2869 \nL 1863 0 \nL 1184 0 \nL 269 3500 \nz\n\" transform=\"scale(0.015625)\"/>\n      </defs>\n      <use xlink:href=\"#DejaVuSans-23\"/>\n      <use xlink:href=\"#DejaVuSans-20\" transform=\"translate(83.789062 0)\"/>\n      <use xlink:href=\"#DejaVuSans-74\" transform=\"translate(115.576172 0)\"/>\n      <use xlink:href=\"#DejaVuSans-6f\" transform=\"translate(154.785156 0)\"/>\n      <use xlink:href=\"#DejaVuSans-6b\" transform=\"translate(215.966797 0)\"/>\n      <use xlink:href=\"#DejaVuSans-65\" transform=\"translate(270.251953 0)\"/>\n      <use xlink:href=\"#DejaVuSans-6e\" transform=\"translate(331.775391 0)\"/>\n      <use xlink:href=\"#DejaVuSans-73\" transform=\"translate(395.154297 0)\"/>\n      <use xlink:href=\"#DejaVuSans-20\" transform=\"translate(447.253906 0)\"/>\n      <use xlink:href=\"#DejaVuSans-70\" transform=\"translate(479.041016 0)\"/>\n      <use xlink:href=\"#DejaVuSans-65\" transform=\"translate(542.517578 0)\"/>\n      <use xlink:href=\"#DejaVuSans-72\" transform=\"translate(604.041016 0)\"/>\n      <use xlink:href=\"#DejaVuSans-20\" transform=\"translate(645.154297 0)\"/>\n      <use xlink:href=\"#DejaVuSans-72\" transform=\"translate(676.941406 0)\"/>\n      <use xlink:href=\"#DejaVuSans-65\" transform=\"translate(715.804688 0)\"/>\n      <use xlink:href=\"#DejaVuSans-76\" transform=\"translate(777.328125 0)\"/>\n      <use xlink:href=\"#DejaVuSans-69\" transform=\"translate(836.507812 0)\"/>\n      <use xlink:href=\"#DejaVuSans-65\" transform=\"translate(864.291016 0)\"/>\n      <use xlink:href=\"#DejaVuSans-77\" transform=\"translate(925.814453 0)\"/>\n     </g>\n    </g>\n   </g>\n   <g id=\"matplotlib.axis_2\">\n    <g id=\"ytick_1\">\n     <g id=\"line2d_6\">\n      <defs>\n       <path id=\"mf2a43f9bc3\" d=\"M 0 0 \nL -3.5 0 \n\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </defs>\n      <g>\n       <use xlink:href=\"#mf2a43f9bc3\" x=\"53.328125\" y=\"145.8\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_7\">\n      <!-- 0 -->\n      <g transform=\"translate(39.965625 149.599219) scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_2\">\n     <g id=\"line2d_7\">\n      <g>\n       <use xlink:href=\"#mf2a43f9bc3\" x=\"53.328125\" y=\"107.090323\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_8\">\n      <!-- 2000 -->\n      <g transform=\"translate(20.878125 110.889541) scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-32\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(127.246094 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(190.869141 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_3\">\n     <g id=\"line2d_8\">\n      <g>\n       <use xlink:href=\"#mf2a43f9bc3\" x=\"53.328125\" y=\"68.380645\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_9\">\n      <!-- 4000 -->\n      <g transform=\"translate(20.878125 72.179864) scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-34\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(127.246094 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(190.869141 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_4\">\n     <g id=\"line2d_9\">\n      <g>\n       <use xlink:href=\"#mf2a43f9bc3\" x=\"53.328125\" y=\"29.670968\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_10\">\n      <!-- 6000 -->\n      <g transform=\"translate(20.878125 33.470186) scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-36\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(127.246094 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(190.869141 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"text_11\">\n     <!-- count -->\n     <g transform=\"translate(14.798437 90.60625) rotate(-90) scale(0.1 -0.1)\">\n      <defs>\n       <path id=\"DejaVuSans-63\" d=\"M 3122 3366 \nL 3122 2828 \nQ 2878 2963 2633 3030 \nQ 2388 3097 2138 3097 \nQ 1578 3097 1268 2742 \nQ 959 2388 959 1747 \nQ 959 1106 1268 751 \nQ 1578 397 2138 397 \nQ 2388 397 2633 464 \nQ 2878 531 3122 666 \nL 3122 134 \nQ 2881 22 2623 -34 \nQ 2366 -91 2075 -91 \nQ 1284 -91 818 406 \nQ 353 903 353 1747 \nQ 353 2603 823 3093 \nQ 1294 3584 2113 3584 \nQ 2378 3584 2631 3529 \nQ 2884 3475 3122 3366 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-75\" d=\"M 544 1381 \nL 544 3500 \nL 1119 3500 \nL 1119 1403 \nQ 1119 906 1312 657 \nQ 1506 409 1894 409 \nQ 2359 409 2629 706 \nQ 2900 1003 2900 1516 \nL 2900 3500 \nL 3475 3500 \nL 3475 0 \nL 2900 0 \nL 2900 538 \nQ 2691 219 2414 64 \nQ 2138 -91 1772 -91 \nQ 1169 -91 856 284 \nQ 544 659 544 1381 \nz\nM 1991 3584 \nL 1991 3584 \nz\n\" transform=\"scale(0.015625)\"/>\n      </defs>\n      <use xlink:href=\"#DejaVuSans-63\"/>\n      <use xlink:href=\"#DejaVuSans-6f\" transform=\"translate(54.980469 0)\"/>\n      <use xlink:href=\"#DejaVuSans-75\" transform=\"translate(116.162109 0)\"/>\n      <use xlink:href=\"#DejaVuSans-6e\" transform=\"translate(179.541016 0)\"/>\n      <use xlink:href=\"#DejaVuSans-74\" transform=\"translate(242.919922 0)\"/>\n     </g>\n    </g>\n   </g>\n   <g id=\"patch_22\">\n    <path d=\"M 53.328125 145.8 \nL 53.328125 7.2 \n\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n   </g>\n   <g id=\"patch_23\">\n    <path d=\"M 248.628125 145.8 \nL 248.628125 7.2 \n\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n   </g>\n   <g id=\"patch_24\">\n    <path d=\"M 53.328125 145.8 \nL 248.628125 145.8 \n\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n   </g>\n   <g id=\"patch_25\">\n    <path d=\"M 53.328125 7.2 \nL 248.628125 7.2 \n\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n   </g>\n  </g>\n </g>\n <defs>\n  <clipPath id=\"pbb96511950\">\n   <rect x=\"53.328125\" y=\"7.2\" width=\"195.3\" height=\"138.6\"/>\n  </clipPath>\n </defs>\n</svg>\n"},"metadata":{}}]},{"cell_type":"code","source":["def truncate_pad(line, num_steps, padding_token):\n","    \"\"\"Truncate or pad sequences.\"\"\"\n","    if len(line) > num_steps:\n","        return line[:num_steps] # Truncate\n","    return line + [padding_token] * (num_steps - len(line))"],"metadata":{"id":"6viddPkVsH6N","executionInfo":{"status":"ok","timestamp":1753417358100,"user_tz":-420,"elapsed":16,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":279,"outputs":[]},{"cell_type":"code","source":["num_steps = 500   # sequence length\n","train_features = torch.tensor([truncate_pad(vocab[line], num_steps, vocab['<pad>']) for line in train_tokens])\n","print(train_features.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"odd7ChCnriLB","executionInfo":{"status":"ok","timestamp":1753417363221,"user_tz":-420,"elapsed":5112,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}},"outputId":"14221955-7e10-48a3-9918-3e5b86d409f5"},"execution_count":280,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([25000, 500])\n"]}]},{"cell_type":"markdown","source":["Creating Data Iterators"],"metadata":{"id":"rkwhFkO5sY2D"}},{"cell_type":"code","source":["def load_array(data_arrays, batch_size, is_train=True):\n","    \"\"\"Construct a PyTorch data iterator.\"\"\"\n","    dataset = torch.utils.data.TensorDataset(*data_arrays)\n","    return torch.utils.data.DataLoader(dataset, batch_size, shuffle=is_train)"],"metadata":{"id":"ZstCgVfetBWM","executionInfo":{"status":"ok","timestamp":1753417363252,"user_tz":-420,"elapsed":28,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":281,"outputs":[]},{"cell_type":"code","source":["train_iter = load_array((train_features, torch.tensor(train_data[1])), 64)\n","for X, y in train_iter:\n","    print('X:', X.shape, 'y:', y.shape)\n","    break\n","print('batches:', len(train_iter))"],"metadata":{"id":"GAeTF9GJsb4-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1753417363267,"user_tz":-420,"elapsed":41,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}},"outputId":"888396ab-6874-4b37-90b2-9ae64d9645ec"},"execution_count":282,"outputs":[{"output_type":"stream","name":"stdout","text":["X: torch.Size([64, 500]) y: torch.Size([64])\n","batches: 391\n"]}]},{"cell_type":"code","source":["def load_data_imdb(batch_size, num_steps=500):\n","    \"\"\"Return data iterators and the vocabulary of the IMDb review dataset.\"\"\"\n","    data_dir = download_extract('aclImdb', 'aclImdb')\n","    train_data = read_imdb(data_dir, True)\n","    test_data = read_imdb(data_dir, False)\n","    test_tokens = tokenize(test_data[0], token='word')\n","    vocab = Vocab(train_tokens, min_freq=5)\n","    train_features = torch.tensor([truncate_pad(vocab[line], num_steps, vocab['<pad>']) for line in train_tokens])\n","    test_features = torch.tensor([truncate_pad(vocab[line], num_steps, vocab['<pad>']) for line in test_tokens])\n","    train_iter = load_array((train_features, torch.tensor(train_data[1])), batch_size)\n","    test_iter = load_array((test_features, torch.tensor(test_data[1])), batch_size, is_train=False)\n","    return train_iter, test_iter, vocab\n","\n"],"metadata":{"id":"XDLJk9qntUrv","executionInfo":{"status":"ok","timestamp":1753417363270,"user_tz":-420,"elapsed":2,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":283,"outputs":[]},{"cell_type":"code","source":["batch_size = 64\n","train_iter, test_iter, vocab = load_data_imdb(batch_size)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7traXeEsvaW9","executionInfo":{"status":"ok","timestamp":1753417402183,"user_tz":-420,"elapsed":38912,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}},"outputId":"bc4bb919-fb8b-4771-a343-1567e0ae456d"},"execution_count":284,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading ../data/aclImdb_v1.tar.gz from http://d2l-data.s3-accelerate.amazonaws.com/aclImdb_v1.tar.gz...\n"]}]},{"cell_type":"code","source":["class BiRNN(nn.Module):\n","    def __init__(self, vocab_size, embed_size, num_hiddens, num_layers, **kwargs):\n","        super(BiRNN, self).__init__(**kwargs)\n","        self.embedding = nn.Embedding(vocab_size, embed_size)\n","        self.encoder = nn.LSTM(embed_size, num_hiddens, num_layers=num_layers, bidirectional=True)\n","        self.decoder = nn.Linear(4 * num_hiddens, 2)\n","    def forward(self, inputs):\n","        embeddings = self.embedding(inputs.T)\n","        self.encoder.flatten_parameters()\n","        outputs, _ = self.encoder(embeddings)\n","        encoding = torch.cat((outputs[0], outputs[-1]), dim=1)\n","        outs = self.decoder(encoding)\n","        return outs\n"],"metadata":{"id":"iS4wPWvDveIk","executionInfo":{"status":"ok","timestamp":1753417402187,"user_tz":-420,"elapsed":13,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":285,"outputs":[]},{"cell_type":"code","source":["embed_size, num_hiddens, num_layers, devices = 100, 100, 2, try_all_gpus()\n","net = BiRNN(len(vocab), embed_size, num_hiddens, num_layers)"],"metadata":{"id":"q_eXUY_HwUi9","executionInfo":{"status":"ok","timestamp":1753417402189,"user_tz":-420,"elapsed":10,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":286,"outputs":[]},{"cell_type":"code","source":["def init_weights(module):\n","    if type(module) == nn.Linear:\n","        nn.init.xavier_uniform_(module.weight)\n","    if type(module) == nn.LSTM:\n","        for param in module._flat_weights_names:\n","            if \"weight\" in param:\n","                nn.init.xavier_uniform_(module._parameters[param])\n","net.apply(init_weights)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P47h0cglwxoB","executionInfo":{"status":"ok","timestamp":1753417402238,"user_tz":-420,"elapsed":47,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}},"outputId":"780fdc16-0632-4886-861d-882ed7100822"},"execution_count":287,"outputs":[{"output_type":"execute_result","data":{"text/plain":["BiRNN(\n","  (embedding): Embedding(49346, 100)\n","  (encoder): LSTM(100, 100, num_layers=2, bidirectional=True)\n","  (decoder): Linear(in_features=400, out_features=2, bias=True)\n",")"]},"metadata":{},"execution_count":287}]},{"cell_type":"code","source":["DATA_HUB['glove.6b.50d'] = (DATA_URL + 'glove.6B.50d.zip',\n","'0b8703943ccdb6eb788e6f091b8946e82231bc4d')\n","\n","DATA_HUB['glove.6b.100d'] = (DATA_URL + 'glove.6B.100d.zip',\n","'cd43bfb07e44e6f27cbcc7bc9ae3d80284fdaf5a')\n","\n","DATA_HUB['glove.42b.300d'] = (DATA_URL + 'glove.42B.300d.zip',\n","'b5116e234e9eb9076672cfeabf5469f3eec904fa')\n","\n","DATA_HUB['wiki.en'] = (DATA_URL + 'wiki.en.zip',\n","'c1816da3821ae9f43899be655002f6c723e91b88')\n"],"metadata":{"id":"WRB7ChSF0Mk7","executionInfo":{"status":"ok","timestamp":1753417402239,"user_tz":-420,"elapsed":9,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":288,"outputs":[]},{"cell_type":"code","source":["glove_embedding = TokenEmbedding('glove.6b.100d')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iLuX8XThxNTL","executionInfo":{"status":"ok","timestamp":1753417434272,"user_tz":-420,"elapsed":32037,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}},"outputId":"a42ee2db-51fa-4c2c-f5ce-a84b7000d9cd"},"execution_count":289,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading ../data/glove.6B.100d.zip from http://d2l-data.s3-accelerate.amazonaws.com/glove.6B.100d.zip...\n"]}]},{"cell_type":"code","source":["embeds = glove_embedding[vocab.idx_to_token]\n","embeds.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3tXiL_a5xRgv","executionInfo":{"status":"ok","timestamp":1753417434323,"user_tz":-420,"elapsed":53,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}},"outputId":"b4cad5a2-1d49-4dd8-ca9f-82acdf2f8274"},"execution_count":290,"outputs":[{"output_type":"execute_result","data":{"text/plain":["torch.Size([49346, 100])"]},"metadata":{},"execution_count":290}]},{"cell_type":"code","source":["net.embedding.weight.data.copy_(embeds)\n","net.embedding.weight.requires_grad = False"],"metadata":{"id":"Y8dcgfS6xaU8","executionInfo":{"status":"ok","timestamp":1753417434343,"user_tz":-420,"elapsed":19,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":291,"outputs":[]},{"cell_type":"code","source":["def accuracy(y_hat, y):\n","    if len(y_hat.shape) > 1 and y_hat.shape[1] > 1:      #kiểm tra xem y_hat có phải ma trận dự đoán xác suất nhiều lớp\n","        y_hat = y_hat.argmax(axis=1)                     # nếu phải thì chọn lớp có xác suất lớn nhất\n","    cmp = y_hat.type(y.dtype) == y                       # ép kiểu y_hat về giống y rồi so sánh\n","    return float(cmp.type(y.dtype).sum())                # trả về tổng số lượng dự đoán đúng\n"],"metadata":{"id":"pu8nm3wAyMOv","executionInfo":{"status":"ok","timestamp":1753417434364,"user_tz":-420,"elapsed":17,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":292,"outputs":[]},{"cell_type":"code","source":["def evaluate_accuracy_gpu(net, data_iter, device=None):\n","    if isinstance(net, nn.Module):            # nếu net là mô hình nn.Module thì đưa về chế độ eval\n","        net.eval()\n","        if not device:\n","            device = next(iter(net.parameters())).device       # nếu chưa chỉ định device thì tự động lấy device của tham số đầu tiên trong mô hình\n","    metric=Accumulator(2)                                      # tạo accumulator để tích lũy, metric[0] để tích lũy số dự đoán đúng, metric[1] để tích lũy tổng số mẫu\n","    with torch.no_grad():                                      # tắt gradient để tăng tốc\n","        for X, y in data_iter:\n","            if isinstance(X, list):                            #chuyển dữ liệu sang GPU\n","                X = [x.to(device) for x in X]\n","            else:\n","                X = X.to(device)\n","            y = y.to(device)\n","            metric.add(accuracy(net(X), y), y.numel())         #tính tổng số dự đoán đúng và tổng số mẫu rồi add vào metric\n","    return metric[0] / metric[1]                               # trả về accuracy = số dự đoán đúng/ số mẫu"],"metadata":{"id":"dHba5AS-yQNE","executionInfo":{"status":"ok","timestamp":1753417434369,"user_tz":-420,"elapsed":3,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":293,"outputs":[]},{"cell_type":"code","source":["def train_batch_ch13(net, X, y, loss, trainer, devices):         #huấn luyện 1 batch dữ liệu duy nhất\n","    if isinstance(X, list):                                      # chuyển X và y sang các thiết bị tương ứng\n","        X = [x.to(devices[0]) for x in X]\n","    else:\n","        X=X.to(devices[0])\n","    y=y.to(devices[0])\n","    net.train()                                                 #bật chế độ huấn luyện\n","    trainer.zero_grad()                                         #xóa gradient\n","    pred=net(X)                                                 #dự đoán đầu ra của mô hình\n","    l=loss(pred, y)                                             #tính hàm mất mát\n","    l.sum().backward()                                          # tính tổng loss và lấy gradient\n","    trainer.step()                                              #cập nhật trọng số\n","    train_loss_sum=l.sum()\n","    train_acc_sum=accuracy(pred, y)\n","    return train_loss_sum, train_acc_sum                        # trả về tổng train loss và tổng train acc\n"],"metadata":{"id":"knRDavadx_H8","executionInfo":{"status":"ok","timestamp":1753417434372,"user_tz":-420,"elapsed":2,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":294,"outputs":[]},{"cell_type":"code","source":["def train_ch13(net, train_iter, test_iter, loss, trainer, num_epochs, devices=try_all_gpus):\n","    timer, num_batches = Timer(), len(train_iter)                         # timer để đo thời gian huấn luyện, num_batches là len của train_iter\n","    animator = Animator(xlabel='epoch', xlim=[1, num_epochs], ylim=[0,1], legend=['train loss', 'train acc', 'test acc'])  # vẽ đồ thị động\n","    net = nn.DataParallel(net, device_ids=devices).to(devices[0])                                                          # chạy mô hình trên nhiều GPU xong thì chuyển lên GPU chính đầu tiên\n","    for epoch in range(num_epochs):\n","        metric=Accumulator(4)                                       # tạo accumulator để tích lũy theo thứ tự là loss, acc, tổng số mẫu, tổng số phần tử\n","        for i, (features, labels) in enumerate(train_iter):\n","            timer.start()                                           # bắt đầu tính thời gian\n","            l, acc = train_batch_ch13(net, features, labels, loss, trainer, devices)    # lấy loss, acc của 1 batch\n","            metric.add(l, acc, labels.shape[0], labels.numel())     # tích lũy loss, acc, shape của nhãn, tổng số phần tử của nhãn\n","            timer.stop()                                            # dừng tính thời gian\n","            if (i + 1) % (num_batches // 5) == 0 or i == num_batches - 1:                                                # vẽ biểu đồ 5 lần mỗi epoch, đảm bảo batch cuối luôn được vẽ\n","                animator.add(epoch + (i + 1) / num_batches, (metric[0] / metric[2], metric[1]/ metric[3], None))\n","        test_acc = evaluate_accuracy_gpu(net, test_iter)                # tính tess accuracy\n","        animator.add(epoch+1, (None, None, test_acc))\n","        print(f'loss {metric[0] / metric[2]:.3f}, train acc {metric[1] / metric[3]:.3f}, test acc {test_acc:.3f}')\n","        print(f'{metric[2] * num_epochs / timer.sum():.1f} examples/sec on {str(devices)}')"],"metadata":{"id":"DPMlaKf-yAt6","executionInfo":{"status":"ok","timestamp":1753417434374,"user_tz":-420,"elapsed":1,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":295,"outputs":[]},{"cell_type":"code","source":["lr, num_epochs = 0.01, 5\n","trainer = torch.optim.Adam(net.parameters(), lr=lr)\n","loss = nn.CrossEntropyLoss(reduction='none')\n","train_ch13(net, train_iter, test_iter, loss, trainer, num_epochs, devices)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":306},"id":"nwtfkISDxo5w","executionInfo":{"status":"ok","timestamp":1753417579779,"user_tz":-420,"elapsed":145404,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}},"outputId":"1597be1e-262b-4643-870a-26fcd518dd35"},"execution_count":296,"outputs":[{"output_type":"stream","name":"stdout","text":["loss 0.314, train acc 0.868, test acc 0.848\n","1278.4 examples/sec on [device(type='cuda', index=0)]\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 350x250 with 1 Axes>"],"image/svg+xml":"<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"235.784375pt\" height=\"187.155469pt\" viewBox=\"0 0 235.784375 187.155469\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\">\n <metadata>\n  <rdf:RDF xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">\n   <cc:Work>\n    <dc:type rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\"/>\n    <dc:date>2025-07-25T04:26:20.039052</dc:date>\n    <dc:format>image/svg+xml</dc:format>\n    <dc:creator>\n     <cc:Agent>\n      <dc:title>Matplotlib v3.10.0, https://matplotlib.org/</dc:title>\n     </cc:Agent>\n    </dc:creator>\n   </cc:Work>\n  </rdf:RDF>\n </metadata>\n <defs>\n  <style type=\"text/css\">*{stroke-linejoin: round; stroke-linecap: butt}</style>\n </defs>\n <g id=\"figure_1\">\n  <g id=\"patch_1\">\n   <path d=\"M 0 187.155469 \nL 235.784375 187.155469 \nL 235.784375 0 \nL 0 0 \nz\n\" style=\"fill: #ffffff\"/>\n  </g>\n  <g id=\"axes_1\">\n   <g id=\"patch_2\">\n    <path d=\"M 30.103125 149.599219 \nL 225.403125 149.599219 \nL 225.403125 10.999219 \nL 30.103125 10.999219 \nz\n\" style=\"fill: #ffffff\"/>\n   </g>\n   <g id=\"matplotlib.axis_1\">\n    <g id=\"xtick_1\">\n     <g id=\"line2d_1\">\n      <path d=\"M 30.103125 149.599219 \nL 30.103125 10.999219 \n\" clip-path=\"url(#p258e9e1e6a)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_2\">\n      <defs>\n       <path id=\"m896b6012b4\" d=\"M 0 0 \nL 0 3.5 \n\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </defs>\n      <g>\n       <use xlink:href=\"#m896b6012b4\" x=\"30.103125\" y=\"149.599219\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_1\">\n      <!-- 1 -->\n      <g transform=\"translate(26.921875 164.197656) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-31\" d=\"M 794 531 \nL 1825 531 \nL 1825 4091 \nL 703 3866 \nL 703 4441 \nL 1819 4666 \nL 2450 4666 \nL 2450 531 \nL 3481 531 \nL 3481 0 \nL 794 0 \nL 794 531 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-31\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_2\">\n     <g id=\"line2d_3\">\n      <path d=\"M 78.928125 149.599219 \nL 78.928125 10.999219 \n\" clip-path=\"url(#p258e9e1e6a)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_4\">\n      <g>\n       <use xlink:href=\"#m896b6012b4\" x=\"78.928125\" y=\"149.599219\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_2\">\n      <!-- 2 -->\n      <g transform=\"translate(75.746875 164.197656) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-32\" d=\"M 1228 531 \nL 3431 531 \nL 3431 0 \nL 469 0 \nL 469 531 \nQ 828 903 1448 1529 \nQ 2069 2156 2228 2338 \nQ 2531 2678 2651 2914 \nQ 2772 3150 2772 3378 \nQ 2772 3750 2511 3984 \nQ 2250 4219 1831 4219 \nQ 1534 4219 1204 4116 \nQ 875 4013 500 3803 \nL 500 4441 \nQ 881 4594 1212 4672 \nQ 1544 4750 1819 4750 \nQ 2544 4750 2975 4387 \nQ 3406 4025 3406 3419 \nQ 3406 3131 3298 2873 \nQ 3191 2616 2906 2266 \nQ 2828 2175 2409 1742 \nQ 1991 1309 1228 531 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-32\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_3\">\n     <g id=\"line2d_5\">\n      <path d=\"M 127.753125 149.599219 \nL 127.753125 10.999219 \n\" clip-path=\"url(#p258e9e1e6a)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_6\">\n      <g>\n       <use xlink:href=\"#m896b6012b4\" x=\"127.753125\" y=\"149.599219\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_3\">\n      <!-- 3 -->\n      <g transform=\"translate(124.571875 164.197656) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-33\" d=\"M 2597 2516 \nQ 3050 2419 3304 2112 \nQ 3559 1806 3559 1356 \nQ 3559 666 3084 287 \nQ 2609 -91 1734 -91 \nQ 1441 -91 1130 -33 \nQ 819 25 488 141 \nL 488 750 \nQ 750 597 1062 519 \nQ 1375 441 1716 441 \nQ 2309 441 2620 675 \nQ 2931 909 2931 1356 \nQ 2931 1769 2642 2001 \nQ 2353 2234 1838 2234 \nL 1294 2234 \nL 1294 2753 \nL 1863 2753 \nQ 2328 2753 2575 2939 \nQ 2822 3125 2822 3475 \nQ 2822 3834 2567 4026 \nQ 2313 4219 1838 4219 \nQ 1578 4219 1281 4162 \nQ 984 4106 628 3988 \nL 628 4550 \nQ 988 4650 1302 4700 \nQ 1616 4750 1894 4750 \nQ 2613 4750 3031 4423 \nQ 3450 4097 3450 3541 \nQ 3450 3153 3228 2886 \nQ 3006 2619 2597 2516 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-33\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_4\">\n     <g id=\"line2d_7\">\n      <path d=\"M 176.578125 149.599219 \nL 176.578125 10.999219 \n\" clip-path=\"url(#p258e9e1e6a)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_8\">\n      <g>\n       <use xlink:href=\"#m896b6012b4\" x=\"176.578125\" y=\"149.599219\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_4\">\n      <!-- 4 -->\n      <g transform=\"translate(173.396875 164.197656) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-34\" d=\"M 2419 4116 \nL 825 1625 \nL 2419 1625 \nL 2419 4116 \nz\nM 2253 4666 \nL 3047 4666 \nL 3047 1625 \nL 3713 1625 \nL 3713 1100 \nL 3047 1100 \nL 3047 0 \nL 2419 0 \nL 2419 1100 \nL 313 1100 \nL 313 1709 \nL 2253 4666 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-34\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_5\">\n     <g id=\"line2d_9\">\n      <path d=\"M 225.403125 149.599219 \nL 225.403125 10.999219 \n\" clip-path=\"url(#p258e9e1e6a)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_10\">\n      <g>\n       <use xlink:href=\"#m896b6012b4\" x=\"225.403125\" y=\"149.599219\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_5\">\n      <!-- 5 -->\n      <g transform=\"translate(222.221875 164.197656) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-35\" d=\"M 691 4666 \nL 3169 4666 \nL 3169 4134 \nL 1269 4134 \nL 1269 2991 \nQ 1406 3038 1543 3061 \nQ 1681 3084 1819 3084 \nQ 2600 3084 3056 2656 \nQ 3513 2228 3513 1497 \nQ 3513 744 3044 326 \nQ 2575 -91 1722 -91 \nQ 1428 -91 1123 -41 \nQ 819 9 494 109 \nL 494 744 \nQ 775 591 1075 516 \nQ 1375 441 1709 441 \nQ 2250 441 2565 725 \nQ 2881 1009 2881 1497 \nQ 2881 1984 2565 2268 \nQ 2250 2553 1709 2553 \nQ 1456 2553 1204 2497 \nQ 953 2441 691 2322 \nL 691 4666 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-35\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"text_6\">\n     <!-- epoch -->\n     <g transform=\"translate(112.525 177.875781) scale(0.1 -0.1)\">\n      <defs>\n       <path id=\"DejaVuSans-65\" d=\"M 3597 1894 \nL 3597 1613 \nL 953 1613 \nQ 991 1019 1311 708 \nQ 1631 397 2203 397 \nQ 2534 397 2845 478 \nQ 3156 559 3463 722 \nL 3463 178 \nQ 3153 47 2828 -22 \nQ 2503 -91 2169 -91 \nQ 1331 -91 842 396 \nQ 353 884 353 1716 \nQ 353 2575 817 3079 \nQ 1281 3584 2069 3584 \nQ 2775 3584 3186 3129 \nQ 3597 2675 3597 1894 \nz\nM 3022 2063 \nQ 3016 2534 2758 2815 \nQ 2500 3097 2075 3097 \nQ 1594 3097 1305 2825 \nQ 1016 2553 972 2059 \nL 3022 2063 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-70\" d=\"M 1159 525 \nL 1159 -1331 \nL 581 -1331 \nL 581 3500 \nL 1159 3500 \nL 1159 2969 \nQ 1341 3281 1617 3432 \nQ 1894 3584 2278 3584 \nQ 2916 3584 3314 3078 \nQ 3713 2572 3713 1747 \nQ 3713 922 3314 415 \nQ 2916 -91 2278 -91 \nQ 1894 -91 1617 61 \nQ 1341 213 1159 525 \nz\nM 3116 1747 \nQ 3116 2381 2855 2742 \nQ 2594 3103 2138 3103 \nQ 1681 3103 1420 2742 \nQ 1159 2381 1159 1747 \nQ 1159 1113 1420 752 \nQ 1681 391 2138 391 \nQ 2594 391 2855 752 \nQ 3116 1113 3116 1747 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-6f\" d=\"M 1959 3097 \nQ 1497 3097 1228 2736 \nQ 959 2375 959 1747 \nQ 959 1119 1226 758 \nQ 1494 397 1959 397 \nQ 2419 397 2687 759 \nQ 2956 1122 2956 1747 \nQ 2956 2369 2687 2733 \nQ 2419 3097 1959 3097 \nz\nM 1959 3584 \nQ 2709 3584 3137 3096 \nQ 3566 2609 3566 1747 \nQ 3566 888 3137 398 \nQ 2709 -91 1959 -91 \nQ 1206 -91 779 398 \nQ 353 888 353 1747 \nQ 353 2609 779 3096 \nQ 1206 3584 1959 3584 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-63\" d=\"M 3122 3366 \nL 3122 2828 \nQ 2878 2963 2633 3030 \nQ 2388 3097 2138 3097 \nQ 1578 3097 1268 2742 \nQ 959 2388 959 1747 \nQ 959 1106 1268 751 \nQ 1578 397 2138 397 \nQ 2388 397 2633 464 \nQ 2878 531 3122 666 \nL 3122 134 \nQ 2881 22 2623 -34 \nQ 2366 -91 2075 -91 \nQ 1284 -91 818 406 \nQ 353 903 353 1747 \nQ 353 2603 823 3093 \nQ 1294 3584 2113 3584 \nQ 2378 3584 2631 3529 \nQ 2884 3475 3122 3366 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-68\" d=\"M 3513 2113 \nL 3513 0 \nL 2938 0 \nL 2938 2094 \nQ 2938 2591 2744 2837 \nQ 2550 3084 2163 3084 \nQ 1697 3084 1428 2787 \nQ 1159 2491 1159 1978 \nL 1159 0 \nL 581 0 \nL 581 4863 \nL 1159 4863 \nL 1159 2956 \nQ 1366 3272 1645 3428 \nQ 1925 3584 2291 3584 \nQ 2894 3584 3203 3211 \nQ 3513 2838 3513 2113 \nz\n\" transform=\"scale(0.015625)\"/>\n      </defs>\n      <use xlink:href=\"#DejaVuSans-65\"/>\n      <use xlink:href=\"#DejaVuSans-70\" transform=\"translate(61.523438 0)\"/>\n      <use xlink:href=\"#DejaVuSans-6f\" transform=\"translate(125 0)\"/>\n      <use xlink:href=\"#DejaVuSans-63\" transform=\"translate(186.181641 0)\"/>\n      <use xlink:href=\"#DejaVuSans-68\" transform=\"translate(241.162109 0)\"/>\n     </g>\n    </g>\n   </g>\n   <g id=\"matplotlib.axis_2\">\n    <g id=\"ytick_1\">\n     <g id=\"line2d_11\">\n      <path d=\"M 30.103125 149.599219 \nL 225.403125 149.599219 \n\" clip-path=\"url(#p258e9e1e6a)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_12\">\n      <defs>\n       <path id=\"mbbd49aa7cb\" d=\"M 0 0 \nL -3.5 0 \n\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </defs>\n      <g>\n       <use xlink:href=\"#mbbd49aa7cb\" x=\"30.103125\" y=\"149.599219\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_7\">\n      <!-- 0.0 -->\n      <g transform=\"translate(7.2 153.398438) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-30\" d=\"M 2034 4250 \nQ 1547 4250 1301 3770 \nQ 1056 3291 1056 2328 \nQ 1056 1369 1301 889 \nQ 1547 409 2034 409 \nQ 2525 409 2770 889 \nQ 3016 1369 3016 2328 \nQ 3016 3291 2770 3770 \nQ 2525 4250 2034 4250 \nz\nM 2034 4750 \nQ 2819 4750 3233 4129 \nQ 3647 3509 3647 2328 \nQ 3647 1150 3233 529 \nQ 2819 -91 2034 -91 \nQ 1250 -91 836 529 \nQ 422 1150 422 2328 \nQ 422 3509 836 4129 \nQ 1250 4750 2034 4750 \nz\n\" transform=\"scale(0.015625)\"/>\n        <path id=\"DejaVuSans-2e\" d=\"M 684 794 \nL 1344 794 \nL 1344 0 \nL 684 0 \nL 684 794 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-30\"/>\n       <use xlink:href=\"#DejaVuSans-2e\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(95.410156 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_2\">\n     <g id=\"line2d_13\">\n      <path d=\"M 30.103125 121.879219 \nL 225.403125 121.879219 \n\" clip-path=\"url(#p258e9e1e6a)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_14\">\n      <g>\n       <use xlink:href=\"#mbbd49aa7cb\" x=\"30.103125\" y=\"121.879219\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_8\">\n      <!-- 0.2 -->\n      <g transform=\"translate(7.2 125.678438) scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-30\"/>\n       <use xlink:href=\"#DejaVuSans-2e\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-32\" transform=\"translate(95.410156 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_3\">\n     <g id=\"line2d_15\">\n      <path d=\"M 30.103125 94.159219 \nL 225.403125 94.159219 \n\" clip-path=\"url(#p258e9e1e6a)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_16\">\n      <g>\n       <use xlink:href=\"#mbbd49aa7cb\" x=\"30.103125\" y=\"94.159219\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_9\">\n      <!-- 0.4 -->\n      <g transform=\"translate(7.2 97.958438) scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-30\"/>\n       <use xlink:href=\"#DejaVuSans-2e\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-34\" transform=\"translate(95.410156 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_4\">\n     <g id=\"line2d_17\">\n      <path d=\"M 30.103125 66.439219 \nL 225.403125 66.439219 \n\" clip-path=\"url(#p258e9e1e6a)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_18\">\n      <g>\n       <use xlink:href=\"#mbbd49aa7cb\" x=\"30.103125\" y=\"66.439219\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_10\">\n      <!-- 0.6 -->\n      <g transform=\"translate(7.2 70.238437) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-36\" d=\"M 2113 2584 \nQ 1688 2584 1439 2293 \nQ 1191 2003 1191 1497 \nQ 1191 994 1439 701 \nQ 1688 409 2113 409 \nQ 2538 409 2786 701 \nQ 3034 994 3034 1497 \nQ 3034 2003 2786 2293 \nQ 2538 2584 2113 2584 \nz\nM 3366 4563 \nL 3366 3988 \nQ 3128 4100 2886 4159 \nQ 2644 4219 2406 4219 \nQ 1781 4219 1451 3797 \nQ 1122 3375 1075 2522 \nQ 1259 2794 1537 2939 \nQ 1816 3084 2150 3084 \nQ 2853 3084 3261 2657 \nQ 3669 2231 3669 1497 \nQ 3669 778 3244 343 \nQ 2819 -91 2113 -91 \nQ 1303 -91 875 529 \nQ 447 1150 447 2328 \nQ 447 3434 972 4092 \nQ 1497 4750 2381 4750 \nQ 2619 4750 2861 4703 \nQ 3103 4656 3366 4563 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-30\"/>\n       <use xlink:href=\"#DejaVuSans-2e\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-36\" transform=\"translate(95.410156 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_5\">\n     <g id=\"line2d_19\">\n      <path d=\"M 30.103125 38.719219 \nL 225.403125 38.719219 \n\" clip-path=\"url(#p258e9e1e6a)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_20\">\n      <g>\n       <use xlink:href=\"#mbbd49aa7cb\" x=\"30.103125\" y=\"38.719219\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_11\">\n      <!-- 0.8 -->\n      <g transform=\"translate(7.2 42.518438) scale(0.1 -0.1)\">\n       <defs>\n        <path id=\"DejaVuSans-38\" d=\"M 2034 2216 \nQ 1584 2216 1326 1975 \nQ 1069 1734 1069 1313 \nQ 1069 891 1326 650 \nQ 1584 409 2034 409 \nQ 2484 409 2743 651 \nQ 3003 894 3003 1313 \nQ 3003 1734 2745 1975 \nQ 2488 2216 2034 2216 \nz\nM 1403 2484 \nQ 997 2584 770 2862 \nQ 544 3141 544 3541 \nQ 544 4100 942 4425 \nQ 1341 4750 2034 4750 \nQ 2731 4750 3128 4425 \nQ 3525 4100 3525 3541 \nQ 3525 3141 3298 2862 \nQ 3072 2584 2669 2484 \nQ 3125 2378 3379 2068 \nQ 3634 1759 3634 1313 \nQ 3634 634 3220 271 \nQ 2806 -91 2034 -91 \nQ 1263 -91 848 271 \nQ 434 634 434 1313 \nQ 434 1759 690 2068 \nQ 947 2378 1403 2484 \nz\nM 1172 3481 \nQ 1172 3119 1398 2916 \nQ 1625 2713 2034 2713 \nQ 2441 2713 2670 2916 \nQ 2900 3119 2900 3481 \nQ 2900 3844 2670 4047 \nQ 2441 4250 2034 4250 \nQ 1625 4250 1398 4047 \nQ 1172 3844 1172 3481 \nz\n\" transform=\"scale(0.015625)\"/>\n       </defs>\n       <use xlink:href=\"#DejaVuSans-30\"/>\n       <use xlink:href=\"#DejaVuSans-2e\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-38\" transform=\"translate(95.410156 0)\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_6\">\n     <g id=\"line2d_21\">\n      <path d=\"M 30.103125 10.999219 \nL 225.403125 10.999219 \n\" clip-path=\"url(#p258e9e1e6a)\" style=\"fill: none; stroke: #b0b0b0; stroke-width: 0.8; stroke-linecap: square\"/>\n     </g>\n     <g id=\"line2d_22\">\n      <g>\n       <use xlink:href=\"#mbbd49aa7cb\" x=\"30.103125\" y=\"10.999219\" style=\"stroke: #000000; stroke-width: 0.8\"/>\n      </g>\n     </g>\n     <g id=\"text_12\">\n      <!-- 1.0 -->\n      <g transform=\"translate(7.2 14.798438) scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-31\"/>\n       <use xlink:href=\"#DejaVuSans-2e\" transform=\"translate(63.623047 0)\"/>\n       <use xlink:href=\"#DejaVuSans-30\" transform=\"translate(95.410156 0)\"/>\n      </g>\n     </g>\n    </g>\n   </g>\n   <g id=\"line2d_23\">\n    <path d=\"M -1 53.040592 \nL 0.758176 53.226712 \nL 10.498202 57.531742 \nL 20.238227 62.735596 \nL 29.978253 67.306493 \nL 30.103125 67.337412 \nL 39.843151 89.510739 \nL 49.583176 90.244102 \nL 59.323202 91.159229 \nL 69.063227 91.478468 \nL 78.803253 91.445688 \nL 78.928125 91.458919 \nL 88.668151 98.813705 \nL 98.408176 97.344849 \nL 108.148202 97.885886 \nL 117.888227 97.691177 \nL 127.628253 97.925656 \nL 127.753125 97.93605 \nL 137.493151 101.520588 \nL 147.233176 102.03947 \nL 156.973202 102.538284 \nL 166.713227 102.044968 \nL 176.453253 102.035198 \nL 176.578125 102.03204 \nL 186.318151 107.685824 \nL 196.058176 106.424955 \nL 205.798202 106.631918 \nL 215.538227 106.360757 \nL 225.278253 106.096382 \nL 225.403125 106.108294 \n\" clip-path=\"url(#p258e9e1e6a)\" style=\"fill: none; stroke: #1f77b4; stroke-width: 1.5; stroke-linecap: square\"/>\n   </g>\n   <g id=\"line2d_24\">\n    <path d=\"M -1 75.147121 \nL 0.758176 74.899038 \nL 10.498202 68.610397 \nL 20.238227 62.939513 \nL 29.978253 58.265373 \nL 30.103125 58.245187 \nL 39.843151 37.597536 \nL 49.583176 37.014483 \nL 59.323202 36.838642 \nL 69.063227 36.750721 \nL 78.803253 36.786815 \nL 78.928125 36.773275 \nL 88.668151 33.155228 \nL 98.408176 33.682752 \nL 108.148202 33.349579 \nL 117.888227 33.738281 \nL 127.628253 33.671647 \nL 127.753125 33.663091 \nL 137.493151 32.266767 \nL 147.233176 31.878065 \nL 156.973202 31.554147 \nL 166.713227 31.940535 \nL 176.453253 31.883618 \nL 176.578125 31.883467 \nL 186.318151 28.935036 \nL 196.058176 29.601382 \nL 205.798202 29.166406 \nL 215.538227 29.226562 \nL 225.278253 29.34595 \nL 225.403125 29.344315 \n\" clip-path=\"url(#p258e9e1e6a)\" style=\"fill: none; stroke-dasharray: 5.55,2.4; stroke-dashoffset: 0; stroke: #bf00bf; stroke-width: 1.5\"/>\n   </g>\n   <g id=\"line2d_25\">\n    <path d=\"M 30.103125 37.582699 \nL 78.928125 38.503003 \nL 127.753125 33.119779 \nL 176.578125 32.426779 \nL 225.403125 32.105227 \n\" clip-path=\"url(#p258e9e1e6a)\" style=\"fill: none; stroke-dasharray: 9.6,2.4,1.5,2.4; stroke-dashoffset: 0; stroke: #008000; stroke-width: 1.5\"/>\n   </g>\n   <g id=\"patch_3\">\n    <path d=\"M 30.103125 149.599219 \nL 30.103125 10.999219 \n\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n   </g>\n   <g id=\"patch_4\">\n    <path d=\"M 225.403125 149.599219 \nL 225.403125 10.999219 \n\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n   </g>\n   <g id=\"patch_5\">\n    <path d=\"M 30.103125 149.599219 \nL 225.403125 149.599219 \n\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n   </g>\n   <g id=\"patch_6\">\n    <path d=\"M 30.103125 10.999219 \nL 225.403125 10.999219 \n\" style=\"fill: none; stroke: #000000; stroke-width: 0.8; stroke-linejoin: miter; stroke-linecap: square\"/>\n   </g>\n   <g id=\"legend_1\">\n    <g id=\"patch_7\">\n     <path d=\"M 37.103125 144.599219 \nL 114.871875 144.599219 \nQ 116.871875 144.599219 116.871875 142.599219 \nL 116.871875 99.564844 \nQ 116.871875 97.564844 114.871875 97.564844 \nL 37.103125 97.564844 \nQ 35.103125 97.564844 35.103125 99.564844 \nL 35.103125 142.599219 \nQ 35.103125 144.599219 37.103125 144.599219 \nz\n\" style=\"fill: #ffffff; opacity: 0.8; stroke: #cccccc; stroke-linejoin: miter\"/>\n    </g>\n    <g id=\"line2d_26\">\n     <path d=\"M 39.103125 105.663281 \nL 49.103125 105.663281 \nL 59.103125 105.663281 \n\" style=\"fill: none; stroke: #1f77b4; stroke-width: 1.5; stroke-linecap: square\"/>\n    </g>\n    <g id=\"text_13\">\n     <!-- train loss -->\n     <g transform=\"translate(67.103125 109.163281) scale(0.1 -0.1)\">\n      <defs>\n       <path id=\"DejaVuSans-74\" d=\"M 1172 4494 \nL 1172 3500 \nL 2356 3500 \nL 2356 3053 \nL 1172 3053 \nL 1172 1153 \nQ 1172 725 1289 603 \nQ 1406 481 1766 481 \nL 2356 481 \nL 2356 0 \nL 1766 0 \nQ 1100 0 847 248 \nQ 594 497 594 1153 \nL 594 3053 \nL 172 3053 \nL 172 3500 \nL 594 3500 \nL 594 4494 \nL 1172 4494 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-72\" d=\"M 2631 2963 \nQ 2534 3019 2420 3045 \nQ 2306 3072 2169 3072 \nQ 1681 3072 1420 2755 \nQ 1159 2438 1159 1844 \nL 1159 0 \nL 581 0 \nL 581 3500 \nL 1159 3500 \nL 1159 2956 \nQ 1341 3275 1631 3429 \nQ 1922 3584 2338 3584 \nQ 2397 3584 2469 3576 \nQ 2541 3569 2628 3553 \nL 2631 2963 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-61\" d=\"M 2194 1759 \nQ 1497 1759 1228 1600 \nQ 959 1441 959 1056 \nQ 959 750 1161 570 \nQ 1363 391 1709 391 \nQ 2188 391 2477 730 \nQ 2766 1069 2766 1631 \nL 2766 1759 \nL 2194 1759 \nz\nM 3341 1997 \nL 3341 0 \nL 2766 0 \nL 2766 531 \nQ 2569 213 2275 61 \nQ 1981 -91 1556 -91 \nQ 1019 -91 701 211 \nQ 384 513 384 1019 \nQ 384 1609 779 1909 \nQ 1175 2209 1959 2209 \nL 2766 2209 \nL 2766 2266 \nQ 2766 2663 2505 2880 \nQ 2244 3097 1772 3097 \nQ 1472 3097 1187 3025 \nQ 903 2953 641 2809 \nL 641 3341 \nQ 956 3463 1253 3523 \nQ 1550 3584 1831 3584 \nQ 2591 3584 2966 3190 \nQ 3341 2797 3341 1997 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-69\" d=\"M 603 3500 \nL 1178 3500 \nL 1178 0 \nL 603 0 \nL 603 3500 \nz\nM 603 4863 \nL 1178 4863 \nL 1178 4134 \nL 603 4134 \nL 603 4863 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-6e\" d=\"M 3513 2113 \nL 3513 0 \nL 2938 0 \nL 2938 2094 \nQ 2938 2591 2744 2837 \nQ 2550 3084 2163 3084 \nQ 1697 3084 1428 2787 \nQ 1159 2491 1159 1978 \nL 1159 0 \nL 581 0 \nL 581 3500 \nL 1159 3500 \nL 1159 2956 \nQ 1366 3272 1645 3428 \nQ 1925 3584 2291 3584 \nQ 2894 3584 3203 3211 \nQ 3513 2838 3513 2113 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-20\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-6c\" d=\"M 603 4863 \nL 1178 4863 \nL 1178 0 \nL 603 0 \nL 603 4863 \nz\n\" transform=\"scale(0.015625)\"/>\n       <path id=\"DejaVuSans-73\" d=\"M 2834 3397 \nL 2834 2853 \nQ 2591 2978 2328 3040 \nQ 2066 3103 1784 3103 \nQ 1356 3103 1142 2972 \nQ 928 2841 928 2578 \nQ 928 2378 1081 2264 \nQ 1234 2150 1697 2047 \nL 1894 2003 \nQ 2506 1872 2764 1633 \nQ 3022 1394 3022 966 \nQ 3022 478 2636 193 \nQ 2250 -91 1575 -91 \nQ 1294 -91 989 -36 \nQ 684 19 347 128 \nL 347 722 \nQ 666 556 975 473 \nQ 1284 391 1588 391 \nQ 1994 391 2212 530 \nQ 2431 669 2431 922 \nQ 2431 1156 2273 1281 \nQ 2116 1406 1581 1522 \nL 1381 1569 \nQ 847 1681 609 1914 \nQ 372 2147 372 2553 \nQ 372 3047 722 3315 \nQ 1072 3584 1716 3584 \nQ 2034 3584 2315 3537 \nQ 2597 3491 2834 3397 \nz\n\" transform=\"scale(0.015625)\"/>\n      </defs>\n      <use xlink:href=\"#DejaVuSans-74\"/>\n      <use xlink:href=\"#DejaVuSans-72\" transform=\"translate(39.208984 0)\"/>\n      <use xlink:href=\"#DejaVuSans-61\" transform=\"translate(80.322266 0)\"/>\n      <use xlink:href=\"#DejaVuSans-69\" transform=\"translate(141.601562 0)\"/>\n      <use xlink:href=\"#DejaVuSans-6e\" transform=\"translate(169.384766 0)\"/>\n      <use xlink:href=\"#DejaVuSans-20\" transform=\"translate(232.763672 0)\"/>\n      <use xlink:href=\"#DejaVuSans-6c\" transform=\"translate(264.550781 0)\"/>\n      <use xlink:href=\"#DejaVuSans-6f\" transform=\"translate(292.333984 0)\"/>\n      <use xlink:href=\"#DejaVuSans-73\" transform=\"translate(353.515625 0)\"/>\n      <use xlink:href=\"#DejaVuSans-73\" transform=\"translate(405.615234 0)\"/>\n     </g>\n    </g>\n    <g id=\"line2d_27\">\n     <path d=\"M 39.103125 120.341406 \nL 49.103125 120.341406 \nL 59.103125 120.341406 \n\" style=\"fill: none; stroke-dasharray: 5.55,2.4; stroke-dashoffset: 0; stroke: #bf00bf; stroke-width: 1.5\"/>\n    </g>\n    <g id=\"text_14\">\n     <!-- train acc -->\n     <g transform=\"translate(67.103125 123.841406) scale(0.1 -0.1)\">\n      <use xlink:href=\"#DejaVuSans-74\"/>\n      <use xlink:href=\"#DejaVuSans-72\" transform=\"translate(39.208984 0)\"/>\n      <use xlink:href=\"#DejaVuSans-61\" transform=\"translate(80.322266 0)\"/>\n      <use xlink:href=\"#DejaVuSans-69\" transform=\"translate(141.601562 0)\"/>\n      <use xlink:href=\"#DejaVuSans-6e\" transform=\"translate(169.384766 0)\"/>\n      <use xlink:href=\"#DejaVuSans-20\" transform=\"translate(232.763672 0)\"/>\n      <use xlink:href=\"#DejaVuSans-61\" transform=\"translate(264.550781 0)\"/>\n      <use xlink:href=\"#DejaVuSans-63\" transform=\"translate(325.830078 0)\"/>\n      <use xlink:href=\"#DejaVuSans-63\" transform=\"translate(380.810547 0)\"/>\n     </g>\n    </g>\n    <g id=\"line2d_28\">\n     <path d=\"M 39.103125 135.019531 \nL 49.103125 135.019531 \nL 59.103125 135.019531 \n\" style=\"fill: none; stroke-dasharray: 9.6,2.4,1.5,2.4; stroke-dashoffset: 0; stroke: #008000; stroke-width: 1.5\"/>\n    </g>\n    <g id=\"text_15\">\n     <!-- test acc -->\n     <g transform=\"translate(67.103125 138.519531) scale(0.1 -0.1)\">\n      <use xlink:href=\"#DejaVuSans-74\"/>\n      <use xlink:href=\"#DejaVuSans-65\" transform=\"translate(39.208984 0)\"/>\n      <use xlink:href=\"#DejaVuSans-73\" transform=\"translate(100.732422 0)\"/>\n      <use xlink:href=\"#DejaVuSans-74\" transform=\"translate(152.832031 0)\"/>\n      <use xlink:href=\"#DejaVuSans-20\" transform=\"translate(192.041016 0)\"/>\n      <use xlink:href=\"#DejaVuSans-61\" transform=\"translate(223.828125 0)\"/>\n      <use xlink:href=\"#DejaVuSans-63\" transform=\"translate(285.107422 0)\"/>\n      <use xlink:href=\"#DejaVuSans-63\" transform=\"translate(340.087891 0)\"/>\n     </g>\n    </g>\n   </g>\n  </g>\n </g>\n <defs>\n  <clipPath id=\"p258e9e1e6a\">\n   <rect x=\"30.103125\" y=\"10.999219\" width=\"195.3\" height=\"138.6\"/>\n  </clipPath>\n </defs>\n</svg>\n"},"metadata":{}}]},{"cell_type":"markdown","source":["Prediction"],"metadata":{"id":"quOZpF7XyWuS"}},{"cell_type":"code","source":["def predict_sentiment(net, vocab, sequence):\n","    sequence = torch.tensor(vocab[sequence.split()], device = try_gpu())\n","    label = torch.argmax(net(sequence.reshape(1, -1)), dim=1)\n","    return 'positive' if label == 1 else 'negative'"],"metadata":{"id":"6mEP0o6CyYlT","executionInfo":{"status":"ok","timestamp":1753417579789,"user_tz":-420,"elapsed":3,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}}},"execution_count":297,"outputs":[]},{"cell_type":"code","source":["predict_sentiment(net, vocab, 'this movie is so great')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"id":"9Kd64qypyuPK","executionInfo":{"status":"ok","timestamp":1753417579861,"user_tz":-420,"elapsed":70,"user":{"displayName":"K61 NGUYỄN KHÁNH HUYỀN","userId":"14018202072431551609"}},"outputId":"cb57fb4e-ed1e-4219-9dbc-cd94412b1423"},"execution_count":298,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'positive'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":298}]}]}